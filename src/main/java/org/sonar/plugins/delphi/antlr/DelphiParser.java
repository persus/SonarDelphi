// $ANTLR 3.5.2 org\\sonar\\plugins\\delphi\\antlr\\Delphi.g 2017-06-23 15:47:57

/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD", 
		"AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN", 
		"AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL", 
		"CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS", 
		"CONTINUE", "ControlString", "Controlchar", "DEFAULT", "DEPRECATED", "DESTRUCTOR", 
		"DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ", 
		"DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT", 
		"EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR", 
		"FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION", 
		"GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION", 
		"IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE", 
		"INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY", 
		"LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL", 
		"NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR", 
		"OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM", 
		"PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY", 
		"PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK", 
		"RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER", 
		"REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING", 
		"RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH", 
		"STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR", 
		"TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkAsmHexLabel", 
		"TkAsmHexNum", "TkClass", "TkClassField", "TkClassOfType", "TkClassParents", 
		"TkCustomAttribute", "TkCustomAttributeArgs", "TkFunctionArgs", "TkFunctionBody", 
		"TkFunctionName", "TkFunctionReturn", "TkGlobalFunction", "TkGuid", "TkHexNum", 
		"TkIdentifier", "TkIntNum", "TkInterface", "TkNewType", "TkObject", "TkRealNum", 
		"TkRecord", "TkRecordHelper", "TkVariableIdents", "TkVariableParam", "TkVariableType", 
		"UNIT", "UNSAFE", "UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT", 
		"VIRTUAL", "WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'", 
		"'@@'"
	};
	public static final int EOF=-1;
	public static final int T__200=200;
	public static final int T__201=201;
	public static final int ABSOLUTE=4;
	public static final int ABSTRACT=5;
	public static final int ADD=6;
	public static final int AND=7;
	public static final int ANSISTRING=8;
	public static final int ARRAY=9;
	public static final int AS=10;
	public static final int ASM=11;
	public static final int ASSEMBLER=12;
	public static final int ASSEMBLY=13;
	public static final int ASSIGN=14;
	public static final int AT=15;
	public static final int AT2=16;
	public static final int AUTOMATED=17;
	public static final int Alpha=18;
	public static final int BEGIN=19;
	public static final int BREAK=20;
	public static final int CASE=21;
	public static final int CDECL=22;
	public static final int CLASS=23;
	public static final int COLON=24;
	public static final int COMMA=25;
	public static final int COMMENT=26;
	public static final int CONST=27;
	public static final int CONSTRUCTOR=28;
	public static final int CONTAINS=29;
	public static final int CONTINUE=30;
	public static final int ControlString=31;
	public static final int Controlchar=32;
	public static final int DEFAULT=33;
	public static final int DEPRECATED=34;
	public static final int DESTRUCTOR=35;
	public static final int DISPID=36;
	public static final int DISPINTERFACE=37;
	public static final int DIV=38;
	public static final int DO=39;
	public static final int DOT=40;
	public static final int DOTDOT=41;
	public static final int DOWNTO=42;
	public static final int DQ=43;
	public static final int DW=44;
	public static final int DYNAMIC=45;
	public static final int Digit=46;
	public static final int Digitseq=47;
	public static final int ELSE=48;
	public static final int END=49;
	public static final int EQUAL=50;
	public static final int EXCEPT=51;
	public static final int EXIT=52;
	public static final int EXPERIMENTAL=53;
	public static final int EXPORT=54;
	public static final int EXPORTS=55;
	public static final int EXTERNAL=56;
	public static final int FALSE=57;
	public static final int FAR=58;
	public static final int FILE=59;
	public static final int FINAL=60;
	public static final int FINALIZATION=61;
	public static final int FINALLY=62;
	public static final int FOR=63;
	public static final int FORWARD=64;
	public static final int FUNCTION=65;
	public static final int GE=66;
	public static final int GOTO=67;
	public static final int GT=68;
	public static final int HELPER=69;
	public static final int Hexdigit=70;
	public static final int Hexdigitseq=71;
	public static final int IF=72;
	public static final int IMPLEMENTATION=73;
	public static final int IMPLEMENTS=74;
	public static final int IN=75;
	public static final int INDEX=76;
	public static final int INHERITED=77;
	public static final int INITIALIZATION=78;
	public static final int INLINE=79;
	public static final int INTERFACE=80;
	public static final int IS=81;
	public static final int LABEL=82;
	public static final int LBRACK=83;
	public static final int LBRACK2=84;
	public static final int LCURLY=85;
	public static final int LE=86;
	public static final int LIBRARY=87;
	public static final int LOCAL=88;
	public static final int LPAREN=89;
	public static final int LT=90;
	public static final int MESSAGE=91;
	public static final int MINUS=92;
	public static final int MOD=93;
	public static final int NAME=94;
	public static final int NEAR=95;
	public static final int NIL=96;
	public static final int NODEFAULT=97;
	public static final int NOT=98;
	public static final int NOT_EQUAL=99;
	public static final int OBJECT=100;
	public static final int OF=101;
	public static final int ON=102;
	public static final int OPERATOR=103;
	public static final int OR=104;
	public static final int OUT=105;
	public static final int OVERLOAD=106;
	public static final int OVERRIDE=107;
	public static final int PACKAGE=108;
	public static final int PACKED=109;
	public static final int PASCAL=110;
	public static final int PLATFORM=111;
	public static final int PLUS=112;
	public static final int POINTER=113;
	public static final int POINTER2=114;
	public static final int PRIVATE=115;
	public static final int PROCEDURE=116;
	public static final int PROGRAM=117;
	public static final int PROPERTY=118;
	public static final int PROTECTED=119;
	public static final int PUBLIC=120;
	public static final int PUBLISHED=121;
	public static final int QuotedString=122;
	public static final int RAISE=123;
	public static final int RBRACK=124;
	public static final int RBRACK2=125;
	public static final int RCURLY=126;
	public static final int READ=127;
	public static final int READONLY=128;
	public static final int RECORD=129;
	public static final int REFERENCE=130;
	public static final int REGISTER=131;
	public static final int REINTRODUCE=132;
	public static final int REMOVE=133;
	public static final int REPEAT=134;
	public static final int REQUIRES=135;
	public static final int RESIDENT=136;
	public static final int RESOURCESTRING=137;
	public static final int RPAREN=138;
	public static final int SAFECALL=139;
	public static final int SEALED=140;
	public static final int SEMI=141;
	public static final int SET=142;
	public static final int SHL=143;
	public static final int SHR=144;
	public static final int SLASH=145;
	public static final int STAR=146;
	public static final int STATIC=147;
	public static final int STDCALL=148;
	public static final int STORED=149;
	public static final int STRICT=150;
	public static final int STRING=151;
	public static final int THEN=152;
	public static final int THREADVAR=153;
	public static final int TO=154;
	public static final int TRUE=155;
	public static final int TRY=156;
	public static final int TYPE=157;
	public static final int TkAnonymousExpression=158;
	public static final int TkAsmHexLabel=159;
	public static final int TkAsmHexNum=160;
	public static final int TkClass=161;
	public static final int TkClassField=162;
	public static final int TkClassOfType=163;
	public static final int TkClassParents=164;
	public static final int TkCustomAttribute=165;
	public static final int TkCustomAttributeArgs=166;
	public static final int TkFunctionArgs=167;
	public static final int TkFunctionBody=168;
	public static final int TkFunctionName=169;
	public static final int TkFunctionReturn=170;
	public static final int TkGlobalFunction=171;
	public static final int TkGuid=172;
	public static final int TkHexNum=173;
	public static final int TkIdentifier=174;
	public static final int TkIntNum=175;
	public static final int TkInterface=176;
	public static final int TkNewType=177;
	public static final int TkObject=178;
	public static final int TkRealNum=179;
	public static final int TkRecord=180;
	public static final int TkRecordHelper=181;
	public static final int TkVariableIdents=182;
	public static final int TkVariableParam=183;
	public static final int TkVariableType=184;
	public static final int UNIT=185;
	public static final int UNSAFE=186;
	public static final int UNTIL=187;
	public static final int USES=188;
	public static final int UnicodeBOM=189;
	public static final int VAR=190;
	public static final int VARARGS=191;
	public static final int VARIANT=192;
	public static final int VIRTUAL=193;
	public static final int WHILE=194;
	public static final int WITH=195;
	public static final int WRITE=196;
	public static final int WRITEONLY=197;
	public static final int WS=198;
	public static final int XOR=199;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public DelphiParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public DelphiParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[655+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return DelphiParser.tokenNames; }
	@Override public String getGrammarFileName() { return "org\\sonar\\plugins\\delphi\\antlr\\Delphi.g"; }


	public static class file_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "file"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:1: file : ( program | library | unit | packageE );
	public final DelphiParser.file_return file() throws RecognitionException {
		DelphiParser.file_return retval = new DelphiParser.file_return();
		retval.start = input.LT(1);
		int file_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope program1 =null;
		ParserRuleReturnScope library2 =null;
		ParserRuleReturnScope unit3 =null;
		ParserRuleReturnScope packageE4 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:30: ( program | library | unit | packageE )
			int alt1=4;
			switch ( input.LA(1) ) {
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case DOT:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case PROGRAM:
			case RESOURCESTRING:
			case THREADVAR:
			case TYPE:
			case USES:
			case VAR:
				{
				alt1=1;
				}
				break;
			case LIBRARY:
				{
				alt1=2;
				}
				break;
			case UNIT:
				{
				alt1=3;
				}
				break;
			case PACKAGE:
				{
				alt1=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:32: program
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_program_in_file84);
					program1=program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, program1.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:42: library
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_library_in_file88);
					library2=library();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, library2.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:52: unit
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unit_in_file92);
					unit3=unit();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unit3.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:59: packageE
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_packageE_in_file96);
					packageE4=packageE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, packageE4.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, file_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "file"


	public static class program_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "program"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:1: program : ( programHead )? ( usesFileClause )? block '.' ;
	public final DelphiParser.program_return program() throws RecognitionException {
		DelphiParser.program_return retval = new DelphiParser.program_return();
		retval.start = input.LT(1);
		int program_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal8=null;
		ParserRuleReturnScope programHead5 =null;
		ParserRuleReturnScope usesFileClause6 =null;
		ParserRuleReturnScope block7 =null;

		Object char_literal8_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:30: ( ( programHead )? ( usesFileClause )? block '.' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )? ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==PROGRAM) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:33: programHead
					{
					pushFollow(FOLLOW_programHead_in_program159);
					programHead5=programHead();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programHead5.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:47: ( usesFileClause )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USES) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:48: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_program164);
					usesFileClause6=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause6.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_program168);
			block7=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block7.getTree());

			char_literal8=(Token)match(input,DOT,FOLLOW_DOT_in_program170); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal8_tree = (Object)adaptor.create(char_literal8);
			adaptor.addChild(root_0, char_literal8_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "program"


	public static class programHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programHead"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
	public final DelphiParser.programHead_return programHead() throws RecognitionException {
		DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
		retval.start = input.LT(1);
		int programHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal9=null;
		Token char_literal12=null;
		ParserRuleReturnScope namespaceName10 =null;
		ParserRuleReturnScope programParmSeq11 =null;

		Object string_literal9_tree=null;
		Object char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:30: ( 'program' namespaceName ( programParmSeq )? ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:32: 'program' namespaceName ( programParmSeq )? ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal9=(Token)match(input,PROGRAM,FOLLOW_PROGRAM_in_programHead224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (Object)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_programHead226);
			namespaceName10=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName10.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:56: ( programParmSeq )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==LPAREN) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:57: programParmSeq
					{
					pushFollow(FOLLOW_programParmSeq_in_programHead229);
					programParmSeq11=programParmSeq();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programParmSeq11.getTree());

					}
					break;

			}

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_programHead233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (Object)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, programHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programHead"


	public static class programParmSeq_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programParmSeq"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
	public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
		DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
		retval.start = input.LT(1);
		int programParmSeq_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal13=null;
		Token char_literal15=null;
		Token char_literal17=null;
		ParserRuleReturnScope ident14 =null;
		ParserRuleReturnScope ident16 =null;

		Object char_literal13_tree=null;
		Object char_literal15_tree=null;
		Object char_literal17_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:30: ( '(' ( ident ( ',' ident )* )? ')' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:32: '(' ( ident ( ',' ident )* )? ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_programParmSeq284); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal13_tree = (Object)adaptor.create(char_literal13);
			adaptor.addChild(root_0, char_literal13_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:36: ( ident ( ',' ident )* )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==ADD||LA6_0==ANSISTRING||LA6_0==AT||LA6_0==BREAK||(LA6_0 >= CONTAINS && LA6_0 <= CONTINUE)||LA6_0==DEFAULT||LA6_0==EXIT||LA6_0==EXPORT||LA6_0==FINAL||LA6_0==IMPLEMENTS||LA6_0==INDEX||LA6_0==LOCAL||LA6_0==MESSAGE||LA6_0==NAME||LA6_0==OBJECT||LA6_0==OPERATOR||LA6_0==OUT||LA6_0==POINTER||(LA6_0 >= READ && LA6_0 <= READONLY)||(LA6_0 >= REFERENCE && LA6_0 <= REGISTER)||LA6_0==REMOVE||(LA6_0 >= STORED && LA6_0 <= STRING)||LA6_0==TkIdentifier||LA6_0==VARIANT||LA6_0==WRITE||LA6_0==200) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:37: ident ( ',' ident )*
					{
					pushFollow(FOLLOW_ident_in_programParmSeq287);
					ident14=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident14.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:43: ( ',' ident )*
					loop5:
					while (true) {
						int alt5=2;
						int LA5_0 = input.LA(1);
						if ( (LA5_0==COMMA) ) {
							alt5=1;
						}

						switch (alt5) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:44: ',' ident
							{
							char_literal15=(Token)match(input,COMMA,FOLLOW_COMMA_in_programParmSeq290); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal15_tree = (Object)adaptor.create(char_literal15);
							adaptor.addChild(root_0, char_literal15_tree);
							}

							pushFollow(FOLLOW_ident_in_programParmSeq292);
							ident16=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ident16.getTree());

							}
							break;

						default :
							break loop5;
						}
					}

					}
					break;

			}

			char_literal17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_programParmSeq299); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal17_tree = (Object)adaptor.create(char_literal17);
			adaptor.addChild(root_0, char_literal17_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, programParmSeq_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programParmSeq"


	public static class library_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "library"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:1: library : libraryHead ( usesFileClause )? block '.' ;
	public final DelphiParser.library_return library() throws RecognitionException {
		DelphiParser.library_return retval = new DelphiParser.library_return();
		retval.start = input.LT(1);
		int library_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal21=null;
		ParserRuleReturnScope libraryHead18 =null;
		ParserRuleReturnScope usesFileClause19 =null;
		ParserRuleReturnScope block20 =null;

		Object char_literal21_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:30: ( libraryHead ( usesFileClause )? block '.' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:32: libraryHead ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_libraryHead_in_library357);
			libraryHead18=libraryHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, libraryHead18.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:44: ( usesFileClause )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==USES) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:45: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_library360);
					usesFileClause19=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause19.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_library364);
			block20=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block20.getTree());

			char_literal21=(Token)match(input,DOT,FOLLOW_DOT_in_library366); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal21_tree = (Object)adaptor.create(char_literal21);
			adaptor.addChild(root_0, char_literal21_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "library"


	public static class libraryHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "libraryHead"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
	public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
		DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
		retval.start = input.LT(1);
		int libraryHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal22=null;
		Token char_literal25=null;
		ParserRuleReturnScope namespaceName23 =null;
		ParserRuleReturnScope hintingDirective24 =null;

		Object string_literal22_tree=null;
		Object char_literal25_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_LIBRARY=new RewriteRuleTokenStream(adaptor,"token LIBRARY");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:32: 'library' namespaceName ( hintingDirective )* ';'
			{
			string_literal22=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_libraryHead420); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LIBRARY.add(string_literal22);

			pushFollow(FOLLOW_namespaceName_in_libraryHead422);
			namespaceName23=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName23.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:56: ( hintingDirective )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==DEPRECATED||LA8_0==EXPERIMENTAL||LA8_0==LIBRARY||LA8_0==PLATFORM) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:57: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_libraryHead425);
					hintingDirective24=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective24.getTree());
					}
					break;

				default :
					break loop8;
				}
			}

			char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_libraryHead429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal25);

			// AST REWRITE
			// elements: LIBRARY, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 84:80: -> ^( 'library' namespaceName )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:83: ^( 'library' namespaceName )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, libraryHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "libraryHead"


	public static class packageE_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageE"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
	public final DelphiParser.packageE_return packageE() throws RecognitionException {
		DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
		retval.start = input.LT(1);
		int packageE_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal29=null;
		Token char_literal30=null;
		ParserRuleReturnScope packageHead26 =null;
		ParserRuleReturnScope requiresClause27 =null;
		ParserRuleReturnScope containsClause28 =null;

		Object string_literal29_tree=null;
		Object char_literal30_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:32: packageHead requiresClause ( containsClause )? 'end' '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_packageHead_in_packageE494);
			packageHead26=packageHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, packageHead26.getTree());

			pushFollow(FOLLOW_requiresClause_in_packageE496);
			requiresClause27=requiresClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, requiresClause27.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:59: ( containsClause )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==CONTAINS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:60: containsClause
					{
					pushFollow(FOLLOW_containsClause_in_packageE499);
					containsClause28=containsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, containsClause28.getTree());

					}
					break;

			}

			string_literal29=(Token)match(input,END,FOLLOW_END_in_packageE503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal29_tree = (Object)adaptor.create(string_literal29);
			adaptor.addChild(root_0, string_literal29_tree);
			}

			char_literal30=(Token)match(input,DOT,FOLLOW_DOT_in_packageE505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal30_tree = (Object)adaptor.create(char_literal30);
			adaptor.addChild(root_0, char_literal30_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, packageE_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageE"


	public static class packageHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageHead"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:1: packageHead : 'package' namespaceName ';' ;
	public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
		DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
		retval.start = input.LT(1);
		int packageHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal31=null;
		Token char_literal33=null;
		ParserRuleReturnScope namespaceName32 =null;

		Object string_literal31_tree=null;
		Object char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:30: ( 'package' namespaceName ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:32: 'package' namespaceName ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal31=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageHead559); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal31_tree = (Object)adaptor.create(string_literal31);
			adaptor.addChild(root_0, string_literal31_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_packageHead561);
			namespaceName32=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName32.getTree());

			char_literal33=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageHead563); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal33_tree = (Object)adaptor.create(char_literal33);
			adaptor.addChild(root_0, char_literal33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, packageHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageHead"


	public static class unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
	public final DelphiParser.unit_return unit() throws RecognitionException {
		DelphiParser.unit_return retval = new DelphiParser.unit_return();
		retval.start = input.LT(1);
		int unit_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal38=null;
		ParserRuleReturnScope unitHead34 =null;
		ParserRuleReturnScope unitInterface35 =null;
		ParserRuleReturnScope unitImplementation36 =null;
		ParserRuleReturnScope unitBlock37 =null;

		Object char_literal38_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:32: unitHead unitInterface unitImplementation unitBlock '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unitHead_in_unit624);
			unitHead34=unitHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitHead34.getTree());

			pushFollow(FOLLOW_unitInterface_in_unit626);
			unitInterface35=unitInterface();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInterface35.getTree());

			pushFollow(FOLLOW_unitImplementation_in_unit628);
			unitImplementation36=unitImplementation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitImplementation36.getTree());

			pushFollow(FOLLOW_unitBlock_in_unit630);
			unitBlock37=unitBlock();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitBlock37.getTree());

			char_literal38=(Token)match(input,DOT,FOLLOW_DOT_in_unit632); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal38_tree = (Object)adaptor.create(char_literal38);
			adaptor.addChild(root_0, char_literal38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unit"


	public static class unitHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitHead"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
	public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
		DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
		retval.start = input.LT(1);
		int unitHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal39=null;
		Token char_literal42=null;
		ParserRuleReturnScope namespaceName40 =null;
		ParserRuleReturnScope hintingDirective41 =null;

		Object string_literal39_tree=null;
		Object char_literal42_tree=null;
		RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:32: 'unit' namespaceName ( hintingDirective )* ';'
			{
			string_literal39=(Token)match(input,UNIT,FOLLOW_UNIT_in_unitHead689); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNIT.add(string_literal39);

			pushFollow(FOLLOW_namespaceName_in_unitHead691);
			namespaceName40=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName40.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:53: ( hintingDirective )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==DEPRECATED||LA10_0==EXPERIMENTAL||LA10_0==LIBRARY||LA10_0==PLATFORM) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:54: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_unitHead694);
					hintingDirective41=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective41.getTree());
					}
					break;

				default :
					break loop10;
				}
			}

			char_literal42=(Token)match(input,SEMI,FOLLOW_SEMI_in_unitHead698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal42);

			// AST REWRITE
			// elements: UNIT, namespaceName, hintingDirective
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 92:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:80: ^( 'unit' namespaceName ( hintingDirective )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:103: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_1, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, unitHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitHead"


	public static class unitInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInterface"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
	public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
		DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
		retval.start = input.LT(1);
		int unitInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal43=null;
		ParserRuleReturnScope usesClause44 =null;
		ParserRuleReturnScope interfaceDecl45 =null;

		Object string_literal43_tree=null;
		RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_interfaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDecl");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:32: 'interface' ( usesClause )? ( interfaceDecl )*
			{
			string_literal43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_unitInterface763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal43);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:44: ( usesClause )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==USES) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:45: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitInterface766);
					usesClause44=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause44.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:58: ( interfaceDecl )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==CLASS||(LA12_0 >= CONST && LA12_0 <= CONSTRUCTOR)||LA12_0==DESTRUCTOR||LA12_0==EXPORTS||LA12_0==FUNCTION||LA12_0==LBRACK||LA12_0==PROCEDURE||LA12_0==RESOURCESTRING||LA12_0==THREADVAR||LA12_0==TYPE||LA12_0==VAR) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:59: interfaceDecl
					{
					pushFollow(FOLLOW_interfaceDecl_in_unitInterface771);
					interfaceDecl45=interfaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceDecl.add(interfaceDecl45.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// AST REWRITE
			// elements: INTERFACE, usesClause, interfaceDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 94:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:92: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:106: ( interfaceDecl )*
				while ( stream_interfaceDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
				}
				stream_interfaceDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, unitInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInterface"


	public static class unitImplementation_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitImplementation"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
	public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
		DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
		retval.start = input.LT(1);
		int unitImplementation_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal46=null;
		ParserRuleReturnScope usesClause47 =null;
		ParserRuleReturnScope declSection48 =null;

		Object string_literal46_tree=null;
		RewriteRuleTokenStream stream_IMPLEMENTATION=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTATION");
		RewriteRuleSubtreeStream stream_declSection=new RewriteRuleSubtreeStream(adaptor,"rule declSection");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:32: 'implementation' ( usesClause )? ( declSection )*
			{
			string_literal46=(Token)match(input,IMPLEMENTATION,FOLLOW_IMPLEMENTATION_in_unitImplementation836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPLEMENTATION.add(string_literal46);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:49: ( usesClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==USES) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:50: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitImplementation839);
					usesClause47=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause47.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:63: ( declSection )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==CLASS||(LA14_0 >= CONST && LA14_0 <= CONSTRUCTOR)||LA14_0==DESTRUCTOR||LA14_0==EXPORTS||LA14_0==FUNCTION||(LA14_0 >= LABEL && LA14_0 <= LBRACK)||LA14_0==PROCEDURE||LA14_0==RESOURCESTRING||LA14_0==THREADVAR||LA14_0==TYPE||LA14_0==VAR) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:64: declSection
					{
					pushFollow(FOLLOW_declSection_in_unitImplementation844);
					declSection48=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declSection.add(declSection48.getTree());
					}
					break;

				default :
					break loop14;
				}
			}

			// AST REWRITE
			// elements: usesClause, IMPLEMENTATION, declSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 96:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:81: ^( 'implementation' ( usesClause )? ( declSection )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:100: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:114: ( declSection )*
				while ( stream_declSection.hasNext() ) {
					adaptor.addChild(root_1, stream_declSection.nextTree());
				}
				stream_declSection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, unitImplementation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitImplementation"


	public static class unitBlock_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitBlock"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
	public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
		DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
		retval.start = input.LT(1);
		int unitBlock_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal50=null;
		Token string_literal52=null;
		ParserRuleReturnScope unitInitialization49 =null;
		ParserRuleReturnScope compoundStatement51 =null;

		Object string_literal50_tree=null;
		Object string_literal52_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:30: ( unitInitialization 'end' | compoundStatement | 'end' )
			int alt15=3;
			switch ( input.LA(1) ) {
			case INITIALIZATION:
				{
				alt15=1;
				}
				break;
			case BEGIN:
				{
				alt15=2;
				}
				break;
			case END:
				{
				alt15=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}
			switch (alt15) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:32: unitInitialization 'end'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unitInitialization_in_unitBlock918);
					unitInitialization49=unitInitialization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInitialization49.getTree());

					string_literal50=(Token)match(input,END,FOLLOW_END_in_unitBlock920); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal50_tree = (Object)adaptor.create(string_literal50);
					adaptor.addChild(root_0, string_literal50_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_unitBlock953);
					compoundStatement51=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement51.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:100:32: 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal52=(Token)match(input,END,FOLLOW_END_in_unitBlock986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal52_tree = (Object)adaptor.create(string_literal52);
					adaptor.addChild(root_0, string_literal52_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, unitBlock_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitBlock"


	public static class unitInitialization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInitialization"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
	public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
		DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
		retval.start = input.LT(1);
		int unitInitialization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal53=null;
		ParserRuleReturnScope statementList54 =null;
		ParserRuleReturnScope unitFinalization55 =null;

		Object string_literal53_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:30: ( 'initialization' statementList ( unitFinalization )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:32: 'initialization' statementList ( unitFinalization )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal53=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_unitInitialization1033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal53_tree = (Object)adaptor.create(string_literal53);
			adaptor.addChild(root_0, string_literal53_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitInitialization1035);
			statementList54=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList54.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:63: ( unitFinalization )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FINALIZATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:64: unitFinalization
					{
					pushFollow(FOLLOW_unitFinalization_in_unitInitialization1038);
					unitFinalization55=unitFinalization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitFinalization55.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, unitInitialization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInitialization"


	public static class unitFinalization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitFinalization"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:1: unitFinalization : 'finalization' statementList ;
	public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
		DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
		retval.start = input.LT(1);
		int unitFinalization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal56=null;
		ParserRuleReturnScope statementList57 =null;

		Object string_literal56_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:30: ( 'finalization' statementList )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:32: 'finalization' statementList
			{
			root_0 = (Object)adaptor.nil();


			string_literal56=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_unitFinalization1089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal56_tree = (Object)adaptor.create(string_literal56);
			adaptor.addChild(root_0, string_literal56_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitFinalization1091);
			statementList57=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList57.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, unitFinalization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitFinalization"


	public static class containsClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "containsClause"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:1: containsClause : 'contains' namespaceFileNameList ;
	public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
		DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
		retval.start = input.LT(1);
		int containsClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal58=null;
		ParserRuleReturnScope namespaceFileNameList59 =null;

		Object string_literal58_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:30: ( 'contains' namespaceFileNameList )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'contains' namespaceFileNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal58=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_containsClause1145); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal58_tree = (Object)adaptor.create(string_literal58);
			adaptor.addChild(root_0, string_literal58_tree);
			}

			pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1147);
			namespaceFileNameList59=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, containsClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "containsClause"


	public static class requiresClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "requiresClause"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: requiresClause : 'requires' namespaceNameList ;
	public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
		DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
		retval.start = input.LT(1);
		int requiresClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal60=null;
		ParserRuleReturnScope namespaceNameList61 =null;

		Object string_literal60_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'requires' namespaceNameList )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'requires' namespaceNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal60=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requiresClause1198); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal60_tree = (Object)adaptor.create(string_literal60);
			adaptor.addChild(root_0, string_literal60_tree);
			}

			pushFollow(FOLLOW_namespaceNameList_in_requiresClause1200);
			namespaceNameList61=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNameList61.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, requiresClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "requiresClause"


	public static class usesClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesClause"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
	public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
		DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
		retval.start = input.LT(1);
		int usesClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal62=null;
		ParserRuleReturnScope namespaceNameList63 =null;

		Object string_literal62_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'uses' namespaceNameList
			{
			string_literal62=(Token)match(input,USES,FOLLOW_USES_in_usesClause1255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal62);

			pushFollow(FOLLOW_namespaceNameList_in_usesClause1257);
			namespaceNameList63=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceNameList.add(namespaceNameList63.getTree());
			// AST REWRITE
			// elements: USES, namespaceNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 113:57: -> ^( 'uses' namespaceNameList )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:60: ^( 'uses' namespaceNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, usesClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesClause"


	public static class usesFileClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesFileClause"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
	public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
		DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
		retval.start = input.LT(1);
		int usesFileClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal64=null;
		ParserRuleReturnScope namespaceFileNameList65 =null;

		Object string_literal64_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceFileNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:32: 'uses' namespaceFileNameList
			{
			string_literal64=(Token)match(input,USES,FOLLOW_USES_in_usesFileClause1316); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal64);

			pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1318);
			namespaceFileNameList65=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
			// AST REWRITE
			// elements: namespaceFileNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 115:61: -> ^( 'uses' namespaceFileNameList )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:64: ^( 'uses' namespaceFileNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, usesFileClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesFileClause"


	public static class namespaceFileNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileNameList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
	public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
		DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
		retval.start = input.LT(1);
		int namespaceFileNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal67=null;
		Token char_literal69=null;
		ParserRuleReturnScope namespaceFileName66 =null;
		ParserRuleReturnScope namespaceFileName68 =null;

		Object char_literal67_tree=null;
		Object char_literal69_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceFileName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:32: namespaceFileName ( ',' namespaceFileName )* ';'
			{
			pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1370);
			namespaceFileName66=namespaceFileName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName66.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:50: ( ',' namespaceFileName )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==COMMA) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:51: ',' namespaceFileName
					{
					char_literal67=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceFileNameList1373); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal67);

					pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1375);
					namespaceFileName68=namespaceFileName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName68.getTree());
					}
					break;

				default :
					break loop17;
				}
			}

			char_literal69=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceFileNameList1379); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal69);

			// AST REWRITE
			// elements: namespaceFileName, namespaceFileName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 117:79: -> namespaceFileName ( namespaceFileName )*
			{
				adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:100: ( namespaceFileName )*
				while ( stream_namespaceFileName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				}
				stream_namespaceFileName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, namespaceFileNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileNameList"


	public static class namespaceFileName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileName"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
	public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
		DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
		retval.start = input.LT(1);
		int namespaceFileName_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal71=null;
		Token QuotedString72=null;
		ParserRuleReturnScope namespaceName70 =null;

		Object string_literal71_tree=null;
		Object QuotedString72_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:32: namespaceName ( 'in' QuotedString )?
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceFileName1436);
			namespaceName70=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName70.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:46: ( 'in' QuotedString )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==IN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:47: 'in' QuotedString
					{
					string_literal71=(Token)match(input,IN,FOLLOW_IN_in_namespaceFileName1439); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(string_literal71);

					QuotedString72=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_namespaceFileName1441); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString72);

					}
					break;

			}

			// AST REWRITE
			// elements: namespaceName, QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 119:67: -> ^( namespaceName ( QuotedString )? )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:70: ^( namespaceName ( QuotedString )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:86: ( QuotedString )?
				if ( stream_QuotedString.hasNext() ) {
					adaptor.addChild(root_1, stream_QuotedString.nextNode());
				}
				stream_QuotedString.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, namespaceFileName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileName"


	public static class namespaceNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceNameList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
	public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
		DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
		retval.start = input.LT(1);
		int namespaceNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal74=null;
		Token char_literal76=null;
		ParserRuleReturnScope namespaceName73 =null;
		ParserRuleReturnScope namespaceName75 =null;

		Object char_literal74_tree=null;
		Object char_literal76_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:32: namespaceName ( ',' namespaceName )* ';'
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceNameList1502);
			namespaceName73=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName73.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:46: ( ',' namespaceName )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:47: ',' namespaceName
					{
					char_literal74=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceNameList1505); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal74);

					pushFollow(FOLLOW_namespaceName_in_namespaceNameList1507);
					namespaceName75=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName75.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			char_literal76=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceNameList1511); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal76);

			// AST REWRITE
			// elements: namespaceName, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 121:71: -> namespaceName ( namespaceName )*
			{
				adaptor.addChild(root_0, stream_namespaceName.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:88: ( namespaceName )*
				while ( stream_namespaceName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceName.nextTree());
				}
				stream_namespaceName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, namespaceNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceNameList"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: block : ( declSection )* ( blockBody )? ;
	public final DelphiParser.block_return block() throws RecognitionException {
		DelphiParser.block_return retval = new DelphiParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope declSection77 =null;
		ParserRuleReturnScope blockBody78 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( ( declSection )* ( blockBody )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )* ( blockBody )?
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case TYPE:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA20_5 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case PROCEDURE:
					{
					int LA20_6 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case FUNCTION:
					{
					int LA20_7 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LBRACK:
					{
					int LA20_8 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CLASS:
					{
					int LA20_9 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA20_10 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case EXPORTS:
					{
					int LA20_11 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
					{
					pushFollow(FOLLOW_declSection_in_block1584);
					declSection77=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, declSection77.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:47: ( blockBody )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==BEGIN) ) {
				int LA21_1 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			else if ( (LA21_0==ASM) ) {
				int LA21_2 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			switch (alt21) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
					{
					pushFollow(FOLLOW_blockBody_in_block1589);
					blockBody78=blockBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody78.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class blockBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "blockBody"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: blockBody : ( compoundStatement | assemblerStatement );
	public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
		DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
		retval.start = input.LT(1);
		int blockBody_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope compoundStatement79 =null;
		ParserRuleReturnScope assemblerStatement80 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( compoundStatement | assemblerStatement )
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==BEGIN) ) {
				alt22=1;
			}
			else if ( (LA22_0==ASM) ) {
				alt22=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}

			switch (alt22) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_blockBody1647);
					compoundStatement79=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement79.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:129:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_blockBody1680);
					assemblerStatement80=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, blockBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "blockBody"


	public static class declSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection );
	public final DelphiParser.declSection_return declSection() throws RecognitionException {
		DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
		retval.start = input.LT(1);
		int declSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope labelDeclSection81 =null;
		ParserRuleReturnScope constSection82 =null;
		ParserRuleReturnScope typeSection83 =null;
		ParserRuleReturnScope varSection84 =null;
		ParserRuleReturnScope exportedProcHeading85 =null;
		ParserRuleReturnScope methodDecl86 =null;
		ParserRuleReturnScope procDecl87 =null;
		ParserRuleReturnScope exportsSection88 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:30: ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection )
			int alt23=8;
			switch ( input.LA(1) ) {
			case LABEL:
				{
				alt23=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt23=2;
				}
				break;
			case TYPE:
				{
				alt23=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt23=4;
				}
				break;
			case PROCEDURE:
				{
				int LA23_5 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FUNCTION:
				{
				int LA23_6 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA23_7 = input.LA(2);
				if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt23=6;
				}
				break;
			case EXPORTS:
				{
				alt23=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:32: labelDeclSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_labelDeclSection_in_declSection1734);
					labelDeclSection81=labelDeclSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, labelDeclSection81.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:132:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_declSection1767);
					constSection82=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection82.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:133:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_declSection1800);
					typeSection83=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection83.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:134:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_declSection1833);
					varSection84=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection84.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_declSection1866);
					exportedProcHeading85=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading85.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_declSection1899);
					methodDecl86=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl86.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_declSection1932);
					procDecl87=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl87.getTree());

					}
					break;
				case 8 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_declSection1965);
					exportsSection88=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection88.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, declSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declSection"


	public static class interfaceDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
	public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
		DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
		retval.start = input.LT(1);
		int interfaceDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constSection89 =null;
		ParserRuleReturnScope typeSection90 =null;
		ParserRuleReturnScope varSection91 =null;
		ParserRuleReturnScope exportedProcHeading92 =null;
		ParserRuleReturnScope exportsSection93 =null;
		ParserRuleReturnScope procDecl94 =null;
		ParserRuleReturnScope methodDecl95 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
			int alt24=7;
			switch ( input.LA(1) ) {
			case CONST:
			case RESOURCESTRING:
				{
				alt24=1;
				}
				break;
			case TYPE:
				{
				alt24=2;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt24=3;
				}
				break;
			case PROCEDURE:
				{
				int LA24_4 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case FUNCTION:
				{
				int LA24_5 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case EXPORTS:
				{
				alt24=5;
				}
				break;
			case LBRACK:
				{
				int LA24_7 = input.LA(2);
				if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt24=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}
			switch (alt24) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_interfaceDecl2017);
					constSection89=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection89.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_interfaceDecl2050);
					typeSection90=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection90.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_interfaceDecl2083);
					varSection91=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection91.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2116);
					exportedProcHeading92=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading92.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_interfaceDecl2149);
					exportsSection93=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection93.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_interfaceDecl2182);
					procDecl94=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl94.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_interfaceDecl2215);
					methodDecl95=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl95.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, interfaceDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceDecl"


	public static class labelDeclSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labelDeclSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
	public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
		DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
		retval.start = input.LT(1);
		int labelDeclSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal96=null;
		Token char_literal98=null;
		Token char_literal100=null;
		ParserRuleReturnScope label97 =null;
		ParserRuleReturnScope label99 =null;

		Object string_literal96_tree=null;
		Object char_literal98_tree=null;
		Object char_literal100_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( 'label' label ( ',' label )* ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: 'label' label ( ',' label )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal96=(Token)match(input,LABEL,FOLLOW_LABEL_in_labelDeclSection2264); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal96_tree = (Object)adaptor.create(string_literal96);
			adaptor.addChild(root_0, string_literal96_tree);
			}

			pushFollow(FOLLOW_label_in_labelDeclSection2266);
			label97=label();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label97.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:46: ( ',' label )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:47: ',' label
					{
					char_literal98=(Token)match(input,COMMA,FOLLOW_COMMA_in_labelDeclSection2269); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal98_tree = (Object)adaptor.create(char_literal98);
					adaptor.addChild(root_0, char_literal98_tree);
					}

					pushFollow(FOLLOW_label_in_labelDeclSection2271);
					label99=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label99.getTree());

					}
					break;

				default :
					break loop25;
				}
			}

			char_literal100=(Token)match(input,SEMI,FOLLOW_SEMI_in_labelDeclSection2275); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal100_tree = (Object)adaptor.create(char_literal100);
			adaptor.addChild(root_0, char_literal100_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, labelDeclSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labelDeclSection"


	public static class constSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
	public final DelphiParser.constSection_return constSection() throws RecognitionException {
		DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
		retval.start = input.LT(1);
		int constSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constKey101 =null;
		ParserRuleReturnScope constDeclaration102 =null;

		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		RewriteRuleSubtreeStream stream_constKey=new RewriteRuleSubtreeStream(adaptor,"rule constKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: constKey ( constDeclaration )*
			{
			pushFollow(FOLLOW_constKey_in_constSection2328);
			constKey101=constKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constKey.add(constKey101.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:41: ( constDeclaration )*
			loop26:
			while (true) {
				int alt26=2;
				alt26 = dfa26.predict(input);
				switch (alt26) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
					{
					pushFollow(FOLLOW_constDeclaration_in_constSection2331);
					constDeclaration102=constDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constDeclaration.add(constDeclaration102.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			// AST REWRITE
			// elements: constDeclaration, constKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 150:61: -> ^( constKey ( constDeclaration )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:64: ^( constKey ( constDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:75: ( constDeclaration )*
				while ( stream_constDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_constDeclaration.nextTree());
				}
				stream_constDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, constSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constSection"


	public static class constKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constKey"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:1: constKey : ( 'const' | 'resourcestring' );
	public final DelphiParser.constKey_return constKey() throws RecognitionException {
		DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
		retval.start = input.LT(1);
		int constKey_StartIndex = input.index();

		Object root_0 = null;

		Token set103=null;

		Object set103_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:30: ( 'const' | 'resourcestring' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set103=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==RESOURCESTRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set103));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, constKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constKey"


	public static class constDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constDeclaration"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
	public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
		DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
		retval.start = input.LT(1);
		int constDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal106=null;
		Token char_literal108=null;
		Token char_literal111=null;
		ParserRuleReturnScope customAttribute104 =null;
		ParserRuleReturnScope ident105 =null;
		ParserRuleReturnScope typeDecl107 =null;
		ParserRuleReturnScope constExpression109 =null;
		ParserRuleReturnScope hintingDirective110 =null;

		Object char_literal106_tree=null;
		Object char_literal108_tree=null;
		Object char_literal111_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_constExpression=new RewriteRuleSubtreeStream(adaptor,"rule constExpression");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )?
			int alt27=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt27=1;
					}
					break;
				case TkIdentifier:
					{
					int LA27_2 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case 200:
					{
					int LA27_3 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA27_4 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
			}
			switch (alt27) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_constDeclaration2486);
					customAttribute104=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute104.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_ident_in_constDeclaration2490);
			ident105=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident105.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:57: ( ':' typeDecl )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==COLON) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:58: ':' typeDecl
					{
					char_literal106=(Token)match(input,COLON,FOLLOW_COLON_in_constDeclaration2493); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal106);

					pushFollow(FOLLOW_typeDecl_in_constDeclaration2495);
					typeDecl107=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl107.getTree());
					}
					break;

			}

			char_literal108=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_constDeclaration2499); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal108);

			pushFollow(FOLLOW_constExpression_in_constDeclaration2501);
			constExpression109=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constExpression.add(constExpression109.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:93: ( hintingDirective )*
			loop29:
			while (true) {
				int alt29=2;
				int LA29_0 = input.LA(1);
				if ( (LA29_0==DEPRECATED||LA29_0==EXPERIMENTAL||LA29_0==LIBRARY||LA29_0==PLATFORM) ) {
					alt29=1;
				}

				switch (alt29) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:94: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_constDeclaration2504);
					hintingDirective110=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective110.getTree());
					}
					break;

				default :
					break loop29;
				}
			}

			char_literal111=(Token)match(input,SEMI,FOLLOW_SEMI_in_constDeclaration2508); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal111);

			// AST REWRITE
			// elements: EQUAL, typeDecl, ident, constExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 155:117: -> ident ( typeDecl )? '=' constExpression
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:126: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_0, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, stream_EQUAL.nextNode());
				adaptor.addChild(root_0, stream_constExpression.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, constDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constDeclaration"


	public static class typeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
	public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
		DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
		retval.start = input.LT(1);
		int typeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal112=null;
		ParserRuleReturnScope typeDeclaration113 =null;
		ParserRuleReturnScope typeDeclaration114 =null;

		Object string_literal112_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:32: 'type' typeDeclaration ( typeDeclaration )*
			{
			string_literal112=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeSection2575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal112);

			pushFollow(FOLLOW_typeDeclaration_in_typeSection2577);
			typeDeclaration113=typeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration113.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:55: ( typeDeclaration )*
			loop30:
			while (true) {
				int alt30=2;
				alt30 = dfa30.predict(input);
				switch (alt30) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_typeSection2580);
					typeDeclaration114=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration114.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: TYPE, typeDeclaration, typeDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 157:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:102: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, typeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeSection"


	public static class typeDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDeclaration"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
	public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
		DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
		retval.start = input.LT(1);
		int typeDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal117=null;
		Token char_literal120=null;
		ParserRuleReturnScope customAttribute115 =null;
		ParserRuleReturnScope genericTypeIdent116 =null;
		ParserRuleReturnScope typeDecl118 =null;
		ParserRuleReturnScope hintingDirective119 =null;

		Object char_literal117_tree=null;
		Object char_literal120_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )?
			int alt31=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt31=1;
					}
					break;
				case TkIdentifier:
					{
					int LA31_2 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case 200:
					{
					int LA31_3 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA31_4 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_typeDeclaration2646);
					customAttribute115=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute115.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2650);
			genericTypeIdent116=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent116.getTree());
			char_literal117=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_typeDeclaration2652); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal117);

			pushFollow(FOLLOW_typeDecl_in_typeDeclaration2654);
			typeDecl118=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl118.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:81: ( hintingDirective )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==DEPRECATED||LA32_0==EXPERIMENTAL||LA32_0==LIBRARY||LA32_0==PLATFORM) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:82: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2657);
					hintingDirective119=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective119.getTree());
					}
					break;

				default :
					break loop32;
				}
			}

			char_literal120=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration2661); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal120);

			// AST REWRITE
			// elements: genericTypeIdent, customAttribute, typeDecl, hintingDirective
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 159:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkNewType, "TkNewType"), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:120: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_1, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:167: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_2, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, typeDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDeclaration"


	public static class varSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
	public final DelphiParser.varSection_return varSection() throws RecognitionException {
		DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
		retval.start = input.LT(1);
		int varSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope varKey121 =null;
		ParserRuleReturnScope varDeclaration122 =null;
		ParserRuleReturnScope varDeclaration123 =null;

		RewriteRuleSubtreeStream stream_varDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule varDeclaration");
		RewriteRuleSubtreeStream stream_varKey=new RewriteRuleSubtreeStream(adaptor,"rule varKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:32: varKey varDeclaration ( varDeclaration )*
			{
			pushFollow(FOLLOW_varKey_in_varSection2738);
			varKey121=varKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varKey.add(varKey121.getTree());
			pushFollow(FOLLOW_varDeclaration_in_varSection2740);
			varDeclaration122=varDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration122.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:54: ( varDeclaration )*
			loop33:
			while (true) {
				int alt33=2;
				alt33 = dfa33.predict(input);
				switch (alt33) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
					{
					pushFollow(FOLLOW_varDeclaration_in_varSection2743);
					varDeclaration123=varDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration123.getTree());
					}
					break;

				default :
					break loop33;
				}
			}

			// AST REWRITE
			// elements: varDeclaration, varDeclaration, varKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 161:72: -> ^( varKey varDeclaration ( varDeclaration )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:75: ^( varKey varDeclaration ( varDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
				adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:99: ( varDeclaration )*
				while ( stream_varDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				}
				stream_varDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, varSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varSection"


	public static class varKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varKey"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: varKey : ( 'var' | 'threadvar' );
	public final DelphiParser.varKey_return varKey() throws RecognitionException {
		DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
		retval.start = input.LT(1);
		int varKey_StartIndex = input.index();

		Object root_0 = null;

		Token set124=null;

		Object set124_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( 'var' | 'threadvar' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set124=input.LT(1);
			if ( input.LA(1)==THREADVAR||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set124));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, varKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varKey"


	public static class varDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varDeclaration"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
	public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
		DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
		retval.start = input.LT(1);
		int varDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal127=null;
		Token char_literal131=null;
		ParserRuleReturnScope customAttribute125 =null;
		ParserRuleReturnScope identListFlat126 =null;
		ParserRuleReturnScope typeDecl128 =null;
		ParserRuleReturnScope varValueSpec129 =null;
		ParserRuleReturnScope hintingDirective130 =null;

		Object char_literal127_tree=null;
		Object char_literal131_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_varValueSpec=new RewriteRuleSubtreeStream(adaptor,"rule varValueSpec");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )?
			int alt34=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt34=1;
					}
					break;
				case TkIdentifier:
					{
					int LA34_2 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case 200:
					{
					int LA34_3 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA34_4 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
			}
			switch (alt34) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_varDeclaration2903);
					customAttribute125=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute125.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_varDeclaration2907);
			identListFlat126=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat126.getTree());
			char_literal127=(Token)match(input,COLON,FOLLOW_COLON_in_varDeclaration2909); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal127);

			pushFollow(FOLLOW_typeDecl_in_varDeclaration2911);
			typeDecl128=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl128.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:78: ( varValueSpec )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==ABSOLUTE||LA35_0==EQUAL) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:79: varValueSpec
					{
					pushFollow(FOLLOW_varValueSpec_in_varDeclaration2914);
					varValueSpec129=varValueSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varValueSpec.add(varValueSpec129.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:94: ( hintingDirective )*
			loop36:
			while (true) {
				int alt36=2;
				int LA36_0 = input.LA(1);
				if ( (LA36_0==DEPRECATED||LA36_0==EXPERIMENTAL||LA36_0==LIBRARY||LA36_0==PLATFORM) ) {
					alt36=1;
				}

				switch (alt36) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:95: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_varDeclaration2919);
					hintingDirective130=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective130.getTree());
					}
					break;

				default :
					break loop36;
				}
			}

			char_literal131=(Token)match(input,SEMI,FOLLOW_SEMI_in_varDeclaration2923); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal131);

			// AST REWRITE
			// elements: typeDecl, identListFlat, customAttribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 167:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:121: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:140: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:174: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, varDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varDeclaration"


	public static class varValueSpec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varValueSpec"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varValueSpec : ( 'absolute' ident | 'absolute' constExpression | '=' constExpression );
	public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
		DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
		retval.start = input.LT(1);
		int varValueSpec_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal132=null;
		Token string_literal134=null;
		Token char_literal136=null;
		ParserRuleReturnScope ident133 =null;
		ParserRuleReturnScope constExpression135 =null;
		ParserRuleReturnScope constExpression137 =null;

		Object string_literal132_tree=null;
		Object string_literal134_tree=null;
		Object char_literal136_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( 'absolute' ident | 'absolute' constExpression | '=' constExpression )
			int alt37=3;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==ABSOLUTE) ) {
				switch ( input.LA(2) ) {
				case TkIdentifier:
					{
					int LA37_3 = input.LA(3);
					if ( (synpred53_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred54_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case 200:
					{
					int LA37_4 = input.LA(3);
					if ( (LA37_4==TkIdentifier) ) {
						int LA37_8 = input.LA(4);
						if ( (synpred53_Delphi()) ) {
							alt37=1;
						}
						else if ( (synpred54_Delphi()) ) {
							alt37=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 37, 8, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA37_5 = input.LA(3);
					if ( (synpred53_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred54_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case AND:
				case AS:
				case AT2:
				case ControlString:
				case DEPRECATED:
				case DIV:
				case DOT:
				case EQUAL:
				case EXPERIMENTAL:
				case FALSE:
				case FUNCTION:
				case GE:
				case GT:
				case IN:
				case INHERITED:
				case IS:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LPAREN:
				case LT:
				case MINUS:
				case MOD:
				case NIL:
				case NOT:
				case NOT_EQUAL:
				case OR:
				case PLATFORM:
				case PLUS:
				case POINTER2:
				case PROCEDURE:
				case QuotedString:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case TRUE:
				case TkAsmHexNum:
				case TkHexNum:
				case TkIntNum:
				case TkRealNum:
				case XOR:
				case 201:
					{
					alt37=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 37, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA37_0==EQUAL) ) {
				alt37=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 37, 0, input);
				throw nvae;
			}

			switch (alt37) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
					{
					root_0 = (Object)adaptor.nil();


					string_literal132=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec2995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal132_tree = (Object)adaptor.create(string_literal132);
					adaptor.addChild(root_0, string_literal132_tree);
					}

					pushFollow(FOLLOW_ident_in_varValueSpec2997);
					ident133=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident133.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal134=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal134_tree = (Object)adaptor.create(string_literal134);
					adaptor.addChild(root_0, string_literal134_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3032);
					constExpression135=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression135.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: '=' constExpression
					{
					root_0 = (Object)adaptor.nil();


					char_literal136=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_varValueSpec3065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal136_tree = (Object)adaptor.create(char_literal136);
					adaptor.addChild(root_0, char_literal136_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3067);
					constExpression137=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression137.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, varValueSpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varValueSpec"


	public static class exportsSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportsSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
	public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
		DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
		retval.start = input.LT(1);
		int exportsSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal138=null;
		Token char_literal141=null;
		Token char_literal144=null;
		ParserRuleReturnScope ident139 =null;
		ParserRuleReturnScope exportItem140 =null;
		ParserRuleReturnScope ident142 =null;
		ParserRuleReturnScope exportItem143 =null;

		Object string_literal138_tree=null;
		Object char_literal141_tree=null;
		Object char_literal144_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal138=(Token)match(input,EXPORTS,FOLLOW_EXPORTS_in_exportsSection3118); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal138_tree = (Object)adaptor.create(string_literal138);
			adaptor.addChild(root_0, string_literal138_tree);
			}

			pushFollow(FOLLOW_ident_in_exportsSection3120);
			ident139=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident139.getTree());

			pushFollow(FOLLOW_exportItem_in_exportsSection3122);
			exportItem140=exportItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem140.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:59: ( ',' ident exportItem )*
			loop38:
			while (true) {
				int alt38=2;
				int LA38_0 = input.LA(1);
				if ( (LA38_0==COMMA) ) {
					alt38=1;
				}

				switch (alt38) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:60: ',' ident exportItem
					{
					char_literal141=(Token)match(input,COMMA,FOLLOW_COMMA_in_exportsSection3125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal141_tree = (Object)adaptor.create(char_literal141);
					adaptor.addChild(root_0, char_literal141_tree);
					}

					pushFollow(FOLLOW_ident_in_exportsSection3127);
					ident142=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident142.getTree());

					pushFollow(FOLLOW_exportItem_in_exportsSection3129);
					exportItem143=exportItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem143.getTree());

					}
					break;

				default :
					break loop38;
				}
			}

			char_literal144=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportsSection3133); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal144_tree = (Object)adaptor.create(char_literal144);
			adaptor.addChild(root_0, char_literal144_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, exportsSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportsSection"


	public static class exportItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
	public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
		DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
		retval.start = input.LT(1);
		int exportItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal145=null;
		Token char_literal147=null;
		Token INDEX148=null;
		Token NAME150=null;
		Token string_literal152=null;
		ParserRuleReturnScope formalParameterList146 =null;
		ParserRuleReturnScope expression149 =null;
		ParserRuleReturnScope expression151 =null;

		Object char_literal145_tree=null;
		Object char_literal147_tree=null;
		Object INDEX148_tree=null;
		Object NAME150_tree=null;
		Object string_literal152_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==LPAREN) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: '(' ( formalParameterList )? ')'
					{
					char_literal145=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_exportItem3189); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal145_tree = (Object)adaptor.create(char_literal145);
					adaptor.addChild(root_0, char_literal145_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:37: ( formalParameterList )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==ADD||LA39_0==ANSISTRING||LA39_0==AT||LA39_0==BREAK||LA39_0==CONST||(LA39_0 >= CONTAINS && LA39_0 <= CONTINUE)||LA39_0==DEFAULT||LA39_0==EXIT||LA39_0==EXPORT||LA39_0==FINAL||LA39_0==IMPLEMENTS||LA39_0==INDEX||LA39_0==LBRACK||LA39_0==LOCAL||LA39_0==MESSAGE||LA39_0==NAME||LA39_0==OBJECT||LA39_0==OPERATOR||LA39_0==OUT||LA39_0==POINTER||(LA39_0 >= READ && LA39_0 <= READONLY)||(LA39_0 >= REFERENCE && LA39_0 <= REGISTER)||LA39_0==REMOVE||(LA39_0 >= STORED && LA39_0 <= STRING)||LA39_0==TkIdentifier||LA39_0==VAR||LA39_0==VARIANT||LA39_0==WRITE||LA39_0==200) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:38: formalParameterList
							{
							pushFollow(FOLLOW_formalParameterList_in_exportItem3192);
							formalParameterList146=formalParameterList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList146.getTree());

							}
							break;

					}

					char_literal147=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_exportItem3196); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal147_tree = (Object)adaptor.create(char_literal147);
					adaptor.addChild(root_0, char_literal147_tree);
					}

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:66: ( INDEX expression )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==INDEX) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:67: INDEX expression
					{
					INDEX148=(Token)match(input,INDEX,FOLLOW_INDEX_in_exportItem3201); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX148_tree = (Object)adaptor.create(INDEX148);
					adaptor.addChild(root_0, INDEX148_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3203);
					expression149=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression149.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:86: ( NAME expression )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==NAME) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:87: NAME expression
					{
					NAME150=(Token)match(input,NAME,FOLLOW_NAME_in_exportItem3208); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NAME150_tree = (Object)adaptor.create(NAME150);
					adaptor.addChild(root_0, NAME150_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3210);
					expression151=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression151.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:105: ( 'resident' )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==RESIDENT) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:106: 'resident'
					{
					string_literal152=(Token)match(input,RESIDENT,FOLLOW_RESIDENT_in_exportItem3215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal152_tree = (Object)adaptor.create(string_literal152);
					adaptor.addChild(root_0, string_literal152_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, exportItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportItem"


	public static class typeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType );
	public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
		DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
		retval.start = input.LT(1);
		int typeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal158=null;
		ParserRuleReturnScope strucType153 =null;
		ParserRuleReturnScope pointerType154 =null;
		ParserRuleReturnScope stringType155 =null;
		ParserRuleReturnScope procedureType156 =null;
		ParserRuleReturnScope variantType157 =null;
		ParserRuleReturnScope typeId159 =null;
		ParserRuleReturnScope genericPostfix160 =null;
		ParserRuleReturnScope simpleType161 =null;

		Object string_literal158_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:30: ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType )
			int alt46=7;
			alt46 = dfa46.predict(input);
			switch (alt46) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_strucType_in_typeDecl3277);
					strucType153=strucType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, strucType153.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pointerType_in_typeDecl3310);
					pointerType154=pointerType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointerType154.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringType_in_typeDecl3343);
					stringType155=stringType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringType155.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureType_in_typeDecl3376);
					procedureType156=procedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureType156.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantType_in_typeDecl3409);
					variantType157=variantType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantType157.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )?
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==TYPE) ) {
						alt44=1;
					}
					switch (alt44) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
							{
							string_literal158=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeDecl3443); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal158_tree = (Object)adaptor.create(string_literal158);
							adaptor.addChild(root_0, string_literal158_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_typeId_in_typeDecl3447);
					typeId159=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId159.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==LT) ) {
						int LA45_1 = input.LA(2);
						if ( (synpred67_Delphi()) ) {
							alt45=1;
						}
					}
					switch (alt45) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
							{
							pushFollow(FOLLOW_genericPostfix_in_typeDecl3450);
							genericPostfix160=genericPostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericPostfix160.getTree());

							}
							break;

					}

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: simpleType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleType_in_typeDecl3485);
					simpleType161=simpleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType161.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, typeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDecl"


	public static class strucType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
	public final DelphiParser.strucType_return strucType() throws RecognitionException {
		DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
		retval.start = input.LT(1);
		int strucType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal162=null;
		ParserRuleReturnScope strucTypePart163 =null;

		Object string_literal162_tree=null;
		RewriteRuleTokenStream stream_PACKED=new RewriteRuleTokenStream(adaptor,"token PACKED");
		RewriteRuleSubtreeStream stream_strucTypePart=new RewriteRuleSubtreeStream(adaptor,"rule strucTypePart");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )? strucTypePart
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==PACKED) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:33: 'packed'
					{
					string_literal162=(Token)match(input,PACKED,FOLLOW_PACKED_in_strucType3542); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PACKED.add(string_literal162);

					}
					break;

			}

			pushFollow(FOLLOW_strucTypePart_in_strucType3546);
			strucTypePart163=strucTypePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_strucTypePart.add(strucTypePart163.getTree());
			// AST REWRITE
			// elements: strucTypePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 188:58: -> strucTypePart
			{
				adaptor.addChild(root_0, stream_strucTypePart.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, strucType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucType"


	public static class strucTypePart_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucTypePart"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
	public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
		DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
		retval.start = input.LT(1);
		int strucTypePart_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope arrayType164 =null;
		ParserRuleReturnScope setType165 =null;
		ParserRuleReturnScope fileType166 =null;
		ParserRuleReturnScope classDecl167 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:30: ( arrayType | setType | fileType | classDecl )
			int alt48=4;
			switch ( input.LA(1) ) {
			case ARRAY:
				{
				alt48=1;
				}
				break;
			case SET:
				{
				alt48=2;
				}
				break;
			case FILE:
				{
				alt48=3;
				}
				break;
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case OBJECT:
			case RECORD:
				{
				alt48=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 48, 0, input);
				throw nvae;
			}
			switch (alt48) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: arrayType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_arrayType_in_strucTypePart3602);
					arrayType164=arrayType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayType164.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: setType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setType_in_strucTypePart3635);
					setType165=setType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setType165.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: fileType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fileType_in_strucTypePart3668);
					fileType166=fileType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fileType166.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: classDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classDecl_in_strucTypePart3701);
					classDecl167=classDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classDecl167.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, strucTypePart_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucTypePart"


	public static class arrayType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
	public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
		DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
		retval.start = input.LT(1);
		int arrayType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal168=null;
		Token char_literal169=null;
		Token char_literal171=null;
		Token char_literal173=null;
		Token string_literal174=null;
		ParserRuleReturnScope arrayIndex170 =null;
		ParserRuleReturnScope arrayIndex172 =null;
		ParserRuleReturnScope arraySubType175 =null;

		Object string_literal168_tree=null;
		Object char_literal169_tree=null;
		Object char_literal171_tree=null;
		Object char_literal173_tree=null;
		Object string_literal174_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_arraySubType=new RewriteRuleSubtreeStream(adaptor,"rule arraySubType");
		RewriteRuleSubtreeStream stream_arrayIndex=new RewriteRuleSubtreeStream(adaptor,"rule arrayIndex");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
			{
			string_literal168=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayType3759); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(string_literal168);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==LBRACK) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
					{
					char_literal169=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayType3762); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACK.add(char_literal169);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:46: ( arrayIndex )?
					int alt49=2;
					int LA49_0 = input.LA(1);
					if ( ((LA49_0 >= ADD && LA49_0 <= ANSISTRING)||LA49_0==AS||(LA49_0 >= AT && LA49_0 <= AT2)||LA49_0==BREAK||(LA49_0 >= CONTAINS && LA49_0 <= ControlString)||LA49_0==DEFAULT||LA49_0==DIV||(LA49_0 >= DOT && LA49_0 <= DOTDOT)||LA49_0==EQUAL||LA49_0==EXIT||LA49_0==EXPORT||LA49_0==FALSE||LA49_0==FINAL||(LA49_0 >= FUNCTION && LA49_0 <= GE)||LA49_0==GT||(LA49_0 >= IMPLEMENTS && LA49_0 <= INHERITED)||LA49_0==IS||LA49_0==LBRACK||LA49_0==LE||(LA49_0 >= LOCAL && LA49_0 <= NAME)||LA49_0==NIL||(LA49_0 >= NOT && LA49_0 <= OBJECT)||(LA49_0 >= OPERATOR && LA49_0 <= OUT)||(LA49_0 >= PLUS && LA49_0 <= POINTER2)||LA49_0==PROCEDURE||LA49_0==QuotedString||(LA49_0 >= READ && LA49_0 <= READONLY)||(LA49_0 >= REFERENCE && LA49_0 <= REGISTER)||LA49_0==REMOVE||(LA49_0 >= SHL && LA49_0 <= STAR)||(LA49_0 >= STORED && LA49_0 <= STRING)||LA49_0==TRUE||LA49_0==TkAsmHexNum||(LA49_0 >= TkHexNum && LA49_0 <= TkIntNum)||LA49_0==TkRealNum||LA49_0==VARIANT||LA49_0==WRITE||(LA49_0 >= XOR && LA49_0 <= 201)) ) {
						alt49=1;
					}
					switch (alt49) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:47: arrayIndex
							{
							pushFollow(FOLLOW_arrayIndex_in_arrayType3765);
							arrayIndex170=arrayIndex();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex170.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:60: ( ',' ( arrayIndex )? )*
					loop51:
					while (true) {
						int alt51=2;
						int LA51_0 = input.LA(1);
						if ( (LA51_0==COMMA) ) {
							alt51=1;
						}

						switch (alt51) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:61: ',' ( arrayIndex )?
							{
							char_literal171=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayType3770); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(char_literal171);

							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:65: ( arrayIndex )?
							int alt50=2;
							int LA50_0 = input.LA(1);
							if ( ((LA50_0 >= ADD && LA50_0 <= ANSISTRING)||LA50_0==AS||(LA50_0 >= AT && LA50_0 <= AT2)||LA50_0==BREAK||(LA50_0 >= CONTAINS && LA50_0 <= ControlString)||LA50_0==DEFAULT||LA50_0==DIV||(LA50_0 >= DOT && LA50_0 <= DOTDOT)||LA50_0==EQUAL||LA50_0==EXIT||LA50_0==EXPORT||LA50_0==FALSE||LA50_0==FINAL||(LA50_0 >= FUNCTION && LA50_0 <= GE)||LA50_0==GT||(LA50_0 >= IMPLEMENTS && LA50_0 <= INHERITED)||LA50_0==IS||LA50_0==LBRACK||LA50_0==LE||(LA50_0 >= LOCAL && LA50_0 <= NAME)||LA50_0==NIL||(LA50_0 >= NOT && LA50_0 <= OBJECT)||(LA50_0 >= OPERATOR && LA50_0 <= OUT)||(LA50_0 >= PLUS && LA50_0 <= POINTER2)||LA50_0==PROCEDURE||LA50_0==QuotedString||(LA50_0 >= READ && LA50_0 <= READONLY)||(LA50_0 >= REFERENCE && LA50_0 <= REGISTER)||LA50_0==REMOVE||(LA50_0 >= SHL && LA50_0 <= STAR)||(LA50_0 >= STORED && LA50_0 <= STRING)||LA50_0==TRUE||LA50_0==TkAsmHexNum||(LA50_0 >= TkHexNum && LA50_0 <= TkIntNum)||LA50_0==TkRealNum||LA50_0==VARIANT||LA50_0==WRITE||(LA50_0 >= XOR && LA50_0 <= 201)) ) {
								alt50=1;
							}
							switch (alt50) {
								case 1 :
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:66: arrayIndex
									{
									pushFollow(FOLLOW_arrayIndex_in_arrayType3773);
									arrayIndex172=arrayIndex();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex172.getTree());
									}
									break;

							}

							}
							break;

						default :
							break loop51;
						}
					}

					char_literal173=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayType3779); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACK.add(char_literal173);

					}
					break;

			}

			string_literal174=(Token)match(input,OF,FOLLOW_OF_in_arrayType3783); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal174);

			pushFollow(FOLLOW_arraySubType_in_arrayType3785);
			arraySubType175=arraySubType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arraySubType.add(arraySubType175.getTree());
			// AST REWRITE
			// elements: LBRACK, COMMA, arraySubType, arrayIndex, arrayIndex, ARRAY, RBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 197:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ARRAY.nextNode());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
				if ( stream_LBRACK.hasNext()||stream_COMMA.hasNext()||stream_arrayIndex.hasNext()||stream_RBRACK.hasNext() ) {
					adaptor.addChild(root_1, stream_LBRACK.nextNode());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:61: ( arrayIndex )?
					if ( stream_arrayIndex.hasNext() ) {
						adaptor.addChild(root_1, stream_arrayIndex.nextTree());
					}
					stream_arrayIndex.reset();

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:75: ( ',' ( arrayIndex )? )*
					while ( stream_COMMA.hasNext() ) {
						adaptor.addChild(root_1, stream_COMMA.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:80: ( arrayIndex )?
						if ( stream_arrayIndex.hasNext() ) {
							adaptor.addChild(root_1, stream_arrayIndex.nextTree());
						}
						stream_arrayIndex.reset();

					}
					stream_COMMA.reset();

					adaptor.addChild(root_1, stream_RBRACK.nextNode());
				}
				stream_LBRACK.reset();
				stream_COMMA.reset();
				stream_arrayIndex.reset();
				stream_RBRACK.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, arrayType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayType"


	public static class arrayIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayIndex"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:1: arrayIndex : ( typeId | expression '..' expression );
	public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
		DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
		retval.start = input.LT(1);
		int arrayIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal178=null;
		ParserRuleReturnScope typeId176 =null;
		ParserRuleReturnScope expression177 =null;
		ParserRuleReturnScope expression179 =null;

		Object string_literal178_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:30: ( typeId | expression '..' expression )
			int alt53=2;
			alt53 = dfa53.predict(input);
			switch (alt53) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: typeId
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_arrayIndex3911);
					typeId176=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId176.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:201:32: expression '..' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_arrayIndex3944);
					expression177=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression177.getTree());

					string_literal178=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_arrayIndex3946); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal178_tree = (Object)adaptor.create(string_literal178);
					adaptor.addChild(root_0, string_literal178_tree);
					}

					pushFollow(FOLLOW_expression_in_arrayIndex3948);
					expression179=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression179.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, arrayIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayIndex"


	public static class arraySubType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arraySubType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:1: arraySubType : ( 'const' | typeDecl );
	public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
		DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
		retval.start = input.LT(1);
		int arraySubType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal180=null;
		ParserRuleReturnScope typeDecl181 =null;

		Object string_literal180_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:30: ( 'const' | typeDecl )
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==CONST) ) {
				int LA54_1 = input.LA(2);
				if ( (synpred78_Delphi()) ) {
					alt54=1;
				}
				else if ( (true) ) {
					alt54=2;
				}

			}
			else if ( (LA54_0==EOF||LA54_0==ABSOLUTE||(LA54_0 >= ADD && LA54_0 <= ASSEMBLER)||(LA54_0 >= AT && LA54_0 <= AUTOMATED)||(LA54_0 >= BEGIN && LA54_0 <= COMMA)||(LA54_0 >= CONSTRUCTOR && LA54_0 <= ControlString)||(LA54_0 >= DEFAULT && LA54_0 <= DOWNTO)||(LA54_0 >= ELSE && LA54_0 <= FINALLY)||(LA54_0 >= FUNCTION && LA54_0 <= GE)||LA54_0==GT||(LA54_0 >= IMPLEMENTATION && LA54_0 <= LBRACK)||(LA54_0 >= LE && LA54_0 <= OVERLOAD)||(LA54_0 >= PACKED && LA54_0 <= PROCEDURE)||(LA54_0 >= PROPERTY && LA54_0 <= QuotedString)||LA54_0==RBRACK||(LA54_0 >= READ && LA54_0 <= REGISTER)||LA54_0==REMOVE||(LA54_0 >= RESIDENT && LA54_0 <= SAFECALL)||(LA54_0 >= SEMI && LA54_0 <= STAR)||(LA54_0 >= STDCALL && LA54_0 <= TRUE)||LA54_0==TYPE||LA54_0==TkAsmHexNum||(LA54_0 >= TkHexNum && LA54_0 <= TkIntNum)||LA54_0==TkRealNum||(LA54_0 >= UNSAFE && LA54_0 <= UNTIL)||(LA54_0 >= VAR && LA54_0 <= VARIANT)||(LA54_0 >= WRITE && LA54_0 <= WRITEONLY)||(LA54_0 >= XOR && LA54_0 <= 201)) ) {
				alt54=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 54, 0, input);
				throw nvae;
			}

			switch (alt54) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
					{
					root_0 = (Object)adaptor.nil();


					string_literal180=(Token)match(input,CONST,FOLLOW_CONST_in_arraySubType4002); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal180_tree = (Object)adaptor.create(string_literal180);
					adaptor.addChild(root_0, string_literal180_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:32: typeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeDecl_in_arraySubType4035);
					typeDecl181=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl181.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, arraySubType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arraySubType"


	public static class setType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
	public final DelphiParser.setType_return setType() throws RecognitionException {
		DelphiParser.setType_return retval = new DelphiParser.setType_return();
		retval.start = input.LT(1);
		int setType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal182=null;
		Token string_literal183=null;
		ParserRuleReturnScope typeDecl184 =null;

		Object string_literal182_tree=null;
		Object string_literal183_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:32: 'set' 'of' typeDecl
			{
			string_literal182=(Token)match(input,SET,FOLLOW_SET_in_setType4093); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(string_literal182);

			string_literal183=(Token)match(input,OF,FOLLOW_OF_in_setType4095); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal183);

			pushFollow(FOLLOW_typeDecl_in_setType4097);
			typeDecl184=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl184.getTree());
			// AST REWRITE
			// elements: typeDecl, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 207:52: -> 'set' typeDecl
			{
				adaptor.addChild(root_0, stream_SET.nextNode());
				adaptor.addChild(root_0, stream_typeDecl.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, setType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setType"


	public static class fileType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fileType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:1: fileType : 'file' ( 'of' typeDecl )? ;
	public final DelphiParser.fileType_return fileType() throws RecognitionException {
		DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
		retval.start = input.LT(1);
		int fileType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal185=null;
		Token string_literal186=null;
		ParserRuleReturnScope typeDecl187 =null;

		Object string_literal185_tree=null;
		Object string_literal186_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:30: ( 'file' ( 'of' typeDecl )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:32: 'file' ( 'of' typeDecl )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal185=(Token)match(input,FILE,FOLLOW_FILE_in_fileType4171); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal185_tree = (Object)adaptor.create(string_literal185);
			adaptor.addChild(root_0, string_literal185_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:39: ( 'of' typeDecl )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==OF) ) {
				int LA55_1 = input.LA(2);
				if ( (synpred79_Delphi()) ) {
					alt55=1;
				}
			}
			switch (alt55) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
					{
					string_literal186=(Token)match(input,OF,FOLLOW_OF_in_fileType4174); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal186_tree = (Object)adaptor.create(string_literal186);
					adaptor.addChild(root_0, string_literal186_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_fileType4176);
					typeDecl187=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl187.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, fileType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fileType"


	public static class pointerType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pointerType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:1: pointerType : ( '^' typeDecl | 'pointer' );
	public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
		DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
		retval.start = input.LT(1);
		int pointerType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal188=null;
		Token string_literal190=null;
		ParserRuleReturnScope typeDecl189 =null;

		Object char_literal188_tree=null;
		Object string_literal190_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:30: ( '^' typeDecl | 'pointer' )
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==POINTER2) ) {
				alt56=1;
			}
			else if ( (LA56_0==POINTER) ) {
				alt56=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}

			switch (alt56) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: '^' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					char_literal188=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_pointerType4232); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal188_tree = (Object)adaptor.create(char_literal188);
					adaptor.addChild(root_0, char_literal188_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_pointerType4234);
					typeDecl189=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl189.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: 'pointer'
					{
					root_0 = (Object)adaptor.nil();


					string_literal190=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointerType4267); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal190_tree = (Object)adaptor.create(string_literal190);
					adaptor.addChild(root_0, string_literal190_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, pointerType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointerType"


	public static class stringType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
	public final DelphiParser.stringType_return stringType() throws RecognitionException {
		DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
		retval.start = input.LT(1);
		int stringType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal191=null;
		Token char_literal192=null;
		Token char_literal194=null;
		Token string_literal195=null;
		Token ANSISTRING196=null;
		ParserRuleReturnScope expression193 =null;
		ParserRuleReturnScope codePageNumber197 =null;

		Object string_literal191_tree=null;
		Object char_literal192_tree=null;
		Object char_literal194_tree=null;
		Object string_literal195_tree=null;
		Object ANSISTRING196_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==STRING) ) {
				alt60=1;
			}
			else if ( (LA60_0==ANSISTRING||LA60_0==TYPE) ) {
				alt60=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 60, 0, input);
				throw nvae;
			}

			switch (alt60) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:32: 'string' ( '[' expression ']' )?
					{
					string_literal191=(Token)match(input,STRING,FOLLOW_STRING_in_stringType4322); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(string_literal191);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:41: ( '[' expression ']' )?
					int alt57=2;
					alt57 = dfa57.predict(input);
					switch (alt57) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
							{
							char_literal192=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_stringType4325); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal192);

							pushFollow(FOLLOW_expression_in_stringType4327);
							expression193=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression193.getTree());
							char_literal194=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_stringType4329); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal194);

							}
							break;

					}

					// AST REWRITE
					// elements: STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 215:63: -> 'string'
					{
						adaptor.addChild(root_0, stream_STRING.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )? ANSISTRING ( codePageNumber )?
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==TYPE) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:33: 'type'
							{
							string_literal195=(Token)match(input,TYPE,FOLLOW_TYPE_in_stringType4369); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal195_tree = (Object)adaptor.create(string_literal195);
							adaptor.addChild(root_0, string_literal195_tree);
							}

							}
							break;

					}

					ANSISTRING196=(Token)match(input,ANSISTRING,FOLLOW_ANSISTRING_in_stringType4373); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANSISTRING196_tree = (Object)adaptor.create(ANSISTRING196);
					adaptor.addChild(root_0, ANSISTRING196_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:53: ( codePageNumber )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==LPAREN) ) {
						int LA59_1 = input.LA(2);
						if ( (LA59_1==TkHexNum||LA59_1==TkIntNum) ) {
							int LA59_3 = input.LA(3);
							if ( (LA59_3==RPAREN) ) {
								int LA59_4 = input.LA(4);
								if ( (synpred84_Delphi()) ) {
									alt59=1;
								}
							}
						}
					}
					switch (alt59) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
							{
							pushFollow(FOLLOW_codePageNumber_in_stringType4376);
							codePageNumber197=codePageNumber();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, codePageNumber197.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, stringType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringType"


	public static class codePageNumber_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "codePageNumber"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:1: codePageNumber : '(' intNum ')' ;
	public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
		DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
		retval.start = input.LT(1);
		int codePageNumber_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal198=null;
		Token char_literal200=null;
		ParserRuleReturnScope intNum199 =null;

		Object char_literal198_tree=null;
		Object char_literal200_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:30: ( '(' intNum ')' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:32: '(' intNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal198=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_codePageNumber4429); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal198_tree = (Object)adaptor.create(char_literal198);
			adaptor.addChild(root_0, char_literal198_tree);
			}

			pushFollow(FOLLOW_intNum_in_codePageNumber4431);
			intNum199=intNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum199.getTree());

			char_literal200=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_codePageNumber4433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal200_tree = (Object)adaptor.create(char_literal200);
			adaptor.addChild(root_0, char_literal200_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, codePageNumber_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "codePageNumber"


	public static class procedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
	public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
		DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
		retval.start = input.LT(1);
		int procedureType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodType201 =null;
		ParserRuleReturnScope simpleProcedureType202 =null;
		ParserRuleReturnScope procedureReference203 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:30: ( methodType | simpleProcedureType | procedureReference )
			int alt61=3;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA61_1 = input.LA(2);
				if ( (synpred85_Delphi()) ) {
					alt61=1;
				}
				else if ( (synpred86_Delphi()) ) {
					alt61=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 61, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA61_2 = input.LA(2);
				if ( (synpred85_Delphi()) ) {
					alt61=1;
				}
				else if ( (synpred86_Delphi()) ) {
					alt61=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 61, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				alt61=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}
			switch (alt61) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodType_in_procedureType4485);
					methodType201=methodType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodType201.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleProcedureType_in_procedureType4518);
					simpleProcedureType202=simpleProcedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleProcedureType202.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:32: procedureReference
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureReference_in_procedureType4551);
					procedureReference203=procedureReference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureReference203.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, procedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureType"


	public static class methodType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:1: methodType : procedureTypeHeading 'of' 'object' ;
	public final DelphiParser.methodType_return methodType() throws RecognitionException {
		DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
		retval.start = input.LT(1);
		int methodType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal205=null;
		Token string_literal206=null;
		ParserRuleReturnScope procedureTypeHeading204 =null;

		Object string_literal205_tree=null;
		Object string_literal206_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:30: ( procedureTypeHeading 'of' 'object' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: procedureTypeHeading 'of' 'object'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_methodType4606);
			procedureTypeHeading204=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading204.getTree());

			string_literal205=(Token)match(input,OF,FOLLOW_OF_in_methodType4608); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal205_tree = (Object)adaptor.create(string_literal205);
			adaptor.addChild(root_0, string_literal205_tree);
			}

			string_literal206=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_methodType4610); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal206_tree = (Object)adaptor.create(string_literal206);
			adaptor.addChild(root_0, string_literal206_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, methodType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodType"


	public static class simpleProcedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleProcedureType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConventionNoSemi )? ;
	public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
		DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
		retval.start = input.LT(1);
		int simpleProcedureType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal208=null;
		ParserRuleReturnScope procedureTypeHeading207 =null;
		ParserRuleReturnScope callConventionNoSemi209 =null;

		Object char_literal208_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:30: ( procedureTypeHeading ( ( ';' )? callConventionNoSemi )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:32: procedureTypeHeading ( ( ';' )? callConventionNoSemi )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4656);
			procedureTypeHeading207=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading207.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:53: ( ( ';' )? callConventionNoSemi )?
			int alt63=2;
			switch ( input.LA(1) ) {
				case SEMI:
					{
					int LA63_1 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA63_2 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case CDECL:
					{
					int LA63_4 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case PASCAL:
					{
					int LA63_5 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case SAFECALL:
					{
					int LA63_6 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA63_7 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
				case STDCALL:
					{
					int LA63_8 = input.LA(2);
					if ( (synpred88_Delphi()) ) {
						alt63=1;
					}
					}
					break;
			}
			switch (alt63) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
					int alt62=2;
					int LA62_0 = input.LA(1);
					if ( (LA62_0==SEMI) ) {
						alt62=1;
					}
					switch (alt62) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
							{
							char_literal208=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleProcedureType4661); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal208_tree = (Object)adaptor.create(char_literal208);
							adaptor.addChild(root_0, char_literal208_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_callConventionNoSemi_in_simpleProcedureType4665);
					callConventionNoSemi209=callConventionNoSemi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi209.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, simpleProcedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleProcedureType"


	public static class procedureReference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureReference"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
	public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
		DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
		retval.start = input.LT(1);
		int procedureReference_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal210=null;
		Token string_literal211=null;
		ParserRuleReturnScope procedureTypeHeading212 =null;

		Object string_literal210_tree=null;
		Object string_literal211_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:30: ( 'reference' 'to' procedureTypeHeading )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: 'reference' 'to' procedureTypeHeading
			{
			root_0 = (Object)adaptor.nil();


			string_literal210=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_procedureReference4714); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal210_tree = (Object)adaptor.create(string_literal210);
			adaptor.addChild(root_0, string_literal210_tree);
			}

			string_literal211=(Token)match(input,TO,FOLLOW_TO_in_procedureReference4716); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal211_tree = (Object)adaptor.create(string_literal211);
			adaptor.addChild(root_0, string_literal211_tree);
			}

			pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4718);
			procedureTypeHeading212=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading212.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, procedureReference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureReference"


	public static class procedureTypeHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureTypeHeading"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
	public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
		DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
		retval.start = input.LT(1);
		int procedureTypeHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal213=null;
		Token char_literal215=null;
		Token string_literal218=null;
		ParserRuleReturnScope formalParameterSection214 =null;
		ParserRuleReturnScope customAttribute216 =null;
		ParserRuleReturnScope typeDecl217 =null;
		ParserRuleReturnScope formalParameterSection219 =null;

		Object string_literal213_tree=null;
		Object char_literal215_tree=null;
		Object string_literal218_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==FUNCTION) ) {
				alt67=1;
			}
			else if ( (LA67_0==PROCEDURE) ) {
				alt67=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
					{
					string_literal213=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedureTypeHeading4763); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal213);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:43: ( formalParameterSection )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==LPAREN) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4766);
							formalParameterSection214=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection214.getTree());
							}
							break;

					}

					char_literal215=(Token)match(input,COLON,FOLLOW_COLON_in_procedureTypeHeading4770); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal215);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:73: ( customAttribute )?
					int alt65=2;
					alt65 = dfa65.predict(input);
					switch (alt65) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4773);
							customAttribute216=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute216.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4777);
					typeDecl217=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl217.getTree());
					// AST REWRITE
					// elements: typeDecl, FUNCTION, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 230:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
					{
						adaptor.addChild(root_0, stream_FUNCTION.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:115: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:141: ^( TkFunctionReturn typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:32: 'procedure' ( formalParameterSection )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal218=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedureTypeHeading4825); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal218_tree = (Object)adaptor.create(string_literal218);
					adaptor.addChild(root_0, string_literal218_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:44: ( formalParameterSection )?
					int alt66=2;
					alt66 = dfa66.predict(input);
					switch (alt66) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4828);
							formalParameterSection219=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection219.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, procedureTypeHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureTypeHeading"


	public static class variantType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:1: variantType : 'variant' ;
	public final DelphiParser.variantType_return variantType() throws RecognitionException {
		DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
		retval.start = input.LT(1);
		int variantType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal220=null;

		Object string_literal220_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:30: ( 'variant' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: 'variant'
			{
			root_0 = (Object)adaptor.nil();


			string_literal220=(Token)match(input,VARIANT,FOLLOW_VARIANT_in_variantType4884); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal220_tree = (Object)adaptor.create(string_literal220);
			adaptor.addChild(root_0, string_literal220_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, variantType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantType"


	public static class simpleType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:1: simpleType : ( ident | subRangeType | enumType );
	public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
		DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
		retval.start = input.LT(1);
		int simpleType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident221 =null;
		ParserRuleReturnScope subRangeType222 =null;
		ParserRuleReturnScope enumType223 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:30: ( ident | subRangeType | enumType )
			int alt68=3;
			alt68 = dfa68.predict(input);
			switch (alt68) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_simpleType4940);
					ident221=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident221.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subRangeType_in_simpleType4973);
					subRangeType222=subRangeType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subRangeType222.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:237:32: enumType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enumType_in_simpleType5006);
					enumType223=enumType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumType223.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, simpleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleType"


	public static class subRangeType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subRangeType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:1: subRangeType : constExpression ( '..' constExpression )? ;
	public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
		DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
		retval.start = input.LT(1);
		int subRangeType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal225=null;
		ParserRuleReturnScope constExpression224 =null;
		ParserRuleReturnScope constExpression226 =null;

		Object string_literal225_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:30: ( constExpression ( '..' constExpression )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:32: constExpression ( '..' constExpression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_subRangeType5059);
			constExpression224=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression224.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:48: ( '..' constExpression )?
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==DOTDOT) ) {
				int LA69_1 = input.LA(2);
				if ( (synpred95_Delphi()) ) {
					alt69=1;
				}
			}
			switch (alt69) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
					{
					string_literal225=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_subRangeType5062); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal225_tree = (Object)adaptor.create(string_literal225);
					adaptor.addChild(root_0, string_literal225_tree);
					}

					pushFollow(FOLLOW_constExpression_in_subRangeType5064);
					constExpression226=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression226.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, subRangeType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subRangeType"


	public static class enumType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "enumType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
	public final DelphiParser.enumType_return enumType() throws RecognitionException {
		DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
		retval.start = input.LT(1);
		int enumType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal227=null;
		Token char_literal229=null;
		Token char_literal231=null;
		Token char_literal233=null;
		Token char_literal235=null;
		ParserRuleReturnScope ident228 =null;
		ParserRuleReturnScope expression230 =null;
		ParserRuleReturnScope ident232 =null;
		ParserRuleReturnScope expression234 =null;

		Object char_literal227_tree=null;
		Object char_literal229_tree=null;
		Object char_literal231_tree=null;
		Object char_literal233_tree=null;
		Object char_literal235_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal227=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumType5123); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal227_tree = (Object)adaptor.create(char_literal227);
			adaptor.addChild(root_0, char_literal227_tree);
			}

			pushFollow(FOLLOW_ident_in_enumType5125);
			ident228=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident228.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:42: ( '=' expression )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==EQUAL) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:43: '=' expression
					{
					char_literal229=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5128); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal229_tree = (Object)adaptor.create(char_literal229);
					adaptor.addChild(root_0, char_literal229_tree);
					}

					pushFollow(FOLLOW_expression_in_enumType5130);
					expression230=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression230.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:60: ( ',' ident ( '=' expression )? )*
			loop72:
			while (true) {
				int alt72=2;
				int LA72_0 = input.LA(1);
				if ( (LA72_0==COMMA) ) {
					alt72=1;
				}

				switch (alt72) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:61: ',' ident ( '=' expression )?
					{
					char_literal231=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumType5135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal231_tree = (Object)adaptor.create(char_literal231);
					adaptor.addChild(root_0, char_literal231_tree);
					}

					pushFollow(FOLLOW_ident_in_enumType5137);
					ident232=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident232.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:71: ( '=' expression )?
					int alt71=2;
					int LA71_0 = input.LA(1);
					if ( (LA71_0==EQUAL) ) {
						alt71=1;
					}
					switch (alt71) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:72: '=' expression
							{
							char_literal233=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5140); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal233_tree = (Object)adaptor.create(char_literal233);
							adaptor.addChild(root_0, char_literal233_tree);
							}

							pushFollow(FOLLOW_expression_in_enumType5142);
							expression234=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression234.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop72;
				}
			}

			char_literal235=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumType5149); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal235_tree = (Object)adaptor.create(char_literal235);
			adaptor.addChild(root_0, char_literal235_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, enumType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enumType"


	public static class typeId_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeId"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:1: typeId : namespacedQualifiedIdent ;
	public final DelphiParser.typeId_return typeId() throws RecognitionException {
		DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
		retval.start = input.LT(1);
		int typeId_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope namespacedQualifiedIdent236 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:30: ( namespacedQualifiedIdent )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: namespacedQualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_namespacedQualifiedIdent_in_typeId5208);
			namespacedQualifiedIdent236=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent236.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, typeId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeId"


	public static class genericTypeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericTypeIdent"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
	public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
		DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
		retval.start = input.LT(1);
		int genericTypeIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent237 =null;
		ParserRuleReturnScope genericDefinition238 =null;

		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:32: qualifiedIdent ( genericDefinition )?
			{
			pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5260);
			qualifiedIdent237=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent237.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:47: ( genericDefinition )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==LT) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:48: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5263);
					genericDefinition238=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition238.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qualifiedIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 248:68: -> qualifiedIdent
			{
				adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, genericTypeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericTypeIdent"


	public static class genericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericDefinition"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:1: genericDefinition : ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition );
	public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
		DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
		retval.start = input.LT(1);
		int genericDefinition_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleGenericDefinition239 =null;
		ParserRuleReturnScope complexGenericDefinition240 =null;
		ParserRuleReturnScope constrainedGenericDefinition241 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:30: ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition )
			int alt74=3;
			alt74 = dfa74.predict(input);
			switch (alt74) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: simpleGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleGenericDefinition_in_genericDefinition5321);
					simpleGenericDefinition239=simpleGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition239.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:32: complexGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_complexGenericDefinition_in_genericDefinition5354);
					complexGenericDefinition240=complexGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, complexGenericDefinition240.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: constrainedGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constrainedGenericDefinition_in_genericDefinition5387);
					constrainedGenericDefinition241=constrainedGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGenericDefinition241.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, genericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericDefinition"


	public static class simpleGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleGenericDefinition"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:1: simpleGenericDefinition : '<' ident ( ',' ident )* '>' ;
	public final DelphiParser.simpleGenericDefinition_return simpleGenericDefinition() throws RecognitionException {
		DelphiParser.simpleGenericDefinition_return retval = new DelphiParser.simpleGenericDefinition_return();
		retval.start = input.LT(1);
		int simpleGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal242=null;
		Token char_literal244=null;
		Token char_literal246=null;
		ParserRuleReturnScope ident243 =null;
		ParserRuleReturnScope ident245 =null;

		Object char_literal242_tree=null;
		Object char_literal244_tree=null;
		Object char_literal246_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:30: ( '<' ident ( ',' ident )* '>' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:32: '<' ident ( ',' ident )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal242=(Token)match(input,LT,FOLLOW_LT_in_simpleGenericDefinition5429); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal242_tree = (Object)adaptor.create(char_literal242);
			adaptor.addChild(root_0, char_literal242_tree);
			}

			pushFollow(FOLLOW_ident_in_simpleGenericDefinition5431);
			ident243=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident243.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:42: ( ',' ident )*
			loop75:
			while (true) {
				int alt75=2;
				int LA75_0 = input.LA(1);
				if ( (LA75_0==COMMA) ) {
					alt75=1;
				}

				switch (alt75) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:43: ',' ident
					{
					char_literal244=(Token)match(input,COMMA,FOLLOW_COMMA_in_simpleGenericDefinition5434); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal244_tree = (Object)adaptor.create(char_literal244);
					adaptor.addChild(root_0, char_literal244_tree);
					}

					pushFollow(FOLLOW_ident_in_simpleGenericDefinition5436);
					ident245=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident245.getTree());

					}
					break;

				default :
					break loop75;
				}
			}

			char_literal246=(Token)match(input,GT,FOLLOW_GT_in_simpleGenericDefinition5440); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal246_tree = (Object)adaptor.create(char_literal246);
			adaptor.addChild(root_0, char_literal246_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, simpleGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleGenericDefinition"


	public static class complexGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "complexGenericDefinition"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:1: complexGenericDefinition : '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>' ;
	public final DelphiParser.complexGenericDefinition_return complexGenericDefinition() throws RecognitionException {
		DelphiParser.complexGenericDefinition_return retval = new DelphiParser.complexGenericDefinition_return();
		retval.start = input.LT(1);
		int complexGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal247=null;
		Token char_literal250=null;
		Token char_literal253=null;
		ParserRuleReturnScope qualifiedIdent248 =null;
		ParserRuleReturnScope simpleGenericDefinition249 =null;
		ParserRuleReturnScope qualifiedIdent251 =null;
		ParserRuleReturnScope simpleGenericDefinition252 =null;

		Object char_literal247_tree=null;
		Object char_literal250_tree=null;
		Object char_literal253_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:30: ( '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:32: '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal247=(Token)match(input,LT,FOLLOW_LT_in_complexGenericDefinition5481); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal247_tree = (Object)adaptor.create(char_literal247);
			adaptor.addChild(root_0, char_literal247_tree);
			}

			pushFollow(FOLLOW_qualifiedIdent_in_complexGenericDefinition5483);
			qualifiedIdent248=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent248.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:51: ( simpleGenericDefinition )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==LT) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:52: simpleGenericDefinition
					{
					pushFollow(FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5486);
					simpleGenericDefinition249=simpleGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition249.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:78: ( ',' qualifiedIdent ( simpleGenericDefinition )? )*
			loop78:
			while (true) {
				int alt78=2;
				int LA78_0 = input.LA(1);
				if ( (LA78_0==COMMA) ) {
					alt78=1;
				}

				switch (alt78) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:79: ',' qualifiedIdent ( simpleGenericDefinition )?
					{
					char_literal250=(Token)match(input,COMMA,FOLLOW_COMMA_in_complexGenericDefinition5491); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal250_tree = (Object)adaptor.create(char_literal250);
					adaptor.addChild(root_0, char_literal250_tree);
					}

					pushFollow(FOLLOW_qualifiedIdent_in_complexGenericDefinition5493);
					qualifiedIdent251=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent251.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:98: ( simpleGenericDefinition )?
					int alt77=2;
					int LA77_0 = input.LA(1);
					if ( (LA77_0==LT) ) {
						alt77=1;
					}
					switch (alt77) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:99: simpleGenericDefinition
							{
							pushFollow(FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5496);
							simpleGenericDefinition252=simpleGenericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition252.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop78;
				}
			}

			char_literal253=(Token)match(input,GT,FOLLOW_GT_in_complexGenericDefinition5502); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal253_tree = (Object)adaptor.create(char_literal253);
			adaptor.addChild(root_0, char_literal253_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, complexGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "complexGenericDefinition"


	public static class constrainedGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constrainedGenericDefinition"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:1: constrainedGenericDefinition : '<' constrainedGeneric ( ';' constrainedGeneric )* '>' ;
	public final DelphiParser.constrainedGenericDefinition_return constrainedGenericDefinition() throws RecognitionException {
		DelphiParser.constrainedGenericDefinition_return retval = new DelphiParser.constrainedGenericDefinition_return();
		retval.start = input.LT(1);
		int constrainedGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal254=null;
		Token char_literal256=null;
		Token char_literal258=null;
		ParserRuleReturnScope constrainedGeneric255 =null;
		ParserRuleReturnScope constrainedGeneric257 =null;

		Object char_literal254_tree=null;
		Object char_literal256_tree=null;
		Object char_literal258_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:30: ( '<' constrainedGeneric ( ';' constrainedGeneric )* '>' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:32: '<' constrainedGeneric ( ';' constrainedGeneric )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal254=(Token)match(input,LT,FOLLOW_LT_in_constrainedGenericDefinition5539); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal254_tree = (Object)adaptor.create(char_literal254);
			adaptor.addChild(root_0, char_literal254_tree);
			}

			pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5541);
			constrainedGeneric255=constrainedGeneric();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGeneric255.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:55: ( ';' constrainedGeneric )*
			loop79:
			while (true) {
				int alt79=2;
				int LA79_0 = input.LA(1);
				if ( (LA79_0==SEMI) ) {
					alt79=1;
				}

				switch (alt79) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:56: ';' constrainedGeneric
					{
					char_literal256=(Token)match(input,SEMI,FOLLOW_SEMI_in_constrainedGenericDefinition5544); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal256_tree = (Object)adaptor.create(char_literal256);
					adaptor.addChild(root_0, char_literal256_tree);
					}

					pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5546);
					constrainedGeneric257=constrainedGeneric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGeneric257.getTree());

					}
					break;

				default :
					break loop79;
				}
			}

			char_literal258=(Token)match(input,GT,FOLLOW_GT_in_constrainedGenericDefinition5550); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal258_tree = (Object)adaptor.create(char_literal258);
			adaptor.addChild(root_0, char_literal258_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, constrainedGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constrainedGenericDefinition"


	public static class constrainedGeneric_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constrainedGeneric"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:1: constrainedGeneric : ident ( ':' genericConstraint ( ',' genericConstraint )* )? ;
	public final DelphiParser.constrainedGeneric_return constrainedGeneric() throws RecognitionException {
		DelphiParser.constrainedGeneric_return retval = new DelphiParser.constrainedGeneric_return();
		retval.start = input.LT(1);
		int constrainedGeneric_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal260=null;
		Token char_literal262=null;
		ParserRuleReturnScope ident259 =null;
		ParserRuleReturnScope genericConstraint261 =null;
		ParserRuleReturnScope genericConstraint263 =null;

		Object char_literal260_tree=null;
		Object char_literal262_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:30: ( ident ( ':' genericConstraint ( ',' genericConstraint )* )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:32: ident ( ':' genericConstraint ( ',' genericConstraint )* )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_constrainedGeneric5597);
			ident259=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident259.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:38: ( ':' genericConstraint ( ',' genericConstraint )* )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==COLON) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:39: ':' genericConstraint ( ',' genericConstraint )*
					{
					char_literal260=(Token)match(input,COLON,FOLLOW_COLON_in_constrainedGeneric5600); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal260_tree = (Object)adaptor.create(char_literal260);
					adaptor.addChild(root_0, char_literal260_tree);
					}

					pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5602);
					genericConstraint261=genericConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint261.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:61: ( ',' genericConstraint )*
					loop80:
					while (true) {
						int alt80=2;
						int LA80_0 = input.LA(1);
						if ( (LA80_0==COMMA) ) {
							alt80=1;
						}

						switch (alt80) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:62: ',' genericConstraint
							{
							char_literal262=(Token)match(input,COMMA,FOLLOW_COMMA_in_constrainedGeneric5605); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal262_tree = (Object)adaptor.create(char_literal262);
							adaptor.addChild(root_0, char_literal262_tree);
							}

							pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5607);
							genericConstraint263=genericConstraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint263.getTree());

							}
							break;

						default :
							break loop80;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, constrainedGeneric_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constrainedGeneric"


	public static class genericConstraint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericConstraint"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:1: genericConstraint : ( ident | 'record' | 'class' | 'constructor' );
	public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
		DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
		retval.start = input.LT(1);
		int genericConstraint_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal265=null;
		Token string_literal266=null;
		Token string_literal267=null;
		ParserRuleReturnScope ident264 =null;

		Object string_literal265_tree=null;
		Object string_literal266_tree=null;
		Object string_literal267_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:30: ( ident | 'record' | 'class' | 'constructor' )
			int alt82=4;
			switch ( input.LA(1) ) {
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 200:
				{
				alt82=1;
				}
				break;
			case RECORD:
				{
				alt82=2;
				}
				break;
			case CLASS:
				{
				alt82=3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt82=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_genericConstraint5659);
					ident264=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident264.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:32: 'record'
					{
					root_0 = (Object)adaptor.nil();


					string_literal265=(Token)match(input,RECORD,FOLLOW_RECORD_in_genericConstraint5692); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal265_tree = (Object)adaptor.create(string_literal265);
					adaptor.addChild(root_0, string_literal265_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:32: 'class'
					{
					root_0 = (Object)adaptor.nil();


					string_literal266=(Token)match(input,CLASS,FOLLOW_CLASS_in_genericConstraint5725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal266_tree = (Object)adaptor.create(string_literal266);
					adaptor.addChild(root_0, string_literal266_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:32: 'constructor'
					{
					root_0 = (Object)adaptor.nil();


					string_literal267=(Token)match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_genericConstraint5758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal267_tree = (Object)adaptor.create(string_literal267);
					adaptor.addChild(root_0, string_literal267_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, genericConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericConstraint"


	public static class genericPostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericPostfix"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
	public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
		DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
		retval.start = input.LT(1);
		int genericPostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal268=null;
		Token char_literal270=null;
		Token char_literal272=null;
		ParserRuleReturnScope typeDecl269 =null;
		ParserRuleReturnScope typeDecl271 =null;

		Object char_literal268_tree=null;
		Object char_literal270_tree=null;
		Object char_literal272_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: '<' typeDecl ( ',' typeDecl )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal268=(Token)match(input,LT,FOLLOW_LT_in_genericPostfix5809); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal268_tree = (Object)adaptor.create(char_literal268);
			adaptor.addChild(root_0, char_literal268_tree);
			}

			pushFollow(FOLLOW_typeDecl_in_genericPostfix5811);
			typeDecl269=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl269.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:45: ( ',' typeDecl )*
			loop83:
			while (true) {
				int alt83=2;
				int LA83_0 = input.LA(1);
				if ( (LA83_0==COMMA) ) {
					alt83=1;
				}

				switch (alt83) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:46: ',' typeDecl
					{
					char_literal270=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericPostfix5814); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal270_tree = (Object)adaptor.create(char_literal270);
					adaptor.addChild(root_0, char_literal270_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_genericPostfix5816);
					typeDecl271=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl271.getTree());

					}
					break;

				default :
					break loop83;
				}
			}

			char_literal272=(Token)match(input,GT,FOLLOW_GT_in_genericPostfix5820); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal272_tree = (Object)adaptor.create(char_literal272);
			adaptor.addChild(root_0, char_literal272_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, genericPostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericPostfix"


	public static class classDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
	public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
		DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
		retval.start = input.LT(1);
		int classDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope classTypeTypeDecl273 =null;
		ParserRuleReturnScope classTypeDecl274 =null;
		ParserRuleReturnScope classHelperDecl275 =null;
		ParserRuleReturnScope interfaceTypeDecl276 =null;
		ParserRuleReturnScope objectDecl277 =null;
		ParserRuleReturnScope recordDecl278 =null;
		ParserRuleReturnScope recordHelperDecl279 =null;

		RewriteRuleSubtreeStream stream_interfaceTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeDecl");
		RewriteRuleSubtreeStream stream_recordHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordHelperDecl");
		RewriteRuleSubtreeStream stream_objectDecl=new RewriteRuleSubtreeStream(adaptor,"rule objectDecl");
		RewriteRuleSubtreeStream stream_classHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule classHelperDecl");
		RewriteRuleSubtreeStream stream_recordDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordDecl");
		RewriteRuleSubtreeStream stream_classTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule classTypeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:30: ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
			int alt84=7;
			switch ( input.LA(1) ) {
			case CLASS:
				{
				switch ( input.LA(2) ) {
				case OF:
					{
					switch ( input.LA(3) ) {
					case OBJECT:
						{
						int LA84_10 = input.LA(4);
						if ( (synpred113_Delphi()) ) {
							alt84=1;
						}
						else if ( (synpred114_Delphi()) ) {
							alt84=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TkIdentifier:
						{
						int LA84_11 = input.LA(4);
						if ( (synpred113_Delphi()) ) {
							alt84=1;
						}
						else if ( (synpred114_Delphi()) ) {
							alt84=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case 200:
						{
						int LA84_12 = input.LA(4);
						if ( (LA84_12==TkIdentifier) ) {
							int LA84_15 = input.LA(5);
							if ( (synpred113_Delphi()) ) {
								alt84=1;
							}
							else if ( (synpred114_Delphi()) ) {
								alt84=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 84, 15, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 12, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STORED:
					case STRICT:
					case STRING:
					case VARIANT:
					case WRITE:
						{
						int LA84_13 = input.LA(4);
						if ( (synpred113_Delphi()) ) {
							alt84=1;
						}
						else if ( (synpred114_Delphi()) ) {
							alt84=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 13, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AND:
					case AS:
					case AT2:
					case COLON:
					case COMMA:
					case ControlString:
					case DIV:
					case DOT:
					case DOTDOT:
					case ELSE:
					case END:
					case EQUAL:
					case FALSE:
					case FUNCTION:
					case GE:
					case GT:
					case IN:
					case INHERITED:
					case IS:
					case LBRACK:
					case LE:
					case LPAREN:
					case LT:
					case MINUS:
					case MOD:
					case NIL:
					case NOT:
					case NOT_EQUAL:
					case OR:
					case PLUS:
					case POINTER2:
					case PROCEDURE:
					case QuotedString:
					case SEMI:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case TRUE:
					case TkAsmHexNum:
					case TkHexNum:
					case TkIntNum:
					case TkRealNum:
					case XOR:
					case 201:
						{
						alt84=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 84, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case HELPER:
					{
					alt84=3;
					}
					break;
				case EOF:
				case ABSOLUTE:
				case ABSTRACT:
				case ADD:
				case AND:
				case ANSISTRING:
				case AS:
				case ASM:
				case ASSEMBLER:
				case AT:
				case AT2:
				case AUTOMATED:
				case BEGIN:
				case BREAK:
				case CASE:
				case CDECL:
				case CLASS:
				case COLON:
				case COMMA:
				case CONST:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case ControlString:
				case DEFAULT:
				case DEPRECATED:
				case DESTRUCTOR:
				case DISPID:
				case DIV:
				case DO:
				case DOT:
				case DOTDOT:
				case DOWNTO:
				case ELSE:
				case END:
				case EQUAL:
				case EXCEPT:
				case EXIT:
				case EXPERIMENTAL:
				case EXPORT:
				case EXPORTS:
				case EXTERNAL:
				case FALSE:
				case FAR:
				case FINAL:
				case FINALIZATION:
				case FINALLY:
				case FUNCTION:
				case GE:
				case GT:
				case IMPLEMENTATION:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case INHERITED:
				case INITIALIZATION:
				case INLINE:
				case IS:
				case LABEL:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case MINUS:
				case MOD:
				case NAME:
				case NEAR:
				case NIL:
				case NODEFAULT:
				case NOT:
				case NOT_EQUAL:
				case OBJECT:
				case ON:
				case OPERATOR:
				case OR:
				case OUT:
				case OVERLOAD:
				case PASCAL:
				case PLATFORM:
				case PLUS:
				case POINTER:
				case POINTER2:
				case PRIVATE:
				case PROCEDURE:
				case PROPERTY:
				case PROTECTED:
				case PUBLIC:
				case PUBLISHED:
				case QuotedString:
				case RBRACK:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case RESIDENT:
				case RESOURCESTRING:
				case RPAREN:
				case SAFECALL:
				case SEALED:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case STDCALL:
				case STORED:
				case STRICT:
				case STRING:
				case THEN:
				case THREADVAR:
				case TO:
				case TRUE:
				case TYPE:
				case TkAsmHexNum:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case TkRealNum:
				case UNSAFE:
				case UNTIL:
				case VAR:
				case VARARGS:
				case VARIANT:
				case WRITE:
				case WRITEONLY:
				case XOR:
				case 200:
				case 201:
					{
					alt84=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 84, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				alt84=4;
				}
				break;
			case OBJECT:
				{
				alt84=5;
				}
				break;
			case RECORD:
				{
				int LA84_4 = input.LA(2);
				if ( (LA84_4==HELPER) ) {
					alt84=7;
				}
				else if ( (LA84_4==ADD||LA84_4==ANSISTRING||LA84_4==AT||LA84_4==AUTOMATED||(LA84_4 >= BREAK && LA84_4 <= CASE)||LA84_4==CLASS||(LA84_4 >= CONST && LA84_4 <= CONTINUE)||LA84_4==DEFAULT||LA84_4==DESTRUCTOR||LA84_4==END||LA84_4==EXIT||LA84_4==EXPORT||LA84_4==FINAL||LA84_4==FUNCTION||LA84_4==IMPLEMENTS||LA84_4==INDEX||LA84_4==LBRACK||LA84_4==LOCAL||LA84_4==MESSAGE||LA84_4==NAME||LA84_4==OBJECT||LA84_4==OPERATOR||LA84_4==OUT||LA84_4==POINTER||(LA84_4 >= PRIVATE && LA84_4 <= PROCEDURE)||(LA84_4 >= PROPERTY && LA84_4 <= PUBLISHED)||(LA84_4 >= READ && LA84_4 <= READONLY)||(LA84_4 >= REFERENCE && LA84_4 <= REGISTER)||LA84_4==REMOVE||LA84_4==RESOURCESTRING||(LA84_4 >= STORED && LA84_4 <= STRING)||LA84_4==THREADVAR||LA84_4==TYPE||LA84_4==TkIdentifier||LA84_4==VAR||LA84_4==VARIANT||LA84_4==WRITE||LA84_4==200) ) {
					alt84=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 84, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 84, 0, input);
				throw nvae;
			}
			switch (alt84) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: classTypeTypeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5879);
					classTypeTypeDecl273=classTypeTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeTypeDecl273.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:32: classTypeDecl
					{
					pushFollow(FOLLOW_classTypeDecl_in_classDecl5912);
					classTypeDecl274=classTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classTypeDecl.add(classTypeDecl274.getTree());
					// AST REWRITE
					// elements: classTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 273:46: -> ^( TkClass classTypeDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:49: ^( TkClass classTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: classHelperDecl
					{
					pushFollow(FOLLOW_classHelperDecl_in_classDecl5953);
					classHelperDecl275=classHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperDecl.add(classHelperDecl275.getTree());
					// AST REWRITE
					// elements: classHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 274:48: -> ^( TkClass classHelperDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:51: ^( TkClass classHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: interfaceTypeDecl
					{
					pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl5994);
					interfaceTypeDecl276=interfaceTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceTypeDecl.add(interfaceTypeDecl276.getTree());
					// AST REWRITE
					// elements: interfaceTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 275:50: -> ^( TkInterface interfaceTypeDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:53: ^( TkInterface interfaceTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkInterface, "TkInterface"), root_1);
						adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: objectDecl
					{
					pushFollow(FOLLOW_objectDecl_in_classDecl6035);
					objectDecl277=objectDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectDecl.add(objectDecl277.getTree());
					// AST REWRITE
					// elements: objectDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 276:43: -> ^( TkObject objectDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:46: ^( TkObject objectDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkObject, "TkObject"), root_1);
						adaptor.addChild(root_1, stream_objectDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: recordDecl
					{
					pushFollow(FOLLOW_recordDecl_in_classDecl6076);
					recordDecl278=recordDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordDecl.add(recordDecl278.getTree());
					// AST REWRITE
					// elements: recordDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 277:43: -> ^( TkRecord recordDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:46: ^( TkRecord recordDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecord, "TkRecord"), root_1);
						adaptor.addChild(root_1, stream_recordDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: recordHelperDecl
					{
					pushFollow(FOLLOW_recordHelperDecl_in_classDecl6117);
					recordHelperDecl279=recordHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordHelperDecl.add(recordHelperDecl279.getTree());
					// AST REWRITE
					// elements: recordHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 278:49: -> ^( TkRecordHelper recordHelperDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:52: ^( TkRecordHelper recordHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
						adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, classDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classDecl"


	public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeTypeDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
	public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
		DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal280=null;
		Token string_literal281=null;
		ParserRuleReturnScope typeId282 =null;

		Object string_literal280_tree=null;
		Object string_literal281_tree=null;
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:32: 'class' 'of' typeId
			{
			string_literal280=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeTypeDecl6173); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal280);

			string_literal281=(Token)match(input,OF,FOLLOW_OF_in_classTypeTypeDecl6175); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal281);

			pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6177);
			typeId282=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId282.getTree());
			// AST REWRITE
			// elements: typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 280:52: -> ^( TkClassOfType typeId )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:55: ^( TkClassOfType typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, classTypeTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeTypeDecl"


	public static class classTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
		DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal283=null;
		Token string_literal287=null;
		Token string_literal288=null;
		ParserRuleReturnScope classState284 =null;
		ParserRuleReturnScope classParent285 =null;
		ParserRuleReturnScope classItem286 =null;
		ParserRuleReturnScope classParent289 =null;

		Object string_literal283_tree=null;
		Object string_literal287_tree=null;
		Object string_literal288_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classState=new RewriteRuleSubtreeStream(adaptor,"rule classState");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_classItem=new RewriteRuleSubtreeStream(adaptor,"rule classItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==CLASS) ) {
				int LA89_1 = input.LA(2);
				if ( (synpred122_Delphi()) ) {
					alt89=1;
				}
				else if ( (true) ) {
					alt89=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				throw nvae;
			}

			switch (alt89) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
					{
					string_literal283=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6237); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal283);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:40: ( classState )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==ABSTRACT||LA85_0==SEALED) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6240);
							classState284=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState284.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:54: ( classParent )?
					int alt86=2;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==LPAREN) ) {
						alt86=1;
					}
					switch (alt86) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6245);
							classParent285=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent285.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:69: ( classItem )*
					loop87:
					while (true) {
						int alt87=2;
						int LA87_0 = input.LA(1);
						if ( (LA87_0==ADD||LA87_0==ANSISTRING||LA87_0==AT||LA87_0==AUTOMATED||LA87_0==BREAK||LA87_0==CLASS||(LA87_0 >= CONST && LA87_0 <= CONTINUE)||LA87_0==DEFAULT||LA87_0==DESTRUCTOR||LA87_0==EXIT||LA87_0==EXPORT||LA87_0==FINAL||LA87_0==FUNCTION||LA87_0==IMPLEMENTS||LA87_0==INDEX||LA87_0==LBRACK||LA87_0==LOCAL||LA87_0==MESSAGE||LA87_0==NAME||LA87_0==OBJECT||LA87_0==OPERATOR||LA87_0==OUT||LA87_0==POINTER||(LA87_0 >= PRIVATE && LA87_0 <= PROCEDURE)||(LA87_0 >= PROPERTY && LA87_0 <= PUBLISHED)||(LA87_0 >= READ && LA87_0 <= READONLY)||(LA87_0 >= REFERENCE && LA87_0 <= REGISTER)||LA87_0==REMOVE||LA87_0==RESOURCESTRING||(LA87_0 >= STORED && LA87_0 <= STRING)||LA87_0==THREADVAR||LA87_0==TYPE||LA87_0==TkIdentifier||LA87_0==VAR||LA87_0==VARIANT||LA87_0==WRITE||LA87_0==200) ) {
							alt87=1;
						}

						switch (alt87) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:70: classItem
							{
							pushFollow(FOLLOW_classItem_in_classTypeDecl6250);
							classItem286=classItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classItem.add(classItem286.getTree());
							}
							break;

						default :
							break loop87;
						}
					}

					string_literal287=(Token)match(input,END,FOLLOW_END_in_classTypeDecl6254); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal287);

					// AST REWRITE
					// elements: CLASS, classItem, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 282:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:99: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:116: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:132: ( classItem )*
						while ( stream_classItem.hasNext() ) {
							adaptor.addChild(root_0, stream_classItem.nextTree());
						}
						stream_classItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:32: 'class' ( classParent )?
					{
					string_literal288=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6305); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal288);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:40: ( classParent )?
					int alt88=2;
					alt88 = dfa88.predict(input);
					switch (alt88) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:41: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6308);
							classParent289=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent289.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: CLASS, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 283:55: -> 'class' ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:66: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:83: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, classTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeDecl"


	public static class classState_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classState"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:1: classState : ( 'sealed' | 'abstract' );
	public final DelphiParser.classState_return classState() throws RecognitionException {
		DelphiParser.classState_return retval = new DelphiParser.classState_return();
		retval.start = input.LT(1);
		int classState_StartIndex = input.index();

		Object root_0 = null;

		Token set290=null;

		Object set290_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:30: ( 'sealed' | 'abstract' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set290=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==SEALED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set290));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, classState_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classState"


	public static class classParent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classParent"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
	public final DelphiParser.classParent_return classParent() throws RecognitionException {
		DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
		retval.start = input.LT(1);
		int classParent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal291=null;
		Token char_literal293=null;
		Token char_literal295=null;
		ParserRuleReturnScope genericTypeIdent292 =null;
		ParserRuleReturnScope genericTypeIdent294 =null;

		Object char_literal291_tree=null;
		Object char_literal293_tree=null;
		Object char_literal295_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
			{
			char_literal291=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classParent6465); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal291);

			pushFollow(FOLLOW_genericTypeIdent_in_classParent6467);
			genericTypeIdent292=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent292.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:53: ( ',' genericTypeIdent )*
			loop90:
			while (true) {
				int alt90=2;
				int LA90_0 = input.LA(1);
				if ( (LA90_0==COMMA) ) {
					alt90=1;
				}

				switch (alt90) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:54: ',' genericTypeIdent
					{
					char_literal293=(Token)match(input,COMMA,FOLLOW_COMMA_in_classParent6470); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal293);

					pushFollow(FOLLOW_genericTypeIdent_in_classParent6472);
					genericTypeIdent294=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent294.getTree());
					}
					break;

				default :
					break loop90;
				}
			}

			char_literal295=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classParent6476); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal295);

			// AST REWRITE
			// elements: genericTypeIdent, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 288:81: -> genericTypeIdent ( genericTypeIdent )*
			{
				adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:101: ( genericTypeIdent )*
				while ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, classParent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classParent"


	public static class classItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:1: classItem : ( visibility | classMethod | classField | classProperty | ( 'public' | 'private' | 'protected' )? constSection | ( 'public' | 'private' | 'protected' )? typeSection | ( 'class' )? varSection );
	public final DelphiParser.classItem_return classItem() throws RecognitionException {
		DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
		retval.start = input.LT(1);
		int classItem_StartIndex = input.index();

		Object root_0 = null;

		Token set300=null;
		Token set302=null;
		Token string_literal304=null;
		ParserRuleReturnScope visibility296 =null;
		ParserRuleReturnScope classMethod297 =null;
		ParserRuleReturnScope classField298 =null;
		ParserRuleReturnScope classProperty299 =null;
		ParserRuleReturnScope constSection301 =null;
		ParserRuleReturnScope typeSection303 =null;
		ParserRuleReturnScope varSection305 =null;

		Object set300_tree=null;
		Object set302_tree=null;
		Object string_literal304_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:30: ( visibility | classMethod | classField | classProperty | ( 'public' | 'private' | 'protected' )? constSection | ( 'public' | 'private' | 'protected' )? typeSection | ( 'class' )? varSection )
			int alt94=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA94_1 = input.LA(2);
				if ( (synpred126_Delphi()) ) {
					alt94=1;
				}
				else if ( (synpred128_Delphi()) ) {
					alt94=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				int LA94_2 = input.LA(2);
				if ( (synpred126_Delphi()) ) {
					alt94=1;
				}
				else if ( (synpred133_Delphi()) ) {
					alt94=5;
				}
				else if ( (synpred137_Delphi()) ) {
					alt94=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PRIVATE:
				{
				int LA94_3 = input.LA(2);
				if ( (synpred126_Delphi()) ) {
					alt94=1;
				}
				else if ( (synpred133_Delphi()) ) {
					alt94=5;
				}
				else if ( (synpred137_Delphi()) ) {
					alt94=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PUBLIC:
				{
				int LA94_4 = input.LA(2);
				if ( (synpred126_Delphi()) ) {
					alt94=1;
				}
				else if ( (synpred133_Delphi()) ) {
					alt94=5;
				}
				else if ( (synpred137_Delphi()) ) {
					alt94=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PUBLISHED:
				{
				alt94=1;
				}
				break;
			case LBRACK:
				{
				int LA94_7 = input.LA(2);
				if ( (synpred127_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred128_Delphi()) ) {
					alt94=3;
				}
				else if ( (synpred129_Delphi()) ) {
					alt94=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA94_8 = input.LA(2);
				if ( (synpred127_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred129_Delphi()) ) {
					alt94=4;
				}
				else if ( (true) ) {
					alt94=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt94=2;
				}
				break;
			case OPERATOR:
				{
				int LA94_11 = input.LA(2);
				if ( (synpred127_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred128_Delphi()) ) {
					alt94=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 200:
				{
				alt94=3;
				}
				break;
			case PROPERTY:
				{
				alt94=4;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt94=5;
				}
				break;
			case TYPE:
				{
				alt94=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt94=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 94, 0, input);
				throw nvae;
			}
			switch (alt94) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classItem6544);
					visibility296=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility296.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:291:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classItem6577);
					classMethod297=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod297.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_classItem6610);
					classField298=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField298.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classItem6643);
					classProperty299=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty299.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( 'public' | 'private' | 'protected' )? constSection
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( 'public' | 'private' | 'protected' )?
					int alt91=2;
					int LA91_0 = input.LA(1);
					if ( (LA91_0==PRIVATE||(LA91_0 >= PROTECTED && LA91_0 <= PUBLIC)) ) {
						alt91=1;
					}
					switch (alt91) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
							{
							set300=input.LT(1);
							if ( input.LA(1)==PRIVATE||(input.LA(1) >= PROTECTED && input.LA(1) <= PUBLIC) ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set300));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_constSection_in_classItem6685);
					constSection301=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection301.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( 'public' | 'private' | 'protected' )? typeSection
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( 'public' | 'private' | 'protected' )?
					int alt92=2;
					int LA92_0 = input.LA(1);
					if ( (LA92_0==PRIVATE||(LA92_0 >= PROTECTED && LA92_0 <= PUBLIC)) ) {
						alt92=1;
					}
					switch (alt92) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
							{
							set302=input.LT(1);
							if ( input.LA(1)==PRIVATE||(input.LA(1) >= PROTECTED && input.LA(1) <= PUBLIC) ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set302));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_typeSection_in_classItem6727);
					typeSection303=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection303.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: ( 'class' )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==CLASS) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:33: 'class'
							{
							string_literal304=(Token)match(input,CLASS,FOLLOW_CLASS_in_classItem6761); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal304_tree = (Object)adaptor.create(string_literal304);
							adaptor.addChild(root_0, string_literal304_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classItem6765);
					varSection305=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection305.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, classItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classItem"


	public static class classHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
	public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
		DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
		retval.start = input.LT(1);
		int classHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal306=null;
		Token string_literal307=null;
		Token string_literal309=null;
		Token string_literal312=null;
		ParserRuleReturnScope classParent308 =null;
		ParserRuleReturnScope typeId310 =null;
		ParserRuleReturnScope classHelperItem311 =null;

		Object string_literal306_tree=null;
		Object string_literal307_tree=null;
		Object string_literal309_tree=null;
		Object string_literal312_tree=null;
		RewriteRuleTokenStream stream_HELPER=new RewriteRuleTokenStream(adaptor,"token HELPER");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classHelperItem=new RewriteRuleSubtreeStream(adaptor,"rule classHelperItem");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
			{
			string_literal306=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperDecl6815); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal306);

			string_literal307=(Token)match(input,HELPER,FOLLOW_HELPER_in_classHelperDecl6817); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HELPER.add(string_literal307);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:49: ( classParent )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==LPAREN) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:50: classParent
					{
					pushFollow(FOLLOW_classParent_in_classHelperDecl6820);
					classParent308=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent308.getTree());
					}
					break;

			}

			string_literal309=(Token)match(input,FOR,FOLLOW_FOR_in_classHelperDecl6824); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(string_literal309);

			pushFollow(FOLLOW_typeId_in_classHelperDecl6826);
			typeId310=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId310.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:77: ( classHelperItem )*
			loop96:
			while (true) {
				int alt96=2;
				int LA96_0 = input.LA(1);
				if ( (LA96_0==AUTOMATED||LA96_0==CLASS||LA96_0==CONSTRUCTOR||LA96_0==DESTRUCTOR||LA96_0==FUNCTION||LA96_0==LBRACK||LA96_0==OPERATOR||(LA96_0 >= PRIVATE && LA96_0 <= PROCEDURE)||(LA96_0 >= PROPERTY && LA96_0 <= PUBLISHED)||LA96_0==STRICT||LA96_0==THREADVAR||LA96_0==VAR) ) {
					alt96=1;
				}

				switch (alt96) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:78: classHelperItem
					{
					pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6829);
					classHelperItem311=classHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperItem.add(classHelperItem311.getTree());
					}
					break;

				default :
					break loop96;
				}
			}

			string_literal312=(Token)match(input,END,FOLLOW_END_in_classHelperDecl6833); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal312);

			// AST REWRITE
			// elements: CLASS, typeId, classHelperItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 298:102: -> ^( 'class' typeId ) ( classHelperItem )*
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:105: ^( 'class' typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:124: ( classHelperItem )*
				while ( stream_classHelperItem.hasNext() ) {
					adaptor.addChild(root_0, stream_classHelperItem.nextTree());
				}
				stream_classHelperItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, classHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperDecl"


	public static class classHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:1: classHelperItem : ( visibility | classMethod | classProperty | ( 'class' )? varSection );
	public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
		DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
		retval.start = input.LT(1);
		int classHelperItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal316=null;
		ParserRuleReturnScope visibility313 =null;
		ParserRuleReturnScope classMethod314 =null;
		ParserRuleReturnScope classProperty315 =null;
		ParserRuleReturnScope varSection317 =null;

		Object string_literal316_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:30: ( visibility | classMethod | classProperty | ( 'class' )? varSection )
			int alt98=4;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt98=1;
				}
				break;
			case LBRACK:
				{
				int LA98_7 = input.LA(2);
				if ( (synpred142_Delphi()) ) {
					alt98=2;
				}
				else if ( (synpred143_Delphi()) ) {
					alt98=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 98, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA98_8 = input.LA(2);
				if ( (synpred142_Delphi()) ) {
					alt98=2;
				}
				else if ( (synpred143_Delphi()) ) {
					alt98=3;
				}
				else if ( (true) ) {
					alt98=4;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt98=2;
				}
				break;
			case PROPERTY:
				{
				alt98=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt98=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}
			switch (alt98) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classHelperItem6898);
					visibility313=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility313.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classHelperItem6931);
					classMethod314=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod314.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classHelperItem6964);
					classProperty315=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty315.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: ( 'class' )?
					int alt97=2;
					int LA97_0 = input.LA(1);
					if ( (LA97_0==CLASS) ) {
						alt97=1;
					}
					switch (alt97) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:33: 'class'
							{
							string_literal316=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperItem6998); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal316_tree = (Object)adaptor.create(string_literal316);
							adaptor.addChild(root_0, string_literal316_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classHelperItem7002);
					varSection317=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection317.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, classHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperItem"


	public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceTypeDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
		DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
		retval.start = input.LT(1);
		int interfaceTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal322=null;
		ParserRuleReturnScope interfaceKey318 =null;
		ParserRuleReturnScope classParent319 =null;
		ParserRuleReturnScope interfaceGuid320 =null;
		ParserRuleReturnScope interfaceItem321 =null;
		ParserRuleReturnScope interfaceKey323 =null;
		ParserRuleReturnScope classParent324 =null;

		Object string_literal322_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_interfaceItem=new RewriteRuleSubtreeStream(adaptor,"rule interfaceItem");
		RewriteRuleSubtreeStream stream_interfaceKey=new RewriteRuleSubtreeStream(adaptor,"rule interfaceKey");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_interfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGuid");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==DISPINTERFACE||LA103_0==INTERFACE) ) {
				int LA103_1 = input.LA(2);
				if ( (synpred148_Delphi()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}

			switch (alt103) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7050);
					interfaceKey318=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey318.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:45: ( classParent )?
					int alt99=2;
					int LA99_0 = input.LA(1);
					if ( (LA99_0==LPAREN) ) {
						alt99=1;
					}
					switch (alt99) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7053);
							classParent319=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent319.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:60: ( interfaceGuid )?
					int alt100=2;
					int LA100_0 = input.LA(1);
					if ( (LA100_0==LBRACK) ) {
						int LA100_1 = input.LA(2);
						if ( (LA100_1==QuotedString) ) {
							alt100=1;
						}
					}
					switch (alt100) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:61: interfaceGuid
							{
							pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl7058);
							interfaceGuid320=interfaceGuid();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceGuid.add(interfaceGuid320.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:77: ( interfaceItem )*
					loop101:
					while (true) {
						int alt101=2;
						int LA101_0 = input.LA(1);
						if ( (LA101_0==CLASS||LA101_0==CONSTRUCTOR||LA101_0==DESTRUCTOR||LA101_0==FUNCTION||LA101_0==LBRACK||LA101_0==OPERATOR||LA101_0==PROCEDURE||LA101_0==PROPERTY) ) {
							alt101=1;
						}

						switch (alt101) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:78: interfaceItem
							{
							pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl7063);
							interfaceItem321=interfaceItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceItem.add(interfaceItem321.getTree());
							}
							break;

						default :
							break loop101;
						}
					}

					string_literal322=(Token)match(input,END,FOLLOW_END_in_interfaceTypeDecl7067); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal322);

					// AST REWRITE
					// elements: interfaceKey, interfaceItem, classParent, interfaceGuid
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 306:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:81: ^( TkGuid ( interfaceGuid )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkGuid, "TkGuid"), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:90: ( interfaceGuid )?
						if ( stream_interfaceGuid.hasNext() ) {
							adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
						}
						stream_interfaceGuid.reset();

						adaptor.addChild(root_0, root_1);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:108: ( interfaceItem )*
						while ( stream_interfaceItem.hasNext() ) {
							adaptor.addChild(root_0, stream_interfaceItem.nextTree());
						}
						stream_interfaceItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: interfaceKey ( classParent )?
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7158);
					interfaceKey323=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey323.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:45: ( classParent )?
					int alt102=2;
					alt102 = dfa102.predict(input);
					switch (alt102) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7161);
							classParent324=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent324.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: classParent, interfaceKey
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 308:31: -> interfaceKey ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, interfaceTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceTypeDecl"


	public static class interfaceKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceKey"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:1: interfaceKey : ( 'interface' | 'dispinterface' );
	public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
		DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
		retval.start = input.LT(1);
		int interfaceKey_StartIndex = input.index();

		Object root_0 = null;

		Token set325=null;

		Object set325_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:30: ( 'interface' | 'dispinterface' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set325=input.LT(1);
			if ( input.LA(1)==DISPINTERFACE||input.LA(1)==INTERFACE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set325));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, interfaceKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceKey"


	public static class interfaceGuid_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceGuid"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
	public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
		DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
		retval.start = input.LT(1);
		int interfaceGuid_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal326=null;
		Token QuotedString327=null;
		Token char_literal328=null;

		Object char_literal326_tree=null;
		Object QuotedString327_tree=null;
		Object char_literal328_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:30: ( '[' QuotedString ']' -> QuotedString )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:32: '[' QuotedString ']'
			{
			char_literal326=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_interfaceGuid7344); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal326);

			QuotedString327=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_interfaceGuid7346); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString327);

			char_literal328=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_interfaceGuid7348); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal328);

			// AST REWRITE
			// elements: QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 313:53: -> QuotedString
			{
				adaptor.addChild(root_0, stream_QuotedString.nextNode());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, interfaceGuid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceGuid"


	public static class interfaceItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
	public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
		DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
		retval.start = input.LT(1);
		int interfaceItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal330=null;
		ParserRuleReturnScope classMethod329 =null;
		ParserRuleReturnScope classProperty331 =null;

		Object string_literal330_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:30: ( classMethod | ( 'class' )? classProperty )
			int alt105=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA105_1 = input.LA(2);
				if ( (synpred151_Delphi()) ) {
					alt105=1;
				}
				else if ( (true) ) {
					alt105=2;
				}

				}
				break;
			case CLASS:
				{
				int LA105_2 = input.LA(2);
				if ( (synpred151_Delphi()) ) {
					alt105=1;
				}
				else if ( (true) ) {
					alt105=2;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt105=1;
				}
				break;
			case PROPERTY:
				{
				alt105=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}
			switch (alt105) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_interfaceItem7404);
					classMethod329=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod329.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:32: ( 'class' )? classProperty
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:32: ( 'class' )?
					int alt104=2;
					int LA104_0 = input.LA(1);
					if ( (LA104_0==CLASS) ) {
						int LA104_1 = input.LA(2);
						if ( (synpred152_Delphi()) ) {
							alt104=1;
						}
					}
					switch (alt104) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:33: 'class'
							{
							string_literal330=(Token)match(input,CLASS,FOLLOW_CLASS_in_interfaceItem7438); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal330_tree = (Object)adaptor.create(string_literal330);
							adaptor.addChild(root_0, string_literal330_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_classProperty_in_interfaceItem7442);
					classProperty331=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty331.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, interfaceItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceItem"


	public static class objectDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
	public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
		DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
		retval.start = input.LT(1);
		int objectDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal332=null;
		Token string_literal335=null;
		ParserRuleReturnScope classParent333 =null;
		ParserRuleReturnScope objectItem334 =null;

		Object string_literal332_tree=null;
		Object string_literal335_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleSubtreeStream stream_objectItem=new RewriteRuleSubtreeStream(adaptor,"rule objectItem");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: 'object' ( classParent )? ( objectItem )* 'end'
			{
			string_literal332=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectDecl7497); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(string_literal332);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:41: ( classParent )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==LPAREN) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:42: classParent
					{
					pushFollow(FOLLOW_classParent_in_objectDecl7500);
					classParent333=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent333.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:56: ( objectItem )*
			loop107:
			while (true) {
				int alt107=2;
				int LA107_0 = input.LA(1);
				if ( (LA107_0==ADD||LA107_0==ANSISTRING||LA107_0==AT||LA107_0==AUTOMATED||LA107_0==BREAK||LA107_0==CLASS||(LA107_0 >= CONSTRUCTOR && LA107_0 <= CONTINUE)||LA107_0==DEFAULT||LA107_0==DESTRUCTOR||LA107_0==EXIT||LA107_0==EXPORT||LA107_0==FINAL||LA107_0==FUNCTION||LA107_0==IMPLEMENTS||LA107_0==INDEX||LA107_0==LBRACK||LA107_0==LOCAL||LA107_0==MESSAGE||LA107_0==NAME||LA107_0==OBJECT||LA107_0==OPERATOR||LA107_0==OUT||LA107_0==POINTER||(LA107_0 >= PRIVATE && LA107_0 <= PROCEDURE)||(LA107_0 >= PROTECTED && LA107_0 <= PUBLISHED)||(LA107_0 >= READ && LA107_0 <= READONLY)||(LA107_0 >= REFERENCE && LA107_0 <= REGISTER)||LA107_0==REMOVE||(LA107_0 >= STORED && LA107_0 <= STRING)||LA107_0==TkIdentifier||LA107_0==VARIANT||LA107_0==WRITE||LA107_0==200) ) {
					alt107=1;
				}

				switch (alt107) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:57: objectItem
					{
					pushFollow(FOLLOW_objectItem_in_objectDecl7505);
					objectItem334=objectItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectItem.add(objectItem334.getTree());
					}
					break;

				default :
					break loop107;
				}
			}

			string_literal335=(Token)match(input,END,FOLLOW_END_in_objectDecl7509); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal335);

			// AST REWRITE
			// elements: OBJECT, objectItem, classParent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 318:76: -> 'object' ( classParent )? ( objectItem )*
			{
				adaptor.addChild(root_0, stream_OBJECT.nextNode());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:88: ( classParent )?
				if ( stream_classParent.hasNext() ) {
					adaptor.addChild(root_0, stream_classParent.nextTree());
				}
				stream_classParent.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:103: ( objectItem )*
				while ( stream_objectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_objectItem.nextTree());
				}
				stream_objectItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, objectDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectDecl"


	public static class objectItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:1: objectItem : ( visibility | classMethod | classField );
	public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
		DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
		retval.start = input.LT(1);
		int objectItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility336 =null;
		ParserRuleReturnScope classMethod337 =null;
		ParserRuleReturnScope classField338 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:30: ( visibility | classMethod | classField )
			int alt108=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA108_1 = input.LA(2);
				if ( (synpred155_Delphi()) ) {
					alt108=1;
				}
				else if ( (true) ) {
					alt108=3;
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt108=1;
				}
				break;
			case LBRACK:
				{
				int LA108_7 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt108=2;
				}
				else if ( (true) ) {
					alt108=3;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt108=2;
				}
				break;
			case OPERATOR:
				{
				int LA108_11 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt108=2;
				}
				else if ( (true) ) {
					alt108=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 200:
				{
				alt108=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				throw nvae;
			}
			switch (alt108) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_objectItem7578);
					visibility336=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility336.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_objectItem7611);
					classMethod337=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod337.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_objectItem7644);
					classField338=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField338.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, objectItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectItem"


	public static class recordDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:1: recordDecl : ( simpleRecord | variantRecord );
	public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
		DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
		retval.start = input.LT(1);
		int recordDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleRecord339 =null;
		ParserRuleReturnScope variantRecord340 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:30: ( simpleRecord | variantRecord )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==RECORD) ) {
				int LA109_1 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt109=1;
				}
				else if ( (true) ) {
					alt109=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: simpleRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleRecord_in_recordDecl7699);
					simpleRecord339=simpleRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRecord339.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: variantRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantRecord_in_recordDecl7732);
					variantRecord340=variantRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantRecord340.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, recordDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordDecl"


	public static class simpleRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleRecord"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
	public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
		DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
		retval.start = input.LT(1);
		int simpleRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal341=null;
		Token string_literal344=null;
		ParserRuleReturnScope recordField342 =null;
		ParserRuleReturnScope recordItem343 =null;

		Object string_literal341_tree=null;
		Object string_literal344_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: 'record' ( recordField )* ( recordItem )* 'end'
			{
			string_literal341=(Token)match(input,RECORD,FOLLOW_RECORD_in_simpleRecord7785); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal341);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:41: ( recordField )*
			loop110:
			while (true) {
				int alt110=2;
				alt110 = dfa110.predict(input);
				switch (alt110) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_simpleRecord7788);
					recordField342=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField342.getTree());
					}
					break;

				default :
					break loop110;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:56: ( recordItem )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==ADD||LA111_0==ANSISTRING||LA111_0==AT||LA111_0==AUTOMATED||LA111_0==BREAK||LA111_0==CLASS||(LA111_0 >= CONST && LA111_0 <= CONTINUE)||LA111_0==DEFAULT||LA111_0==DESTRUCTOR||LA111_0==EXIT||LA111_0==EXPORT||LA111_0==FINAL||LA111_0==FUNCTION||LA111_0==IMPLEMENTS||LA111_0==INDEX||LA111_0==LBRACK||LA111_0==LOCAL||LA111_0==MESSAGE||LA111_0==NAME||LA111_0==OBJECT||LA111_0==OPERATOR||LA111_0==OUT||LA111_0==POINTER||(LA111_0 >= PRIVATE && LA111_0 <= PROCEDURE)||(LA111_0 >= PROPERTY && LA111_0 <= PUBLISHED)||(LA111_0 >= READ && LA111_0 <= READONLY)||(LA111_0 >= REFERENCE && LA111_0 <= REGISTER)||LA111_0==REMOVE||LA111_0==RESOURCESTRING||(LA111_0 >= STORED && LA111_0 <= STRING)||LA111_0==THREADVAR||LA111_0==TYPE||LA111_0==TkIdentifier||LA111_0==VAR||LA111_0==VARIANT||LA111_0==WRITE||LA111_0==200) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_simpleRecord7793);
					recordItem343=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem343.getTree());
					}
					break;

				default :
					break loop111;
				}
			}

			string_literal344=(Token)match(input,END,FOLLOW_END_in_simpleRecord7797); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal344);

			// AST REWRITE
			// elements: recordField, recordItem, RECORD
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 327:76: -> 'record' ( recordField )* ( recordItem )*
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:88: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:103: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, simpleRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleRecord"


	public static class variantRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantRecord"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:1: variantRecord : 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection ;
	public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
		DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
		retval.start = input.LT(1);
		int variantRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal345=null;
		Token string_literal348=null;
		ParserRuleReturnScope recordField346 =null;
		ParserRuleReturnScope recordVariantSection347 =null;

		Object string_literal345_tree=null;
		Object string_literal348_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordVariantSection=new RewriteRuleSubtreeStream(adaptor,"rule recordVariantSection");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:30: ( 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: 'record' ( recordField )* recordVariantSection 'end'
			{
			string_literal345=(Token)match(input,RECORD,FOLLOW_RECORD_in_variantRecord7863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal345);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:41: ( recordField )*
			loop112:
			while (true) {
				int alt112=2;
				int LA112_0 = input.LA(1);
				if ( (LA112_0==ADD||LA112_0==ANSISTRING||LA112_0==AT||LA112_0==BREAK||(LA112_0 >= CONTAINS && LA112_0 <= CONTINUE)||LA112_0==DEFAULT||LA112_0==EXIT||LA112_0==EXPORT||LA112_0==FINAL||LA112_0==IMPLEMENTS||LA112_0==INDEX||LA112_0==LOCAL||LA112_0==MESSAGE||LA112_0==NAME||LA112_0==OBJECT||LA112_0==OPERATOR||LA112_0==OUT||LA112_0==POINTER||(LA112_0 >= READ && LA112_0 <= READONLY)||(LA112_0 >= REFERENCE && LA112_0 <= REGISTER)||LA112_0==REMOVE||(LA112_0 >= STORED && LA112_0 <= STRING)||LA112_0==TkIdentifier||LA112_0==VARIANT||LA112_0==WRITE||LA112_0==200) ) {
					alt112=1;
				}

				switch (alt112) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_variantRecord7866);
					recordField346=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField346.getTree());
					}
					break;

				default :
					break loop112;
				}
			}

			pushFollow(FOLLOW_recordVariantSection_in_variantRecord7870);
			recordVariantSection347=recordVariantSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_recordVariantSection.add(recordVariantSection347.getTree());
			string_literal348=(Token)match(input,END,FOLLOW_END_in_variantRecord7872); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal348);

			// AST REWRITE
			// elements: recordField, RECORD, recordVariantSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 329:83: -> 'record' ( recordField )* recordVariantSection
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:95: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, variantRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantRecord"


	public static class recordItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:1: recordItem : ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection );
	public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
		DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
		retval.start = input.LT(1);
		int recordItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal355=null;
		ParserRuleReturnScope visibility349 =null;
		ParserRuleReturnScope classMethod350 =null;
		ParserRuleReturnScope classProperty351 =null;
		ParserRuleReturnScope constSection352 =null;
		ParserRuleReturnScope typeSection353 =null;
		ParserRuleReturnScope recordField354 =null;
		ParserRuleReturnScope varSection356 =null;

		Object string_literal355_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:30: ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection )
			int alt114=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA114_1 = input.LA(2);
				if ( (synpred161_Delphi()) ) {
					alt114=1;
				}
				else if ( (synpred166_Delphi()) ) {
					alt114=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 114, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt114=1;
				}
				break;
			case LBRACK:
				{
				int LA114_7 = input.LA(2);
				if ( (synpred162_Delphi()) ) {
					alt114=2;
				}
				else if ( (synpred163_Delphi()) ) {
					alt114=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 114, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA114_8 = input.LA(2);
				if ( (synpred162_Delphi()) ) {
					alt114=2;
				}
				else if ( (synpred163_Delphi()) ) {
					alt114=3;
				}
				else if ( (true) ) {
					alt114=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt114=2;
				}
				break;
			case OPERATOR:
				{
				int LA114_11 = input.LA(2);
				if ( (synpred162_Delphi()) ) {
					alt114=2;
				}
				else if ( (synpred166_Delphi()) ) {
					alt114=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 114, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROPERTY:
				{
				alt114=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt114=4;
				}
				break;
			case TYPE:
				{
				alt114=5;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 200:
				{
				alt114=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt114=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}
			switch (alt114) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordItem7938);
					visibility349=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility349.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordItem7976);
					classMethod350=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod350.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordItem8009);
					classProperty351=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty351.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordItem8042);
					constSection352=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection352.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_recordItem8075);
					typeSection353=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection353.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: recordField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_recordField_in_recordItem8108);
					recordField354=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField354.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: ( 'class' )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==CLASS) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:33: 'class'
							{
							string_literal355=(Token)match(input,CLASS,FOLLOW_CLASS_in_recordItem8142); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal355_tree = (Object)adaptor.create(string_literal355);
							adaptor.addChild(root_0, string_literal355_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_recordItem8146);
					varSection356=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection356.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, recordItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordItem"


	public static class recordField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordField"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordField_return recordField() throws RecognitionException {
		DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
		retval.start = input.LT(1);
		int recordField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal358=null;
		Token char_literal361=null;
		ParserRuleReturnScope identList357 =null;
		ParserRuleReturnScope typeDecl359 =null;
		ParserRuleReturnScope hintingDirective360 =null;

		Object char_literal358_tree=null;
		Object char_literal361_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordField8200);
			identList357=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList357.getTree());
			char_literal358=(Token)match(input,COLON,FOLLOW_COLON_in_recordField8202); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal358);

			pushFollow(FOLLOW_typeDecl_in_recordField8204);
			typeDecl359=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl359.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:55: ( hintingDirective )*
			loop115:
			while (true) {
				int alt115=2;
				int LA115_0 = input.LA(1);
				if ( (LA115_0==DEPRECATED||LA115_0==EXPERIMENTAL||LA115_0==LIBRARY||LA115_0==PLATFORM) ) {
					alt115=1;
				}

				switch (alt115) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordField8207);
					hintingDirective360=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective360.getTree());
					}
					break;

				default :
					break loop115;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:75: ( ';' )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==SEMI) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:76: ';'
					{
					char_literal361=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordField8212); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal361);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 340:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, recordField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordField"


	public static class recordVariantField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantField"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:1: recordVariantField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordVariantField_return recordVariantField() throws RecognitionException {
		DelphiParser.recordVariantField_return retval = new DelphiParser.recordVariantField_return();
		retval.start = input.LT(1);
		int recordVariantField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal363=null;
		Token char_literal366=null;
		ParserRuleReturnScope identList362 =null;
		ParserRuleReturnScope typeDecl364 =null;
		ParserRuleReturnScope hintingDirective365 =null;

		Object char_literal363_tree=null;
		Object char_literal366_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordVariantField8302);
			identList362=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList362.getTree());
			char_literal363=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantField8304); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal363);

			pushFollow(FOLLOW_typeDecl_in_recordVariantField8306);
			typeDecl364=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl364.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:55: ( hintingDirective )*
			loop117:
			while (true) {
				int alt117=2;
				int LA117_0 = input.LA(1);
				if ( (LA117_0==DEPRECATED||LA117_0==EXPERIMENTAL||LA117_0==LIBRARY||LA117_0==PLATFORM) ) {
					alt117=1;
				}

				switch (alt117) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordVariantField8309);
					hintingDirective365=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective365.getTree());
					}
					break;

				default :
					break loop117;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:75: ( ';' )?
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==SEMI) ) {
				alt118=1;
			}
			switch (alt118) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:76: ';'
					{
					char_literal366=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantField8314); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal366);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 343:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, recordVariantField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantField"


	public static class recordVariantSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:1: recordVariantSection : 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* ;
	public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
		DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
		retval.start = input.LT(1);
		int recordVariantSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal367=null;
		Token char_literal369=null;
		Token string_literal371=null;
		Token char_literal373=null;
		Token char_literal375=null;
		ParserRuleReturnScope ident368 =null;
		ParserRuleReturnScope typeDecl370 =null;
		ParserRuleReturnScope recordVariant372 =null;
		ParserRuleReturnScope recordVariant374 =null;

		Object string_literal367_tree=null;
		Object char_literal369_tree=null;
		Object string_literal371_tree=null;
		Object char_literal373_tree=null;
		Object char_literal375_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:30: ( 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:32: 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )*
			{
			root_0 = (Object)adaptor.nil();


			string_literal367=(Token)match(input,CASE,FOLLOW_CASE_in_recordVariantSection8401); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal367_tree = (Object)adaptor.create(string_literal367);
			adaptor.addChild(root_0, string_literal367_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:39: ( ident ':' )?
			int alt119=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA119_1 = input.LA(2);
					if ( (LA119_1==COLON) ) {
						alt119=1;
					}
					}
					break;
				case 200:
					{
					int LA119_2 = input.LA(2);
					if ( (LA119_2==TkIdentifier) ) {
						int LA119_12 = input.LA(3);
						if ( (LA119_12==COLON) ) {
							alt119=1;
						}
					}
					}
					break;
				case OBJECT:
					{
					int LA119_3 = input.LA(2);
					if ( (LA119_3==COLON) ) {
						alt119=1;
					}
					}
					break;
				case POINTER:
					{
					int LA119_5 = input.LA(2);
					if ( (LA119_5==COLON) ) {
						alt119=1;
					}
					}
					break;
				case STRING:
					{
					int LA119_6 = input.LA(2);
					if ( (LA119_6==COLON) ) {
						alt119=1;
					}
					}
					break;
				case ANSISTRING:
					{
					int LA119_7 = input.LA(2);
					if ( (LA119_7==COLON) ) {
						alt119=1;
					}
					}
					break;
				case REFERENCE:
					{
					int LA119_8 = input.LA(2);
					if ( (LA119_8==COLON) ) {
						alt119=1;
					}
					}
					break;
				case VARIANT:
					{
					int LA119_9 = input.LA(2);
					if ( (LA119_9==COLON) ) {
						alt119=1;
					}
					}
					break;
				case ADD:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OPERATOR:
				case OUT:
				case READ:
				case READONLY:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case WRITE:
					{
					int LA119_10 = input.LA(2);
					if ( (LA119_10==COLON) ) {
						alt119=1;
					}
					}
					break;
			}
			switch (alt119) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:40: ident ':'
					{
					pushFollow(FOLLOW_ident_in_recordVariantSection8404);
					ident368=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident368.getTree());

					char_literal369=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantSection8406); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal369_tree = (Object)adaptor.create(char_literal369);
					adaptor.addChild(root_0, char_literal369_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_typeDecl_in_recordVariantSection8410);
			typeDecl370=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl370.getTree());

			string_literal371=(Token)match(input,OF,FOLLOW_OF_in_recordVariantSection8412); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal371_tree = (Object)adaptor.create(string_literal371);
			adaptor.addChild(root_0, string_literal371_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:66: ( recordVariant | ';' )
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( ((LA120_0 >= ADD && LA120_0 <= ANSISTRING)||LA120_0==AS||(LA120_0 >= AT && LA120_0 <= AT2)||LA120_0==BREAK||(LA120_0 >= COLON && LA120_0 <= COMMA)||(LA120_0 >= CONTAINS && LA120_0 <= ControlString)||LA120_0==DEFAULT||LA120_0==DIV||LA120_0==DOT||LA120_0==EQUAL||LA120_0==EXIT||LA120_0==EXPORT||LA120_0==FALSE||LA120_0==FINAL||(LA120_0 >= FUNCTION && LA120_0 <= GE)||LA120_0==GT||(LA120_0 >= IMPLEMENTS && LA120_0 <= INHERITED)||LA120_0==IS||LA120_0==LBRACK||LA120_0==LE||(LA120_0 >= LOCAL && LA120_0 <= NAME)||LA120_0==NIL||(LA120_0 >= NOT && LA120_0 <= OBJECT)||(LA120_0 >= OPERATOR && LA120_0 <= OUT)||(LA120_0 >= PLUS && LA120_0 <= POINTER2)||LA120_0==PROCEDURE||LA120_0==QuotedString||(LA120_0 >= READ && LA120_0 <= READONLY)||(LA120_0 >= REFERENCE && LA120_0 <= REGISTER)||LA120_0==REMOVE||(LA120_0 >= SHL && LA120_0 <= STAR)||(LA120_0 >= STORED && LA120_0 <= STRING)||LA120_0==TRUE||LA120_0==TkAsmHexNum||(LA120_0 >= TkHexNum && LA120_0 <= TkIntNum)||LA120_0==TkRealNum||LA120_0==VARIANT||LA120_0==WRITE||(LA120_0 >= XOR && LA120_0 <= 201)) ) {
				alt120=1;
			}
			else if ( (LA120_0==SEMI) ) {
				alt120=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 120, 0, input);
				throw nvae;
			}

			switch (alt120) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:67: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8415);
					recordVariant372=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant372.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:83: ';'
					{
					char_literal373=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8419); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal373_tree = (Object)adaptor.create(char_literal373);
					adaptor.addChild(root_0, char_literal373_tree);
					}

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:88: ( recordVariant | ';' )*
			loop121:
			while (true) {
				int alt121=3;
				int LA121_0 = input.LA(1);
				if ( ((LA121_0 >= ADD && LA121_0 <= ANSISTRING)||LA121_0==AS||(LA121_0 >= AT && LA121_0 <= AT2)||LA121_0==BREAK||(LA121_0 >= COLON && LA121_0 <= COMMA)||(LA121_0 >= CONTAINS && LA121_0 <= ControlString)||LA121_0==DEFAULT||LA121_0==DIV||LA121_0==DOT||LA121_0==EQUAL||LA121_0==EXIT||LA121_0==EXPORT||LA121_0==FALSE||LA121_0==FINAL||(LA121_0 >= FUNCTION && LA121_0 <= GE)||LA121_0==GT||(LA121_0 >= IMPLEMENTS && LA121_0 <= INHERITED)||LA121_0==IS||LA121_0==LBRACK||LA121_0==LE||(LA121_0 >= LOCAL && LA121_0 <= NAME)||LA121_0==NIL||(LA121_0 >= NOT && LA121_0 <= OBJECT)||(LA121_0 >= OPERATOR && LA121_0 <= OUT)||(LA121_0 >= PLUS && LA121_0 <= POINTER2)||LA121_0==PROCEDURE||LA121_0==QuotedString||(LA121_0 >= READ && LA121_0 <= READONLY)||(LA121_0 >= REFERENCE && LA121_0 <= REGISTER)||LA121_0==REMOVE||(LA121_0 >= SHL && LA121_0 <= STAR)||(LA121_0 >= STORED && LA121_0 <= STRING)||LA121_0==TRUE||LA121_0==TkAsmHexNum||(LA121_0 >= TkHexNum && LA121_0 <= TkIntNum)||LA121_0==TkRealNum||LA121_0==VARIANT||LA121_0==WRITE||(LA121_0 >= XOR && LA121_0 <= 201)) ) {
					alt121=1;
				}
				else if ( (LA121_0==SEMI) ) {
					alt121=2;
				}

				switch (alt121) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:89: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8423);
					recordVariant374=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant374.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:105: ';'
					{
					char_literal375=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8427); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal375_tree = (Object)adaptor.create(char_literal375);
					adaptor.addChild(root_0, char_literal375_tree);
					}

					}
					break;

				default :
					break loop121;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, recordVariantSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantSection"


	public static class recordVariant_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariant"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:1: recordVariant : constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' ;
	public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
		DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
		retval.start = input.LT(1);
		int recordVariant_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal377=null;
		Token char_literal379=null;
		Token char_literal380=null;
		Token char_literal382=null;
		ParserRuleReturnScope constExpression376 =null;
		ParserRuleReturnScope constExpression378 =null;
		ParserRuleReturnScope recordVariantField381 =null;

		Object char_literal377_tree=null;
		Object char_literal379_tree=null;
		Object char_literal380_tree=null;
		Object char_literal382_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:30: ( constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:32: constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_recordVariant8481);
			constExpression376=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression376.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:48: ( ',' constExpression )*
			loop122:
			while (true) {
				int alt122=2;
				int LA122_0 = input.LA(1);
				if ( (LA122_0==COMMA) ) {
					alt122=1;
				}

				switch (alt122) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:49: ',' constExpression
					{
					char_literal377=(Token)match(input,COMMA,FOLLOW_COMMA_in_recordVariant8484); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal377_tree = (Object)adaptor.create(char_literal377);
					adaptor.addChild(root_0, char_literal377_tree);
					}

					pushFollow(FOLLOW_constExpression_in_recordVariant8486);
					constExpression378=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression378.getTree());

					}
					break;

				default :
					break loop122;
				}
			}

			char_literal379=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariant8490); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal379_tree = (Object)adaptor.create(char_literal379);
			adaptor.addChild(root_0, char_literal379_tree);
			}

			char_literal380=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_recordVariant8492); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal380_tree = (Object)adaptor.create(char_literal380);
			adaptor.addChild(root_0, char_literal380_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:79: ( recordVariantField )*
			loop123:
			while (true) {
				int alt123=2;
				int LA123_0 = input.LA(1);
				if ( (LA123_0==ADD||LA123_0==ANSISTRING||LA123_0==AT||LA123_0==BREAK||(LA123_0 >= CONTAINS && LA123_0 <= CONTINUE)||LA123_0==DEFAULT||LA123_0==EXIT||LA123_0==EXPORT||LA123_0==FINAL||LA123_0==IMPLEMENTS||LA123_0==INDEX||LA123_0==LOCAL||LA123_0==MESSAGE||LA123_0==NAME||LA123_0==OBJECT||LA123_0==OPERATOR||LA123_0==OUT||LA123_0==POINTER||(LA123_0 >= READ && LA123_0 <= READONLY)||(LA123_0 >= REFERENCE && LA123_0 <= REGISTER)||LA123_0==REMOVE||(LA123_0 >= STORED && LA123_0 <= STRING)||LA123_0==TkIdentifier||LA123_0==VARIANT||LA123_0==WRITE||LA123_0==200) ) {
					alt123=1;
				}

				switch (alt123) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:80: recordVariantField
					{
					pushFollow(FOLLOW_recordVariantField_in_recordVariant8495);
					recordVariantField381=recordVariantField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariantField381.getTree());

					}
					break;

				default :
					break loop123;
				}
			}

			char_literal382=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_recordVariant8499); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal382_tree = (Object)adaptor.create(char_literal382);
			adaptor.addChild(root_0, char_literal382_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, recordVariant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariant"


	public static class recordHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
	public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
		DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
		retval.start = input.LT(1);
		int recordHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal383=null;
		Token string_literal384=null;
		Token string_literal385=null;
		Token string_literal388=null;
		ParserRuleReturnScope typeId386 =null;
		ParserRuleReturnScope recordHelperItem387 =null;

		Object string_literal383_tree=null;
		Object string_literal384_tree=null;
		Object string_literal385_tree=null;
		Object string_literal388_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal383=(Token)match(input,RECORD,FOLLOW_RECORD_in_recordHelperDecl8551); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal383_tree = (Object)adaptor.create(string_literal383);
			adaptor.addChild(root_0, string_literal383_tree);
			}

			string_literal384=(Token)match(input,HELPER,FOLLOW_HELPER_in_recordHelperDecl8553); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal384_tree = (Object)adaptor.create(string_literal384);
			adaptor.addChild(root_0, string_literal384_tree);
			}

			string_literal385=(Token)match(input,FOR,FOLLOW_FOR_in_recordHelperDecl8555); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal385_tree = (Object)adaptor.create(string_literal385);
			adaptor.addChild(root_0, string_literal385_tree);
			}

			pushFollow(FOLLOW_typeId_in_recordHelperDecl8557);
			typeId386=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId386.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:63: ( recordHelperItem )*
			loop124:
			while (true) {
				int alt124=2;
				int LA124_0 = input.LA(1);
				if ( (LA124_0==AUTOMATED||LA124_0==CLASS||LA124_0==CONSTRUCTOR||LA124_0==DESTRUCTOR||LA124_0==FUNCTION||LA124_0==LBRACK||LA124_0==OPERATOR||(LA124_0 >= PRIVATE && LA124_0 <= PROCEDURE)||(LA124_0 >= PROPERTY && LA124_0 <= PUBLISHED)||LA124_0==STRICT) ) {
					alt124=1;
				}

				switch (alt124) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:64: recordHelperItem
					{
					pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8560);
					recordHelperItem387=recordHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordHelperItem387.getTree());

					}
					break;

				default :
					break loop124;
				}
			}

			string_literal388=(Token)match(input,END,FOLLOW_END_in_recordHelperDecl8564); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal388_tree = (Object)adaptor.create(string_literal388);
			adaptor.addChild(root_0, string_literal388_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, recordHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperDecl"


	public static class recordHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:1: recordHelperItem : ( visibility | classMethod | classProperty );
	public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
		DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
		retval.start = input.LT(1);
		int recordHelperItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility389 =null;
		ParserRuleReturnScope classMethod390 =null;
		ParserRuleReturnScope classProperty391 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:30: ( visibility | classMethod | classProperty )
			int alt125=3;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt125=1;
				}
				break;
			case LBRACK:
				{
				int LA125_7 = input.LA(2);
				if ( (synpred180_Delphi()) ) {
					alt125=2;
				}
				else if ( (true) ) {
					alt125=3;
				}

				}
				break;
			case CLASS:
				{
				int LA125_8 = input.LA(2);
				if ( (synpred180_Delphi()) ) {
					alt125=2;
				}
				else if ( (true) ) {
					alt125=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt125=2;
				}
				break;
			case PROPERTY:
				{
				alt125=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}
			switch (alt125) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordHelperItem8613);
					visibility389=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility389.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordHelperItem8646);
					classMethod390=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod390.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordHelperItem8679);
					classProperty391=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty391.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, recordHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperItem"


	public static class classMethod_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classMethod"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) );
	public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
		DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
		retval.start = input.LT(1);
		int classMethod_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal393=null;
		Token char_literal398=null;
		Token string_literal401=null;
		Token string_literal402=null;
		Token char_literal406=null;
		Token char_literal409=null;
		Token string_literal412=null;
		Token string_literal413=null;
		Token char_literal417=null;
		Token char_literal420=null;
		ParserRuleReturnScope customAttribute392 =null;
		ParserRuleReturnScope methodKey394 =null;
		ParserRuleReturnScope ident395 =null;
		ParserRuleReturnScope genericDefinition396 =null;
		ParserRuleReturnScope formalParameterSection397 =null;
		ParserRuleReturnScope methodDirective399 =null;
		ParserRuleReturnScope customAttribute400 =null;
		ParserRuleReturnScope ident403 =null;
		ParserRuleReturnScope genericDefinition404 =null;
		ParserRuleReturnScope formalParameterSection405 =null;
		ParserRuleReturnScope customAttribute407 =null;
		ParserRuleReturnScope typeDecl408 =null;
		ParserRuleReturnScope methodDirective410 =null;
		ParserRuleReturnScope customAttribute411 =null;
		ParserRuleReturnScope ident414 =null;
		ParserRuleReturnScope genericDefinition415 =null;
		ParserRuleReturnScope formalParameterSection416 =null;
		ParserRuleReturnScope customAttribute418 =null;
		ParserRuleReturnScope typeDecl419 =null;

		Object string_literal393_tree=null;
		Object char_literal398_tree=null;
		Object string_literal401_tree=null;
		Object string_literal402_tree=null;
		Object char_literal406_tree=null;
		Object char_literal409_tree=null;
		Object string_literal412_tree=null;
		Object string_literal413_tree=null;
		Object char_literal417_tree=null;
		Object char_literal420_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) )
			int alt142=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA142_1 = input.LA(2);
				if ( (synpred186_Delphi()) ) {
					alt142=1;
				}
				else if ( (synpred193_Delphi()) ) {
					alt142=2;
				}
				else if ( (true) ) {
					alt142=3;
				}

				}
				break;
			case CLASS:
				{
				int LA142_2 = input.LA(2);
				if ( (synpred186_Delphi()) ) {
					alt142=1;
				}
				else if ( (synpred193_Delphi()) ) {
					alt142=2;
				}
				else if ( (true) ) {
					alt142=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt142=1;
				}
				break;
			case FUNCTION:
				{
				alt142=2;
				}
				break;
			case OPERATOR:
				{
				alt142=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 142, 0, input);
				throw nvae;
			}
			switch (alt142) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )?
					int alt126=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt126=1;
							}
							break;
						case CLASS:
							{
							int LA126_2 = input.LA(2);
							if ( (synpred181_Delphi()) ) {
								alt126=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA126_3 = input.LA(2);
							if ( (synpred181_Delphi()) ) {
								alt126=1;
							}
							}
							break;
					}
					switch (alt126) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8734);
							customAttribute392=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute392.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:51: ( 'class' )?
					int alt127=2;
					int LA127_0 = input.LA(1);
					if ( (LA127_0==CLASS) ) {
						alt127=1;
					}
					switch (alt127) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:52: 'class'
							{
							string_literal393=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8739); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal393);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_classMethod8743);
					methodKey394=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey394.getTree());
					pushFollow(FOLLOW_ident_in_classMethod8745);
					ident395=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident395.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:78: ( genericDefinition )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==LT) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:79: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8748);
							genericDefinition396=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition396.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:99: ( formalParameterSection )?
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==LPAREN) ) {
						alt129=1;
					}
					switch (alt129) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8753);
							formalParameterSection397=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection397.getTree());
							}
							break;

					}

					char_literal398=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8757); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal398);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:129: ( methodDirective )*
					loop130:
					while (true) {
						int alt130=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA130_2 = input.LA(2);
							if ( ((LA130_2 >= ADD && LA130_2 <= ANSISTRING)||LA130_2==AS||(LA130_2 >= AT && LA130_2 <= AT2)||LA130_2==BREAK||(LA130_2 >= CONTAINS && LA130_2 <= ControlString)||LA130_2==DEFAULT||LA130_2==DIV||LA130_2==DOT||LA130_2==EQUAL||LA130_2==EXIT||LA130_2==EXPORT||LA130_2==FALSE||LA130_2==FINAL||(LA130_2 >= FUNCTION && LA130_2 <= GE)||LA130_2==GT||(LA130_2 >= IMPLEMENTS && LA130_2 <= INHERITED)||LA130_2==IS||LA130_2==LBRACK||LA130_2==LE||(LA130_2 >= LOCAL && LA130_2 <= NAME)||LA130_2==NIL||(LA130_2 >= NOT && LA130_2 <= OBJECT)||(LA130_2 >= OPERATOR && LA130_2 <= OUT)||(LA130_2 >= PLUS && LA130_2 <= POINTER2)||LA130_2==PROCEDURE||LA130_2==QuotedString||(LA130_2 >= READ && LA130_2 <= READONLY)||(LA130_2 >= REFERENCE && LA130_2 <= REGISTER)||LA130_2==REMOVE||LA130_2==SEMI||(LA130_2 >= SHL && LA130_2 <= STAR)||(LA130_2 >= STORED && LA130_2 <= STRING)||LA130_2==TRUE||LA130_2==TkAsmHexNum||(LA130_2 >= TkHexNum && LA130_2 <= TkIntNum)||LA130_2==TkRealNum||LA130_2==VARIANT||LA130_2==WRITE||(LA130_2 >= XOR && LA130_2 <= 201)) ) {
								alt130=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STATIC:
						case STDCALL:
						case VIRTUAL:
							{
							alt130=1;
							}
							break;
						case FINAL:
							{
							int LA130_4 = input.LA(2);
							if ( (LA130_4==SEMI) ) {
								alt130=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA130_5 = input.LA(2);
							if ( (LA130_5==SEMI) ) {
								alt130=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA130_6 = input.LA(2);
							if ( (LA130_6==SEMI) ) {
								alt130=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA130_7 = input.LA(2);
							if ( (LA130_7==SEMI) ) {
								alt130=1;
							}

							}
							break;
						}
						switch (alt130) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:130: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8760);
							methodDirective399=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective399.getTree());
							}
							break;

						default :
							break loop130;
						}
					}

					// AST REWRITE
					// elements: methodKey, genericDefinition, CLASS, ident, formalParameterSection, customAttribute, methodDirective
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 356:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:34: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:53: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:165: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )?
					int alt131=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt131=1;
							}
							break;
						case CLASS:
							{
							int LA131_2 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA131_3 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt131=1;
							}
							}
							break;
					}
					switch (alt131) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8868);
							customAttribute400=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute400.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:51: ( 'class' )?
					int alt132=2;
					int LA132_0 = input.LA(1);
					if ( (LA132_0==CLASS) ) {
						alt132=1;
					}
					switch (alt132) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: 'class'
							{
							string_literal401=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8873); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal401);

							}
							break;

					}

					string_literal402=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod8877); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal402);

					pushFollow(FOLLOW_ident_in_classMethod8879);
					ident403=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident403.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:79: ( genericDefinition )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==LT) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8882);
							genericDefinition404=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition404.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:100: ( formalParameterSection )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==LPAREN) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8887);
							formalParameterSection405=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection405.getTree());
							}
							break;

					}

					char_literal406=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8891); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal406);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:130: ( customAttribute )?
					int alt135=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA135_1 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case PACKED:
							{
							int LA135_2 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA135_3 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case SET:
							{
							int LA135_4 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case FILE:
							{
							int LA135_5 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case CLASS:
							{
							int LA135_6 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA135_7 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA135_8 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case RECORD:
							{
							int LA135_9 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA135_10 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case POINTER:
							{
							int LA135_11 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case STRING:
							{
							int LA135_12 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TYPE:
							{
							int LA135_13 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA135_14 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA135_15 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA135_16 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA135_17 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA135_18 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA135_19 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case 200:
							{
							int LA135_20 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA135_21 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA135_22 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case AT2:
							{
							int LA135_23 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case 201:
							{
							int LA135_24 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case NOT:
							{
							int LA135_25 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case PLUS:
							{
							int LA135_26 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case MINUS:
							{
							int LA135_27 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA135_28 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA135_29 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA135_30 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case TRUE:
							{
							int LA135_31 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case FALSE:
							{
							int LA135_32 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case NIL:
							{
							int LA135_33 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case ControlString:
							{
							int LA135_34 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA135_35 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA135_36 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case DOT:
							{
							int LA135_37 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case LT:
							{
							int LA135_38 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA135_39 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA135_40 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA135_41 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA135_42 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
						case SEMI:
							{
							int LA135_43 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt135=1;
							}
							}
							break;
					}
					switch (alt135) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8894);
							customAttribute407=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute407.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8898);
					typeDecl408=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl408.getTree());
					char_literal409=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8900); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal409);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:162: ( methodDirective )*
					loop136:
					while (true) {
						int alt136=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA136_2 = input.LA(2);
							if ( ((LA136_2 >= ADD && LA136_2 <= ANSISTRING)||LA136_2==AS||(LA136_2 >= AT && LA136_2 <= AT2)||LA136_2==BREAK||(LA136_2 >= CONTAINS && LA136_2 <= ControlString)||LA136_2==DEFAULT||LA136_2==DIV||LA136_2==DOT||LA136_2==EQUAL||LA136_2==EXIT||LA136_2==EXPORT||LA136_2==FALSE||LA136_2==FINAL||(LA136_2 >= FUNCTION && LA136_2 <= GE)||LA136_2==GT||(LA136_2 >= IMPLEMENTS && LA136_2 <= INHERITED)||LA136_2==IS||LA136_2==LBRACK||LA136_2==LE||(LA136_2 >= LOCAL && LA136_2 <= NAME)||LA136_2==NIL||(LA136_2 >= NOT && LA136_2 <= OBJECT)||(LA136_2 >= OPERATOR && LA136_2 <= OUT)||(LA136_2 >= PLUS && LA136_2 <= POINTER2)||LA136_2==PROCEDURE||LA136_2==QuotedString||(LA136_2 >= READ && LA136_2 <= READONLY)||(LA136_2 >= REFERENCE && LA136_2 <= REGISTER)||LA136_2==REMOVE||LA136_2==SEMI||(LA136_2 >= SHL && LA136_2 <= STAR)||(LA136_2 >= STORED && LA136_2 <= STRING)||LA136_2==TRUE||LA136_2==TkAsmHexNum||(LA136_2 >= TkHexNum && LA136_2 <= TkIntNum)||LA136_2==TkRealNum||LA136_2==VARIANT||LA136_2==WRITE||(LA136_2 >= XOR && LA136_2 <= 201)) ) {
								alt136=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STATIC:
						case STDCALL:
						case VIRTUAL:
							{
							alt136=1;
							}
							break;
						case FINAL:
							{
							int LA136_4 = input.LA(2);
							if ( (LA136_4==SEMI) ) {
								alt136=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA136_5 = input.LA(2);
							if ( (LA136_5==SEMI) ) {
								alt136=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA136_6 = input.LA(2);
							if ( (LA136_6==SEMI) ) {
								alt136=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA136_7 = input.LA(2);
							if ( (LA136_7==SEMI) ) {
								alt136=1;
							}

							}
							break;
						}
						switch (alt136) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:163: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8903);
							methodDirective410=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective410.getTree());
							}
							break;

						default :
							break loop136;
						}
					}

					// AST REWRITE
					// elements: CLASS, methodDirective, genericDefinition, customAttribute, ident, customAttribute, formalParameterSection, FUNCTION, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 358:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:184: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:213: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )?
					int alt137=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt137=1;
							}
							break;
						case CLASS:
							{
							int LA137_2 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case OPERATOR:
							{
							int LA137_3 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt137=1;
							}
							}
							break;
					}
					switch (alt137) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9020);
							customAttribute411=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute411.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:51: ( 'class' )?
					int alt138=2;
					int LA138_0 = input.LA(1);
					if ( (LA138_0==CLASS) ) {
						alt138=1;
					}
					switch (alt138) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:52: 'class'
							{
							string_literal412=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9025); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal412);

							}
							break;

					}

					string_literal413=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_classMethod9029); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal413);

					pushFollow(FOLLOW_ident_in_classMethod9031);
					ident414=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident414.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:79: ( genericDefinition )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==LT) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9034);
							genericDefinition415=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition415.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:100: ( formalParameterSection )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==LPAREN) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod9039);
							formalParameterSection416=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection416.getTree());
							}
							break;

					}

					char_literal417=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod9043); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal417);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:130: ( customAttribute )?
					int alt141=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA141_1 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case PACKED:
							{
							int LA141_2 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA141_3 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case SET:
							{
							int LA141_4 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case FILE:
							{
							int LA141_5 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case CLASS:
							{
							int LA141_6 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA141_7 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA141_8 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case RECORD:
							{
							int LA141_9 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA141_10 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case POINTER:
							{
							int LA141_11 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case STRING:
							{
							int LA141_12 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TYPE:
							{
							int LA141_13 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA141_14 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA141_15 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA141_16 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA141_17 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA141_18 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA141_19 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case 200:
							{
							int LA141_20 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA141_21 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA141_22 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case AT2:
							{
							int LA141_23 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case 201:
							{
							int LA141_24 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case NOT:
							{
							int LA141_25 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case PLUS:
							{
							int LA141_26 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case MINUS:
							{
							int LA141_27 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA141_28 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA141_29 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA141_30 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case TRUE:
							{
							int LA141_31 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case FALSE:
							{
							int LA141_32 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case NIL:
							{
							int LA141_33 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case ControlString:
							{
							int LA141_34 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA141_35 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA141_36 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case DOT:
							{
							int LA141_37 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case LT:
							{
							int LA141_38 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA141_39 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA141_40 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA141_41 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA141_42 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case SEMI:
							{
							int LA141_43 = input.LA(2);
							if ( (synpred198_Delphi()) ) {
								alt141=1;
							}
							}
							break;
					}
					switch (alt141) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9046);
							customAttribute418=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute418.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod9050);
					typeDecl419=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl419.getTree());
					char_literal420=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9052); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal420);

					// AST REWRITE
					// elements: customAttribute, ident, genericDefinition, customAttribute, OPERATOR, typeDecl, CLASS, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 360:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, classMethod_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classMethod"


	public static class classField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classField"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:1: classField : ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
	public final DelphiParser.classField_return classField() throws RecognitionException {
		DelphiParser.classField_return retval = new DelphiParser.classField_return();
		retval.start = input.LT(1);
		int classField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal423=null;
		Token char_literal425=null;
		ParserRuleReturnScope customAttribute421 =null;
		ParserRuleReturnScope identList422 =null;
		ParserRuleReturnScope typeDecl424 =null;
		ParserRuleReturnScope hintingDirective426 =null;

		Object char_literal423_tree=null;
		Object char_literal425_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:30: ( ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:32: ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )*
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:32: ( customAttribute )?
			int alt143=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt143=1;
					}
					break;
				case TkIdentifier:
					{
					int LA143_2 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt143=1;
					}
					}
					break;
				case 200:
					{
					int LA143_3 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt143=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA143_4 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt143=1;
					}
					}
					break;
			}
			switch (alt143) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classField9181);
					customAttribute421=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute421.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identList_in_classField9185);
			identList422=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList422.getTree());
			char_literal423=(Token)match(input,COLON,FOLLOW_COLON_in_classField9187); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal423);

			pushFollow(FOLLOW_typeDecl_in_classField9189);
			typeDecl424=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl424.getTree());
			char_literal425=(Token)match(input,SEMI,FOLLOW_SEMI_in_classField9191); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal425);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:78: ( hintingDirective )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==DEPRECATED||LA144_0==EXPERIMENTAL||LA144_0==LIBRARY||LA144_0==PLATFORM) ) {
					alt144=1;
				}

				switch (alt144) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:79: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_classField9194);
					hintingDirective426=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective426.getTree());
					}
					break;

				default :
					break loop144;
				}
			}

			// AST REWRITE
			// elements: customAttribute, identList, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 363:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassField, "TkClassField"), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:67: ^( TkVariableIdents identList )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_identList.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:97: ^( TkVariableType typeDecl )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, classField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classField"


	public static class classProperty_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classProperty"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
	public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
		DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
		retval.start = input.LT(1);
		int classProperty_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal428=null;
		Token string_literal429=null;
		Token char_literal432=null;
		Token char_literal436=null;
		ParserRuleReturnScope customAttribute427 =null;
		ParserRuleReturnScope ident430 =null;
		ParserRuleReturnScope classPropertyArray431 =null;
		ParserRuleReturnScope genericTypeIdent433 =null;
		ParserRuleReturnScope classPropertyIndex434 =null;
		ParserRuleReturnScope classPropertySpecifier435 =null;
		ParserRuleReturnScope classPropertyEndSpecifier437 =null;

		Object string_literal428_tree=null;
		Object string_literal429_tree=null;
		Object char_literal432_tree=null;
		Object char_literal436_tree=null;
		RewriteRuleTokenStream stream_PROPERTY=new RewriteRuleTokenStream(adaptor,"token PROPERTY");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_classPropertyEndSpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyEndSpecifier");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_classPropertyIndex=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyIndex");
		RewriteRuleSubtreeStream stream_classPropertyArray=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyArray");
		RewriteRuleSubtreeStream stream_classPropertySpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertySpecifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )?
			int alt145=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt145=1;
					}
					break;
				case CLASS:
					{
					int LA145_2 = input.LA(2);
					if ( (synpred201_Delphi()) ) {
						alt145=1;
					}
					}
					break;
				case PROPERTY:
					{
					int LA145_3 = input.LA(2);
					if ( (synpred201_Delphi()) ) {
						alt145=1;
					}
					}
					break;
			}
			switch (alt145) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classProperty9301);
					customAttribute427=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute427.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:51: ( 'class' )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==CLASS) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:52: 'class'
					{
					string_literal428=(Token)match(input,CLASS,FOLLOW_CLASS_in_classProperty9306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal428);

					}
					break;

			}

			string_literal429=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_classProperty9310); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PROPERTY.add(string_literal429);

			pushFollow(FOLLOW_ident_in_classProperty9312);
			ident430=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident430.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:79: ( classPropertyArray )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==LBRACK) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:80: classPropertyArray
					{
					pushFollow(FOLLOW_classPropertyArray_in_classProperty9315);
					classPropertyArray431=classPropertyArray();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyArray.add(classPropertyArray431.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:101: ( ':' genericTypeIdent )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==COLON) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:102: ':' genericTypeIdent
					{
					char_literal432=(Token)match(input,COLON,FOLLOW_COLON_in_classProperty9320); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal432);

					pushFollow(FOLLOW_genericTypeIdent_in_classProperty9322);
					genericTypeIdent433=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent433.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:125: ( classPropertyIndex )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==INDEX) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:126: classPropertyIndex
					{
					pushFollow(FOLLOW_classPropertyIndex_in_classProperty9327);
					classPropertyIndex434=classPropertyIndex();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyIndex.add(classPropertyIndex434.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:147: ( classPropertySpecifier )*
			loop150:
			while (true) {
				int alt150=2;
				int LA150_0 = input.LA(1);
				if ( (LA150_0==DEFAULT||LA150_0==DISPID||LA150_0==IMPLEMENTS||LA150_0==NODEFAULT||(LA150_0 >= READ && LA150_0 <= READONLY)||LA150_0==STORED||(LA150_0 >= WRITE && LA150_0 <= WRITEONLY)) ) {
					alt150=1;
				}

				switch (alt150) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:148: classPropertySpecifier
					{
					pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9332);
					classPropertySpecifier435=classPropertySpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertySpecifier.add(classPropertySpecifier435.getTree());
					}
					break;

				default :
					break loop150;
				}
			}

			char_literal436=(Token)match(input,SEMI,FOLLOW_SEMI_in_classProperty9336); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal436);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:177: ( classPropertyEndSpecifier )*
			loop151:
			while (true) {
				int alt151=2;
				switch ( input.LA(1) ) {
				case STORED:
					{
					int LA151_2 = input.LA(2);
					if ( ((LA151_2 >= ADD && LA151_2 <= ANSISTRING)||LA151_2==AS||(LA151_2 >= AT && LA151_2 <= AT2)||LA151_2==BREAK||(LA151_2 >= CONTAINS && LA151_2 <= ControlString)||LA151_2==DEFAULT||LA151_2==DIV||LA151_2==DOT||LA151_2==EQUAL||LA151_2==EXIT||LA151_2==EXPORT||LA151_2==FALSE||LA151_2==FINAL||(LA151_2 >= FUNCTION && LA151_2 <= GE)||LA151_2==GT||(LA151_2 >= IMPLEMENTS && LA151_2 <= INHERITED)||LA151_2==IS||LA151_2==LBRACK||LA151_2==LE||(LA151_2 >= LOCAL && LA151_2 <= NAME)||LA151_2==NIL||(LA151_2 >= NOT && LA151_2 <= OBJECT)||(LA151_2 >= OPERATOR && LA151_2 <= OUT)||(LA151_2 >= PLUS && LA151_2 <= POINTER2)||LA151_2==PROCEDURE||LA151_2==QuotedString||(LA151_2 >= READ && LA151_2 <= READONLY)||(LA151_2 >= REFERENCE && LA151_2 <= REGISTER)||LA151_2==REMOVE||LA151_2==SEMI||(LA151_2 >= SHL && LA151_2 <= STAR)||(LA151_2 >= STORED && LA151_2 <= STRING)||LA151_2==TRUE||LA151_2==TkAsmHexNum||(LA151_2 >= TkHexNum && LA151_2 <= TkIntNum)||LA151_2==TkRealNum||LA151_2==VARIANT||LA151_2==WRITE||(LA151_2 >= XOR && LA151_2 <= 201)) ) {
						alt151=1;
					}

					}
					break;
				case DEFAULT:
					{
					int LA151_3 = input.LA(2);
					if ( ((LA151_3 >= ADD && LA151_3 <= ANSISTRING)||LA151_3==AS||(LA151_3 >= AT && LA151_3 <= AT2)||LA151_3==BREAK||(LA151_3 >= CONTAINS && LA151_3 <= ControlString)||LA151_3==DEFAULT||LA151_3==DIV||LA151_3==DOT||LA151_3==EQUAL||LA151_3==EXIT||LA151_3==EXPORT||LA151_3==FALSE||LA151_3==FINAL||(LA151_3 >= FUNCTION && LA151_3 <= GE)||LA151_3==GT||(LA151_3 >= IMPLEMENTS && LA151_3 <= INHERITED)||LA151_3==IS||LA151_3==LBRACK||LA151_3==LE||(LA151_3 >= LOCAL && LA151_3 <= NAME)||LA151_3==NIL||(LA151_3 >= NOT && LA151_3 <= OBJECT)||(LA151_3 >= OPERATOR && LA151_3 <= OUT)||(LA151_3 >= PLUS && LA151_3 <= POINTER2)||LA151_3==PROCEDURE||LA151_3==QuotedString||(LA151_3 >= READ && LA151_3 <= READONLY)||(LA151_3 >= REFERENCE && LA151_3 <= REGISTER)||LA151_3==REMOVE||LA151_3==SEMI||(LA151_3 >= SHL && LA151_3 <= STAR)||(LA151_3 >= STORED && LA151_3 <= STRING)||LA151_3==TRUE||LA151_3==TkAsmHexNum||(LA151_3 >= TkHexNum && LA151_3 <= TkIntNum)||LA151_3==TkRealNum||LA151_3==VARIANT||LA151_3==WRITE||(LA151_3 >= XOR && LA151_3 <= 201)) ) {
						alt151=1;
					}

					}
					break;
				case NODEFAULT:
					{
					alt151=1;
					}
					break;
				}
				switch (alt151) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:178: classPropertyEndSpecifier
					{
					pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9339);
					classPropertyEndSpecifier437=classPropertyEndSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier437.getTree());
					}
					break;

				default :
					break loop151;
				}
			}

			// AST REWRITE
			// elements: PROPERTY, ident, genericTypeIdent, classPropertySpecifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 366:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:47: ^( TkVariableIdents ident )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_ident.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:73: ^( TkVariableType ( genericTypeIdent )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:90: ( genericTypeIdent )?
				if ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

				adaptor.addChild(root_1, root_2);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:109: ( classPropertySpecifier )*
				while ( stream_classPropertySpecifier.hasNext() ) {
					adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
				}
				stream_classPropertySpecifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, classProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classProperty"


	public static class classPropertyArray_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyArray"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:1: classPropertyArray : '[' formalParameterList ']' ;
	public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
		DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
		retval.start = input.LT(1);
		int classPropertyArray_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal438=null;
		Token char_literal440=null;
		ParserRuleReturnScope formalParameterList439 =null;

		Object char_literal438_tree=null;
		Object char_literal440_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:30: ( '[' formalParameterList ']' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:32: '[' formalParameterList ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal438=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyArray9505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal438_tree = (Object)adaptor.create(char_literal438);
			adaptor.addChild(root_0, char_literal438_tree);
			}

			pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9507);
			formalParameterList439=formalParameterList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList439.getTree());

			char_literal440=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyArray9509); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal440_tree = (Object)adaptor.create(char_literal440);
			adaptor.addChild(root_0, char_literal440_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, classPropertyArray_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyArray"


	public static class classPropertyIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyIndex"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:1: classPropertyIndex : 'index' expression ( ';' )? ;
	public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
		DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
		retval.start = input.LT(1);
		int classPropertyIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal441=null;
		Token char_literal443=null;
		ParserRuleReturnScope expression442 =null;

		Object string_literal441_tree=null;
		Object char_literal443_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:30: ( 'index' expression ( ';' )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:32: 'index' expression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal441=(Token)match(input,INDEX,FOLLOW_INDEX_in_classPropertyIndex9556); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal441_tree = (Object)adaptor.create(string_literal441);
			adaptor.addChild(root_0, string_literal441_tree);
			}

			pushFollow(FOLLOW_expression_in_classPropertyIndex9558);
			expression442=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression442.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:51: ( ';' )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==SEMI) ) {
				int LA152_1 = input.LA(2);
				if ( (synpred208_Delphi()) ) {
					alt152=1;
				}
			}
			switch (alt152) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:52: ';'
					{
					char_literal443=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyIndex9561); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal443_tree = (Object)adaptor.create(char_literal443);
					adaptor.addChild(root_0, char_literal443_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, classPropertyIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyIndex"


	public static class classPropertySpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertySpecifier"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId );
	public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
		DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
		retval.start = input.LT(1);
		int classPropertySpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED446=null;
		Token string_literal448=null;
		Token string_literal450=null;
		Token string_literal451=null;
		Token IMPLEMENTS452=null;
		ParserRuleReturnScope classPropertyReadWrite444 =null;
		ParserRuleReturnScope classPropertyDispInterface445 =null;
		ParserRuleReturnScope expression447 =null;
		ParserRuleReturnScope expression449 =null;
		ParserRuleReturnScope typeId453 =null;

		Object STORED446_tree=null;
		Object string_literal448_tree=null;
		Object string_literal450_tree=null;
		Object string_literal451_tree=null;
		Object IMPLEMENTS452_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId )
			int alt153=7;
			switch ( input.LA(1) ) {
			case READ:
			case WRITE:
				{
				alt153=1;
				}
				break;
			case DISPID:
			case READONLY:
			case WRITEONLY:
				{
				alt153=2;
				}
				break;
			case STORED:
				{
				alt153=3;
				}
				break;
			case DEFAULT:
				{
				int LA153_4 = input.LA(2);
				if ( (synpred212_Delphi()) ) {
					alt153=4;
				}
				else if ( (synpred213_Delphi()) ) {
					alt153=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 153, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt153=6;
				}
				break;
			case IMPLEMENTS:
				{
				alt153=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 153, 0, input);
				throw nvae;
			}
			switch (alt153) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: classPropertyReadWrite
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9608);
					classPropertyReadWrite444=classPropertyReadWrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyReadWrite444.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: classPropertyDispInterface
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9644);
					classPropertyDispInterface445=classPropertyDispInterface();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyDispInterface445.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: STORED expression
					{
					root_0 = (Object)adaptor.nil();


					STORED446=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertySpecifier9677); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED446_tree = (Object)adaptor.create(STORED446);
					adaptor.addChild(root_0, STORED446_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9679);
					expression447=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: 'default' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal448=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9712); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal448_tree = (Object)adaptor.create(string_literal448);
					adaptor.addChild(root_0, string_literal448_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9714);
					expression449=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: 'default'
					{
					root_0 = (Object)adaptor.nil();


					string_literal450=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9747); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal450_tree = (Object)adaptor.create(string_literal450);
					adaptor.addChild(root_0, string_literal450_tree);
					}

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:379:32: 'nodefault'
					{
					root_0 = (Object)adaptor.nil();


					string_literal451=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertySpecifier9796); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal451_tree = (Object)adaptor.create(string_literal451);
					adaptor.addChild(root_0, string_literal451_tree);
					}

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: IMPLEMENTS typeId
					{
					root_0 = (Object)adaptor.nil();


					IMPLEMENTS452=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classPropertySpecifier9829); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPLEMENTS452_tree = (Object)adaptor.create(IMPLEMENTS452);
					adaptor.addChild(root_0, IMPLEMENTS452_tree);
					}

					pushFollow(FOLLOW_typeId_in_classPropertySpecifier9831);
					typeId453=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId453.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, classPropertySpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertySpecifier"


	public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyEndSpecifier"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
	public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
		DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
		retval.start = input.LT(1);
		int classPropertyEndSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED454=null;
		Token char_literal456=null;
		Token string_literal457=null;
		Token char_literal459=null;
		Token string_literal460=null;
		Token char_literal461=null;
		Token string_literal462=null;
		Token char_literal463=null;
		ParserRuleReturnScope expression455 =null;
		ParserRuleReturnScope expression458 =null;

		Object STORED454_tree=null;
		Object char_literal456_tree=null;
		Object string_literal457_tree=null;
		Object char_literal459_tree=null;
		Object string_literal460_tree=null;
		Object char_literal461_tree=null;
		Object string_literal462_tree=null;
		Object char_literal463_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
			int alt154=4;
			switch ( input.LA(1) ) {
			case STORED:
				{
				alt154=1;
				}
				break;
			case DEFAULT:
				{
				int LA154_2 = input.LA(2);
				if ( (LA154_2==SEMI) ) {
					int LA154_4 = input.LA(3);
					if ( (synpred216_Delphi()) ) {
						alt154=2;
					}
					else if ( (synpred217_Delphi()) ) {
						alt154=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 154, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA154_2 >= ADD && LA154_2 <= ANSISTRING)||LA154_2==AS||(LA154_2 >= AT && LA154_2 <= AT2)||LA154_2==BREAK||(LA154_2 >= CONTAINS && LA154_2 <= ControlString)||LA154_2==DEFAULT||LA154_2==DIV||LA154_2==DOT||LA154_2==EQUAL||LA154_2==EXIT||LA154_2==EXPORT||LA154_2==FALSE||LA154_2==FINAL||(LA154_2 >= FUNCTION && LA154_2 <= GE)||LA154_2==GT||(LA154_2 >= IMPLEMENTS && LA154_2 <= INHERITED)||LA154_2==IS||LA154_2==LBRACK||LA154_2==LE||(LA154_2 >= LOCAL && LA154_2 <= NAME)||LA154_2==NIL||(LA154_2 >= NOT && LA154_2 <= OBJECT)||(LA154_2 >= OPERATOR && LA154_2 <= OUT)||(LA154_2 >= PLUS && LA154_2 <= POINTER2)||LA154_2==PROCEDURE||LA154_2==QuotedString||(LA154_2 >= READ && LA154_2 <= READONLY)||(LA154_2 >= REFERENCE && LA154_2 <= REGISTER)||LA154_2==REMOVE||(LA154_2 >= SHL && LA154_2 <= STAR)||(LA154_2 >= STORED && LA154_2 <= STRING)||LA154_2==TRUE||LA154_2==TkAsmHexNum||(LA154_2 >= TkHexNum && LA154_2 <= TkIntNum)||LA154_2==TkRealNum||LA154_2==VARIANT||LA154_2==WRITE||(LA154_2 >= XOR && LA154_2 <= 201)) ) {
					alt154=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 154, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt154=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}
			switch (alt154) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: STORED expression ';'
					{
					root_0 = (Object)adaptor.nil();


					STORED454=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertyEndSpecifier9871); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED454_tree = (Object)adaptor.create(STORED454);
					adaptor.addChild(root_0, STORED454_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9873);
					expression455=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression455.getTree());

					char_literal456=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9875); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal456_tree = (Object)adaptor.create(char_literal456);
					adaptor.addChild(root_0, char_literal456_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'default' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal457=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9912); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal457_tree = (Object)adaptor.create(string_literal457);
					adaptor.addChild(root_0, string_literal457_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9914);
					expression458=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression458.getTree());

					char_literal459=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9916); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal459_tree = (Object)adaptor.create(char_literal459);
					adaptor.addChild(root_0, char_literal459_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: 'default' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal460=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9949); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal460_tree = (Object)adaptor.create(string_literal460);
					adaptor.addChild(root_0, string_literal460_tree);
					}

					char_literal461=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9951); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal461_tree = (Object)adaptor.create(char_literal461);
					adaptor.addChild(root_0, char_literal461_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:32: 'nodefault' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal462=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9984); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal462_tree = (Object)adaptor.create(string_literal462);
					adaptor.addChild(root_0, string_literal462_tree);
					}

					char_literal463=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal463_tree = (Object)adaptor.create(char_literal463);
					adaptor.addChild(root_0, char_literal463_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, classPropertyEndSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyEndSpecifier"


	public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyReadWrite"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
	public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
		DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
		retval.start = input.LT(1);
		int classPropertyReadWrite_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal464=null;
		Token char_literal466=null;
		Token char_literal468=null;
		Token string_literal469=null;
		Token char_literal471=null;
		Token char_literal473=null;
		ParserRuleReturnScope qualifiedIdent465 =null;
		ParserRuleReturnScope expression467 =null;
		ParserRuleReturnScope qualifiedIdent470 =null;
		ParserRuleReturnScope expression472 =null;

		Object string_literal464_tree=null;
		Object char_literal466_tree=null;
		Object char_literal468_tree=null;
		Object string_literal469_tree=null;
		Object char_literal471_tree=null;
		Object char_literal473_tree=null;
		RewriteRuleTokenStream stream_READ=new RewriteRuleTokenStream(adaptor,"token READ");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_WRITE=new RewriteRuleTokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==READ) ) {
				alt157=1;
			}
			else if ( (LA157_0==WRITE) ) {
				alt157=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 157, 0, input);
				throw nvae;
			}

			switch (alt157) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: 'read' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal464=(Token)match(input,READ,FOLLOW_READ_in_classPropertyReadWrite10030); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_READ.add(string_literal464);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10032);
					qualifiedIdent465=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent465.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:54: ( '[' expression ']' )?
					int alt155=2;
					int LA155_0 = input.LA(1);
					if ( (LA155_0==LBRACK) ) {
						alt155=1;
					}
					switch (alt155) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:55: '[' expression ']'
							{
							char_literal466=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10035); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal466);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10037);
							expression467=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression467.getTree());
							char_literal468=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10039); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal468);

							}
							break;

					}

					// AST REWRITE
					// elements: READ, qualifiedIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 389:30: -> ^( 'read' qualifiedIdent )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:33: ^( 'read' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_READ.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: 'write' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal469=(Token)match(input,WRITE,FOLLOW_WRITE_in_classPropertyReadWrite10113); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WRITE.add(string_literal469);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10115);
					qualifiedIdent470=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent470.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:55: ( '[' expression ']' )?
					int alt156=2;
					int LA156_0 = input.LA(1);
					if ( (LA156_0==LBRACK) ) {
						alt156=1;
					}
					switch (alt156) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:56: '[' expression ']'
							{
							char_literal471=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10118); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal471);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10120);
							expression472=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression472.getTree());
							char_literal473=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10122); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal473);

							}
							break;

					}

					// AST REWRITE
					// elements: qualifiedIdent, WRITE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 391:30: -> ^( 'write' qualifiedIdent )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:33: ^( 'write' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, classPropertyReadWrite_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyReadWrite"


	public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyDispInterface"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
	public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
		DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
		retval.start = input.LT(1);
		int classPropertyDispInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal474=null;
		Token char_literal475=null;
		Token string_literal476=null;
		Token char_literal477=null;
		ParserRuleReturnScope dispIDDirective478 =null;

		Object string_literal474_tree=null;
		Object char_literal475_tree=null;
		Object string_literal476_tree=null;
		Object char_literal477_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
			int alt158=3;
			switch ( input.LA(1) ) {
			case READONLY:
				{
				alt158=1;
				}
				break;
			case WRITEONLY:
				{
				alt158=2;
				}
				break;
			case DISPID:
				{
				alt158=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 158, 0, input);
				throw nvae;
			}
			switch (alt158) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: 'readonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal474=(Token)match(input,READONLY,FOLLOW_READONLY_in_classPropertyDispInterface10201); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal474_tree = (Object)adaptor.create(string_literal474);
					adaptor.addChild(root_0, string_literal474_tree);
					}

					char_literal475=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10203); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal475_tree = (Object)adaptor.create(char_literal475);
					adaptor.addChild(root_0, char_literal475_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: 'writeonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal476=(Token)match(input,WRITEONLY,FOLLOW_WRITEONLY_in_classPropertyDispInterface10236); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal476_tree = (Object)adaptor.create(string_literal476);
					adaptor.addChild(root_0, string_literal476_tree);
					}

					char_literal477=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10238); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal477_tree = (Object)adaptor.create(char_literal477);
					adaptor.addChild(root_0, char_literal477_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10271);
					dispIDDirective478=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective478.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, classPropertyDispInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyDispInterface"


	public static class visibility_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "visibility"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
	public final DelphiParser.visibility_return visibility() throws RecognitionException {
		DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
		retval.start = input.LT(1);
		int visibility_StartIndex = input.index();

		Object root_0 = null;

		Token STRICT479=null;
		Token string_literal480=null;
		Token STRICT481=null;
		Token string_literal482=null;
		Token string_literal483=null;
		Token string_literal484=null;
		Token string_literal485=null;

		Object STRICT479_tree=null;
		Object string_literal480_tree=null;
		Object STRICT481_tree=null;
		Object string_literal482_tree=null;
		Object string_literal483_tree=null;
		Object string_literal484_tree=null;
		Object string_literal485_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
			int alt161=5;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA161_1 = input.LA(2);
				if ( (LA161_1==PROTECTED) ) {
					alt161=1;
				}
				else if ( (LA161_1==PRIVATE) ) {
					alt161=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				alt161=1;
				}
				break;
			case PRIVATE:
				{
				alt161=2;
				}
				break;
			case PUBLIC:
				{
				alt161=3;
				}
				break;
			case PUBLISHED:
				{
				alt161=4;
				}
				break;
			case AUTOMATED:
				{
				alt161=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}
			switch (alt161) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: ( STRICT )? 'protected'
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: ( STRICT )?
					int alt159=2;
					int LA159_0 = input.LA(1);
					if ( (LA159_0==STRICT) ) {
						alt159=1;
					}
					switch (alt159) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:33: STRICT
							{
							STRICT479=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10327); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT479_tree = (Object)adaptor.create(STRICT479);
							adaptor.addChild(root_0, STRICT479_tree);
							}

							}
							break;

					}

					string_literal480=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_visibility10331); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal480_tree = (Object)adaptor.create(string_literal480);
					adaptor.addChild(root_0, string_literal480_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: ( STRICT )? 'private'
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: ( STRICT )?
					int alt160=2;
					int LA160_0 = input.LA(1);
					if ( (LA160_0==STRICT) ) {
						alt160=1;
					}
					switch (alt160) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:33: STRICT
							{
							STRICT481=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10365); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT481_tree = (Object)adaptor.create(STRICT481);
							adaptor.addChild(root_0, STRICT481_tree);
							}

							}
							break;

					}

					string_literal482=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_visibility10369); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal482_tree = (Object)adaptor.create(string_literal482);
					adaptor.addChild(root_0, string_literal482_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:32: 'public'
					{
					root_0 = (Object)adaptor.nil();


					string_literal483=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_visibility10402); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal483_tree = (Object)adaptor.create(string_literal483);
					adaptor.addChild(root_0, string_literal483_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:32: 'published'
					{
					root_0 = (Object)adaptor.nil();


					string_literal484=(Token)match(input,PUBLISHED,FOLLOW_PUBLISHED_in_visibility10435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal484_tree = (Object)adaptor.create(string_literal484);
					adaptor.addChild(root_0, string_literal484_tree);
					}

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:401:32: 'automated'
					{
					root_0 = (Object)adaptor.nil();


					string_literal485=(Token)match(input,AUTOMATED,FOLLOW_AUTOMATED_in_visibility10468); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal485_tree = (Object)adaptor.create(string_literal485);
					adaptor.addChild(root_0, string_literal485_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, visibility_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "visibility"


	public static class exportedProcHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportedProcHeading"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* );
	public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
		DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
		retval.start = input.LT(1);
		int exportedProcHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal486=null;
		Token char_literal489=null;
		Token char_literal492=null;
		Token string_literal494=null;
		Token char_literal497=null;
		ParserRuleReturnScope ident487 =null;
		ParserRuleReturnScope formalParameterSection488 =null;
		ParserRuleReturnScope customAttribute490 =null;
		ParserRuleReturnScope typeDecl491 =null;
		ParserRuleReturnScope functionDirective493 =null;
		ParserRuleReturnScope ident495 =null;
		ParserRuleReturnScope formalParameterSection496 =null;
		ParserRuleReturnScope functionDirective498 =null;

		Object string_literal486_tree=null;
		Object char_literal489_tree=null;
		Object char_literal492_tree=null;
		Object string_literal494_tree=null;
		Object char_literal497_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* )
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==PROCEDURE) ) {
				alt167=1;
			}
			else if ( (LA167_0==FUNCTION) ) {
				alt167=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}

			switch (alt167) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal486=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_exportedProcHeading10522); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal486_tree = (Object)adaptor.create(string_literal486);
					adaptor.addChild(root_0, string_literal486_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10524);
					ident487=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident487.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:50: ( formalParameterSection )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==LPAREN) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:51: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10527);
							formalParameterSection488=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection488.getTree());

							}
							break;

					}

					char_literal489=(Token)match(input,COLON,FOLLOW_COLON_in_exportedProcHeading10531); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal489_tree = (Object)adaptor.create(char_literal489);
					adaptor.addChild(root_0, char_literal489_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:80: ( customAttribute )?
					int alt163=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA163_1 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case PACKED:
							{
							int LA163_2 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA163_3 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case SET:
							{
							int LA163_4 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case FILE:
							{
							int LA163_5 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case CLASS:
							{
							int LA163_6 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA163_7 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA163_8 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case RECORD:
							{
							int LA163_9 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA163_10 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case POINTER:
							{
							int LA163_11 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case STRING:
							{
							int LA163_12 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TYPE:
							{
							int LA163_13 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA163_14 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA163_15 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA163_16 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA163_17 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA163_18 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA163_19 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case 200:
							{
							int LA163_20 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA163_21 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA163_22 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case AT2:
							{
							int LA163_23 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case 201:
							{
							int LA163_24 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case NOT:
							{
							int LA163_25 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case PLUS:
							{
							int LA163_26 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case MINUS:
							{
							int LA163_27 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA163_28 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA163_29 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA163_30 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case TRUE:
							{
							int LA163_31 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case FALSE:
							{
							int LA163_32 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case NIL:
							{
							int LA163_33 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case ControlString:
							{
							int LA163_34 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA163_35 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA163_36 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case DOT:
							{
							int LA163_37 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case LT:
							{
							int LA163_38 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA163_39 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA163_40 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA163_41 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA163_42 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
						case SEMI:
							{
							int LA163_43 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt163=1;
							}
							}
							break;
					}
					switch (alt163) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:81: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10534);
							customAttribute490=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute490.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10538);
					typeDecl491=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl491.getTree());

					char_literal492=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10540); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal492_tree = (Object)adaptor.create(char_literal492);
					adaptor.addChild(root_0, char_literal492_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:112: ( functionDirective )*
					loop164:
					while (true) {
						int alt164=2;
						alt164 = dfa164.predict(input);
						switch (alt164) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:113: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10543);
							functionDirective493=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective493.getTree());

							}
							break;

						default :
							break loop164;
						}
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:32: 'function' ident ( formalParameterSection )? ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal494=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_exportedProcHeading10578); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal494_tree = (Object)adaptor.create(string_literal494);
					adaptor.addChild(root_0, string_literal494_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10580);
					ident495=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident495.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:49: ( formalParameterSection )?
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==LPAREN) ) {
						alt165=1;
					}
					switch (alt165) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:50: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10583);
							formalParameterSection496=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection496.getTree());

							}
							break;

					}

					char_literal497=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10587); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal497_tree = (Object)adaptor.create(char_literal497);
					adaptor.addChild(root_0, char_literal497_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:79: ( functionDirective )*
					loop166:
					while (true) {
						int alt166=2;
						alt166 = dfa166.predict(input);
						switch (alt166) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:80: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10590);
							functionDirective498=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective498.getTree());

							}
							break;

						default :
							break loop166;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, exportedProcHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportedProcHeading"


	public static class methodDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:1: methodDecl : methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? ;
	public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
		DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
		retval.start = input.LT(1);
		int methodDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal500=null;
		ParserRuleReturnScope methodDeclHeading499 =null;
		ParserRuleReturnScope methodDirective501 =null;
		ParserRuleReturnScope methodBody502 =null;

		Object char_literal500_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_methodDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclHeading");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:30: ( methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: methodDeclHeading ';' ( methodDirective )* ( methodBody )?
			{
			pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10647);
			methodDeclHeading499=methodDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDeclHeading.add(methodDeclHeading499.getTree());
			char_literal500=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDecl10649); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal500);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:54: ( methodDirective )*
			loop168:
			while (true) {
				int alt168=2;
				alt168 = dfa168.predict(input);
				switch (alt168) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:55: methodDirective
					{
					pushFollow(FOLLOW_methodDirective_in_methodDecl10652);
					methodDirective501=methodDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective501.getTree());
					}
					break;

				default :
					break loop168;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:73: ( methodBody )?
			int alt169=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA169_1 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA169_2 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case TYPE:
					{
					int LA169_3 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA169_4 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA169_5 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA169_6 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA169_7 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case CLASS:
					{
					int LA169_8 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA169_9 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA169_10 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA169_11 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case ASM:
					{
					int LA169_12 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
				case SEMI:
					{
					int LA169_13 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt169=1;
					}
					}
					break;
			}
			switch (alt169) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:74: methodBody
					{
					pushFollow(FOLLOW_methodBody_in_methodDecl10657);
					methodBody502=methodBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodBody.add(methodBody502.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: methodBody, methodDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 409:87: -> methodDeclHeading ( methodBody )?
			{
				adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:108: ( methodBody )?
				if ( stream_methodBody.hasNext() ) {
					adaptor.addChild(root_0, stream_methodBody.nextTree());
				}
				stream_methodBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, methodDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDecl"


	public static class methodDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDeclHeading"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
	public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
		DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
		retval.start = input.LT(1);
		int methodDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal504=null;
		Token string_literal509=null;
		Token string_literal510=null;
		Token char_literal513=null;
		Token string_literal517=null;
		Token string_literal518=null;
		Token char_literal521=null;
		ParserRuleReturnScope customAttribute503 =null;
		ParserRuleReturnScope methodKey505 =null;
		ParserRuleReturnScope methodName506 =null;
		ParserRuleReturnScope formalParameterSection507 =null;
		ParserRuleReturnScope customAttribute508 =null;
		ParserRuleReturnScope methodName511 =null;
		ParserRuleReturnScope formalParameterSection512 =null;
		ParserRuleReturnScope customAttribute514 =null;
		ParserRuleReturnScope typeDecl515 =null;
		ParserRuleReturnScope customAttribute516 =null;
		ParserRuleReturnScope methodName519 =null;
		ParserRuleReturnScope formalParameterSection520 =null;
		ParserRuleReturnScope customAttribute522 =null;
		ParserRuleReturnScope typeDecl523 =null;

		Object string_literal504_tree=null;
		Object string_literal509_tree=null;
		Object string_literal510_tree=null;
		Object char_literal513_tree=null;
		Object string_literal517_tree=null;
		Object string_literal518_tree=null;
		Object char_literal521_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodName=new RewriteRuleSubtreeStream(adaptor,"rule methodName");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
			int alt182=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA182_1 = input.LA(2);
				if ( (synpred240_Delphi()) ) {
					alt182=1;
				}
				else if ( (synpred246_Delphi()) ) {
					alt182=2;
				}
				else if ( (true) ) {
					alt182=3;
				}

				}
				break;
			case CLASS:
				{
				int LA182_2 = input.LA(2);
				if ( (synpred240_Delphi()) ) {
					alt182=1;
				}
				else if ( (synpred246_Delphi()) ) {
					alt182=2;
				}
				else if ( (true) ) {
					alt182=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt182=1;
				}
				break;
			case FUNCTION:
				{
				alt182=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 182, 0, input);
				throw nvae;
			}
			switch (alt182) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )?
					int alt170=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt170=1;
							}
							break;
						case CLASS:
							{
							int LA170_2 = input.LA(2);
							if ( (synpred237_Delphi()) ) {
								alt170=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA170_3 = input.LA(2);
							if ( (synpred237_Delphi()) ) {
								alt170=1;
							}
							}
							break;
					}
					switch (alt170) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10717);
							customAttribute503=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute503.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:51: ( 'class' )?
					int alt171=2;
					int LA171_0 = input.LA(1);
					if ( (LA171_0==CLASS) ) {
						alt171=1;
					}
					switch (alt171) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: 'class'
							{
							string_literal504=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10722); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal504);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_methodDeclHeading10727);
					methodKey505=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey505.getTree());
					pushFollow(FOLLOW_methodName_in_methodDeclHeading10729);
					methodName506=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName506.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:84: ( formalParameterSection )?
					int alt172=2;
					int LA172_0 = input.LA(1);
					if ( (LA172_0==LPAREN) ) {
						alt172=1;
					}
					switch (alt172) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10732);
							formalParameterSection507=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection507.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: formalParameterSection, CLASS, customAttribute, methodName, methodKey
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 412:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )?
					int alt173=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt173=1;
							}
							break;
						case CLASS:
							{
							int LA173_2 = input.LA(2);
							if ( (synpred241_Delphi()) ) {
								alt173=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA173_3 = input.LA(2);
							if ( (synpred241_Delphi()) ) {
								alt173=1;
							}
							}
							break;
					}
					switch (alt173) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10830);
							customAttribute508=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute508.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:51: ( 'class' )?
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==CLASS) ) {
						alt174=1;
					}
					switch (alt174) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:52: 'class'
							{
							string_literal509=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10835); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal509);

							}
							break;

					}

					string_literal510=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDeclHeading10839); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal510);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10841);
					methodName511=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName511.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:84: ( formalParameterSection )?
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==LPAREN) ) {
						alt175=1;
					}
					switch (alt175) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10844);
							formalParameterSection512=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection512.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:110: ( ':' ( customAttribute )? typeDecl )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==COLON) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:111: ':' ( customAttribute )? typeDecl
							{
							char_literal513=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10849); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal513);

							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:115: ( customAttribute )?
							int alt176=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA176_1 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case PACKED:
									{
									int LA176_2 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA176_3 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case SET:
									{
									int LA176_4 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case FILE:
									{
									int LA176_5 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case CLASS:
									{
									int LA176_6 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA176_7 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA176_8 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case RECORD:
									{
									int LA176_9 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA176_10 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case POINTER:
									{
									int LA176_11 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case STRING:
									{
									int LA176_12 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TYPE:
									{
									int LA176_13 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA176_14 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA176_15 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA176_16 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA176_17 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA176_18 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA176_19 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case 200:
									{
									int LA176_20 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STORED:
								case STRICT:
								case WRITE:
									{
									int LA176_21 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA176_22 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case AT2:
									{
									int LA176_23 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case 201:
									{
									int LA176_24 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case NOT:
									{
									int LA176_25 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case PLUS:
									{
									int LA176_26 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case MINUS:
									{
									int LA176_27 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA176_28 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA176_29 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TkAsmHexNum:
									{
									int LA176_30 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case TRUE:
									{
									int LA176_31 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case FALSE:
									{
									int LA176_32 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case NIL:
									{
									int LA176_33 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case ControlString:
									{
									int LA176_34 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA176_35 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA176_36 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case DOT:
									{
									int LA176_37 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case LT:
									{
									int LA176_38 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA176_39 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA176_40 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA176_41 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA176_42 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
								case SEMI:
									{
									int LA176_43 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt176=1;
									}
									}
									break;
							}
							switch (alt176) {
								case 1 :
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:116: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10852);
									customAttribute514=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute514.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10856);
							typeDecl515=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl515.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: methodName, CLASS, FUNCTION, formalParameterSection, customAttribute, customAttribute, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 414:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:168: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:187: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:32: ( customAttribute )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==LBRACK) ) {
						alt178=1;
					}
					else if ( (LA178_0==CLASS) ) {
						int LA178_2 = input.LA(2);
						if ( (synpred247_Delphi()) ) {
							alt178=1;
						}
					}
					switch (alt178) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10965);
							customAttribute516=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute516.getTree());
							}
							break;

					}

					string_literal517=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10969); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal517);

					string_literal518=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_methodDeclHeading10971); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal518);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10973);
					methodName519=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName519.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:81: ( formalParameterSection )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==LPAREN) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:82: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10976);
							formalParameterSection520=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection520.getTree());
							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:107: ( ':' ( customAttribute )? typeDecl )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==COLON) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:108: ':' ( customAttribute )? typeDecl
							{
							char_literal521=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10981); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal521);

							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:112: ( customAttribute )?
							int alt180=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA180_1 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case PACKED:
									{
									int LA180_2 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA180_3 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case SET:
									{
									int LA180_4 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case FILE:
									{
									int LA180_5 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case CLASS:
									{
									int LA180_6 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA180_7 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA180_8 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case RECORD:
									{
									int LA180_9 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA180_10 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case POINTER:
									{
									int LA180_11 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case STRING:
									{
									int LA180_12 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TYPE:
									{
									int LA180_13 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA180_14 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA180_15 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA180_16 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA180_17 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA180_18 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA180_19 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case 200:
									{
									int LA180_20 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STORED:
								case STRICT:
								case WRITE:
									{
									int LA180_21 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA180_22 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case AT2:
									{
									int LA180_23 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case 201:
									{
									int LA180_24 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case NOT:
									{
									int LA180_25 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case PLUS:
									{
									int LA180_26 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case MINUS:
									{
									int LA180_27 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA180_28 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA180_29 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TkAsmHexNum:
									{
									int LA180_30 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case TRUE:
									{
									int LA180_31 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case FALSE:
									{
									int LA180_32 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case NIL:
									{
									int LA180_33 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case ControlString:
									{
									int LA180_34 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA180_35 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA180_36 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case DOT:
									{
									int LA180_37 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case LT:
									{
									int LA180_38 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA180_39 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA180_40 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA180_41 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA180_42 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
								case SEMI:
									{
									int LA180_43 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt180=1;
									}
									}
									break;
							}
							switch (alt180) {
								case 1 :
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:113: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10984);
									customAttribute522=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute522.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10988);
							typeDecl523=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl523.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: OPERATOR, typeDecl, formalParameterSection, methodName, CLASS, customAttribute, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 416:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:73: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:102: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:119: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:184: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, methodDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDeclHeading"


	public static class methodKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodKey"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
	public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
		DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
		retval.start = input.LT(1);
		int methodKey_StartIndex = input.index();

		Object root_0 = null;

		Token set524=null;

		Object set524_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:30: ( 'procedure' | 'constructor' | 'destructor' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set524=input.LT(1);
			if ( input.LA(1)==CONSTRUCTOR||input.LA(1)==DESTRUCTOR||input.LA(1)==PROCEDURE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set524));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, methodKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodKey"


	public static class methodName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodName"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? ;
	public final DelphiParser.methodName_return methodName() throws RecognitionException {
		DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
		retval.start = input.LT(1);
		int methodName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal527=null;
		Token char_literal530=null;
		ParserRuleReturnScope ident525 =null;
		ParserRuleReturnScope genericDefinition526 =null;
		ParserRuleReturnScope ident528 =null;
		ParserRuleReturnScope genericDefinition529 =null;
		ParserRuleReturnScope ident531 =null;
		ParserRuleReturnScope genericDefinition532 =null;

		Object char_literal527_tree=null;
		Object char_literal530_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_methodName11237);
			ident525=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident525.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:38: ( genericDefinition )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==LT) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:39: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11240);
					genericDefinition526=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition526.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:59: ( '.' ident ( genericDefinition )? )?
			int alt185=2;
			alt185 = dfa185.predict(input);
			switch (alt185) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:60: '.' ident ( genericDefinition )?
					{
					char_literal527=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal527_tree = (Object)adaptor.create(char_literal527);
					adaptor.addChild(root_0, char_literal527_tree);
					}

					pushFollow(FOLLOW_ident_in_methodName11247);
					ident528=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident528.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:70: ( genericDefinition )?
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==LT) ) {
						alt184=1;
					}
					switch (alt184) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:71: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_methodName11250);
							genericDefinition529=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition529.getTree());

							}
							break;

					}

					}
					break;

			}

			char_literal530=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11256); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal530_tree = (Object)adaptor.create(char_literal530);
			adaptor.addChild(root_0, char_literal530_tree);
			}

			pushFollow(FOLLOW_ident_in_methodName11258);
			ident531=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident531.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:103: ( genericDefinition )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==LT) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:104: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11261);
					genericDefinition532=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition532.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, methodName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodName"


	public static class procDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:1: procDecl : procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? ;
	public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
		DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
		retval.start = input.LT(1);
		int procDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal534=null;
		ParserRuleReturnScope procDeclHeading533 =null;
		ParserRuleReturnScope functionDirective535 =null;
		ParserRuleReturnScope procBody536 =null;

		Object char_literal534_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_procDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule procDeclHeading");
		RewriteRuleSubtreeStream stream_functionDirective=new RewriteRuleSubtreeStream(adaptor,"rule functionDirective");
		RewriteRuleSubtreeStream stream_procBody=new RewriteRuleSubtreeStream(adaptor,"rule procBody");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:30: ( procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: procDeclHeading ';' ( functionDirective )* ( procBody )?
			{
			pushFollow(FOLLOW_procDeclHeading_in_procDecl11320);
			procDeclHeading533=procDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procDeclHeading.add(procDeclHeading533.getTree());
			char_literal534=(Token)match(input,SEMI,FOLLOW_SEMI_in_procDecl11322); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal534);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:52: ( functionDirective )*
			loop187:
			while (true) {
				int alt187=2;
				alt187 = dfa187.predict(input);
				switch (alt187) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:53: functionDirective
					{
					pushFollow(FOLLOW_functionDirective_in_procDecl11325);
					functionDirective535=functionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_functionDirective.add(functionDirective535.getTree());
					}
					break;

				default :
					break loop187;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:73: ( procBody )?
			int alt188=2;
			switch ( input.LA(1) ) {
				case FORWARD:
					{
					alt188=1;
					}
					break;
				case EXTERNAL:
					{
					int LA188_2 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case LABEL:
					{
					int LA188_3 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA188_4 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case TYPE:
					{
					int LA188_5 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA188_6 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA188_7 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA188_8 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA188_9 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case CLASS:
					{
					int LA188_10 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA188_11 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA188_12 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA188_13 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case ASM:
					{
					int LA188_14 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case SEMI:
					{
					int LA188_15 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt188=1;
					}
					}
					break;
			}
			switch (alt188) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:74: procBody
					{
					pushFollow(FOLLOW_procBody_in_procDecl11330);
					procBody536=procBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_procBody.add(procBody536.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: procDeclHeading, procBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 424:85: -> procDeclHeading ( procBody )?
			{
				adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:104: ( procBody )?
				if ( stream_procBody.hasNext() ) {
					adaptor.addChild(root_0, stream_procBody.nextTree());
				}
				stream_procBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, procDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDecl"


	public static class procDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDeclHeading"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) );
	public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
		DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
		retval.start = input.LT(1);
		int procDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal538=null;
		Token string_literal542=null;
		Token char_literal545=null;
		ParserRuleReturnScope customAttribute537 =null;
		ParserRuleReturnScope ident539 =null;
		ParserRuleReturnScope formalParameterSection540 =null;
		ParserRuleReturnScope customAttribute541 =null;
		ParserRuleReturnScope ident543 =null;
		ParserRuleReturnScope formalParameterSection544 =null;
		ParserRuleReturnScope typeDecl546 =null;

		Object string_literal538_tree=null;
		Object string_literal542_tree=null;
		Object char_literal545_tree=null;
		RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) )
			int alt193=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA193_1 = input.LA(2);
				if ( (synpred261_Delphi()) ) {
					alt193=1;
				}
				else if ( (true) ) {
					alt193=2;
				}

				}
				break;
			case PROCEDURE:
				{
				alt193=1;
				}
				break;
			case FUNCTION:
				{
				alt193=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )?
					int alt189=2;
					int LA189_0 = input.LA(1);
					if ( (LA189_0==LBRACK) ) {
						alt189=1;
					}
					else if ( (LA189_0==PROCEDURE) ) {
						int LA189_2 = input.LA(2);
						if ( (synpred259_Delphi()) ) {
							alt189=1;
						}
					}
					switch (alt189) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11396);
							customAttribute537=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute537.getTree());
							}
							break;

					}

					string_literal538=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procDeclHeading11400); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PROCEDURE.add(string_literal538);

					pushFollow(FOLLOW_ident_in_procDeclHeading11402);
					ident539=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident539.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:69: ( formalParameterSection )?
					int alt190=2;
					int LA190_0 = input.LA(1);
					if ( (LA190_0==LPAREN) ) {
						alt190=1;
					}
					switch (alt190) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:70: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11405);
							formalParameterSection540=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection540.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: PROCEDURE, ident, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 427:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:47: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:71: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:88: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:32: ( customAttribute )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==LBRACK) ) {
						alt191=1;
					}
					else if ( (LA191_0==FUNCTION) ) {
						int LA191_2 = input.LA(2);
						if ( (synpred262_Delphi()) ) {
							alt191=1;
						}
					}
					switch (alt191) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11505);
							customAttribute541=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute541.getTree());
							}
							break;

					}

					string_literal542=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procDeclHeading11509); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal542);

					pushFollow(FOLLOW_ident_in_procDeclHeading11511);
					ident543=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident543.getTree());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:68: ( formalParameterSection )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==LPAREN) ) {
						alt192=1;
					}
					switch (alt192) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:69: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11514);
							formalParameterSection544=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection544.getTree());
							}
							break;

					}

					char_literal545=(Token)match(input,COLON,FOLLOW_COLON_in_procDeclHeading11518); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal545);

					pushFollow(FOLLOW_typeDecl_in_procDeclHeading11520);
					typeDecl546=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl546.getTree());
					// AST REWRITE
					// elements: FUNCTION, ident, typeDecl, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 429:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:46: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:70: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:87: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:114: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, procDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDeclHeading"


	public static class formalParameterSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
	public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
		DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
		retval.start = input.LT(1);
		int formalParameterSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal547=null;
		Token char_literal549=null;
		ParserRuleReturnScope formalParameterList548 =null;

		Object char_literal547_tree=null;
		Object char_literal549_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:32: '(' ( formalParameterList )? ')'
			{
			char_literal547=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterSection11620); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal547);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:36: ( formalParameterList )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==ADD||LA194_0==ANSISTRING||LA194_0==AT||LA194_0==BREAK||LA194_0==CONST||(LA194_0 >= CONTAINS && LA194_0 <= CONTINUE)||LA194_0==DEFAULT||LA194_0==EXIT||LA194_0==EXPORT||LA194_0==FINAL||LA194_0==IMPLEMENTS||LA194_0==INDEX||LA194_0==LBRACK||LA194_0==LOCAL||LA194_0==MESSAGE||LA194_0==NAME||LA194_0==OBJECT||LA194_0==OPERATOR||LA194_0==OUT||LA194_0==POINTER||(LA194_0 >= READ && LA194_0 <= READONLY)||(LA194_0 >= REFERENCE && LA194_0 <= REGISTER)||LA194_0==REMOVE||(LA194_0 >= STORED && LA194_0 <= STRING)||LA194_0==TkIdentifier||LA194_0==VAR||LA194_0==VARIANT||LA194_0==WRITE||LA194_0==200) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:37: formalParameterList
					{
					pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11623);
					formalParameterList548=formalParameterList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList548.getTree());
					}
					break;

			}

			char_literal549=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterSection11627); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal549);

			// AST REWRITE
			// elements: formalParameterList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 431:63: -> ( formalParameterList )?
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:66: ( formalParameterList )?
				if ( stream_formalParameterList.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameterList.nextTree());
				}
				stream_formalParameterList.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, formalParameterSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterSection"


	public static class formalParameterList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
	public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
		DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
		retval.start = input.LT(1);
		int formalParameterList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal551=null;
		ParserRuleReturnScope formalParameter550 =null;
		ParserRuleReturnScope formalParameter552 =null;

		Object char_literal551_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:32: formalParameter ( ';' formalParameter )*
			{
			pushFollow(FOLLOW_formalParameter_in_formalParameterList11680);
			formalParameter550=formalParameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter550.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:48: ( ';' formalParameter )*
			loop195:
			while (true) {
				int alt195=2;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==SEMI) ) {
					alt195=1;
				}

				switch (alt195) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:49: ';' formalParameter
					{
					char_literal551=(Token)match(input,SEMI,FOLLOW_SEMI_in_formalParameterList11683); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal551);

					pushFollow(FOLLOW_formalParameter_in_formalParameterList11685);
					formalParameter552=formalParameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter552.getTree());
					}
					break;

				default :
					break loop195;
				}
			}

			// AST REWRITE
			// elements: formalParameter, formalParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 433:71: -> formalParameter ( formalParameter )*
			{
				adaptor.addChild(root_0, stream_formalParameter.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:90: ( formalParameter )*
				while ( stream_formalParameter.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameter.nextTree());
				}
				stream_formalParameter.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, formalParameterList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterList"


	public static class formalParameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameter"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
	public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
		DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
		retval.start = input.LT(1);
		int formalParameter_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal556=null;
		Token char_literal558=null;
		ParserRuleReturnScope customAttribute553 =null;
		ParserRuleReturnScope parmType554 =null;
		ParserRuleReturnScope identListFlat555 =null;
		ParserRuleReturnScope typeDecl557 =null;
		ParserRuleReturnScope expression559 =null;

		Object char_literal556_tree=null;
		Object char_literal558_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parmType=new RewriteRuleSubtreeStream(adaptor,"rule parmType");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
			{
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:32: ( customAttribute )?
			int alt196=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt196=1;
					}
					break;
				case OUT:
					{
					int LA196_2 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt196=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA196_3 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt196=1;
					}
					}
					break;
				case 200:
					{
					int LA196_4 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt196=1;
					}
					}
					break;
				case CONST:
				case VAR:
					{
					int LA196_5 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt196=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA196_6 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt196=1;
					}
					}
					break;
			}
			switch (alt196) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_formalParameter11747);
					customAttribute553=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute553.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:51: ( parmType )?
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==OUT) ) {
				int LA197_1 = input.LA(2);
				if ( (LA197_1==ADD||LA197_1==ANSISTRING||LA197_1==AT||LA197_1==BREAK||(LA197_1 >= CONTAINS && LA197_1 <= CONTINUE)||LA197_1==DEFAULT||LA197_1==EXIT||LA197_1==EXPORT||LA197_1==FINAL||LA197_1==IMPLEMENTS||LA197_1==INDEX||LA197_1==LOCAL||LA197_1==MESSAGE||LA197_1==NAME||LA197_1==OBJECT||LA197_1==OPERATOR||LA197_1==OUT||LA197_1==POINTER||(LA197_1 >= READ && LA197_1 <= READONLY)||(LA197_1 >= REFERENCE && LA197_1 <= REGISTER)||LA197_1==REMOVE||(LA197_1 >= STORED && LA197_1 <= STRING)||LA197_1==TkIdentifier||LA197_1==VARIANT||LA197_1==WRITE||LA197_1==200) ) {
					alt197=1;
				}
			}
			else if ( (LA197_0==CONST||LA197_0==VAR) ) {
				alt197=1;
			}
			switch (alt197) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:52: parmType
					{
					pushFollow(FOLLOW_parmType_in_formalParameter11752);
					parmType554=parmType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parmType.add(parmType554.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_formalParameter11756);
			identListFlat555=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat555.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:77: ( ':' typeDecl )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==COLON) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:78: ':' typeDecl
					{
					char_literal556=(Token)match(input,COLON,FOLLOW_COLON_in_formalParameter11759); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal556);

					pushFollow(FOLLOW_typeDecl_in_formalParameter11761);
					typeDecl557=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl557.getTree());
					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:93: ( '=' expression )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==EQUAL) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:94: '=' expression
					{
					char_literal558=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_formalParameter11766); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(char_literal558);

					pushFollow(FOLLOW_expression_in_formalParameter11768);
					expression559=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression559.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identListFlat, customAttribute, parmType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 435:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:114: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:133: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:167: ^( TkVariableType ( typeDecl )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:184: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:195: ( ^( TkVariableParam parmType ) )?
				if ( stream_parmType.hasNext() ) {
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:195: ^( TkVariableParam parmType )
					{
					Object root_1 = (Object)adaptor.nil();
					root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
					adaptor.addChild(root_1, stream_parmType.nextTree());
					adaptor.addChild(root_0, root_1);
					}

				}
				stream_parmType.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, formalParameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameter"


	public static class parmType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parmType"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:1: parmType : ( 'const' | 'var' | 'out' );
	public final DelphiParser.parmType_return parmType() throws RecognitionException {
		DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
		retval.start = input.LT(1);
		int parmType_StartIndex = input.index();

		Object root_0 = null;

		Token set560=null;

		Object set560_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:30: ( 'const' | 'var' | 'out' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set560=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==OUT||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set560));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, parmType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parmType"


	public static class methodBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodBody"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:1: methodBody : block ';' -> block ;
	public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
		DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
		retval.start = input.LT(1);
		int methodBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal562=null;
		ParserRuleReturnScope block561 =null;

		Object char_literal562_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:30: ( block ';' -> block )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:32: block ';'
			{
			pushFollow(FOLLOW_block_in_methodBody11991);
			block561=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_block.add(block561.getTree());
			char_literal562=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodBody11993); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal562);

			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 442:42: -> block
			{
				adaptor.addChild(root_0, stream_block.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, methodBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodBody"


	public static class procBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procBody"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:1: procBody : ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' );
	public final DelphiParser.procBody_return procBody() throws RecognitionException {
		DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
		retval.start = input.LT(1);
		int procBody_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal563=null;
		Token char_literal564=null;
		Token string_literal566=null;
		Token string_literal567=null;
		Token string_literal569=null;
		Token char_literal573=null;
		ParserRuleReturnScope functionDirective565 =null;
		ParserRuleReturnScope expression568 =null;
		ParserRuleReturnScope expression570 =null;
		ParserRuleReturnScope functionDirective571 =null;
		ParserRuleReturnScope block572 =null;

		Object string_literal563_tree=null;
		Object char_literal564_tree=null;
		Object string_literal566_tree=null;
		Object string_literal567_tree=null;
		Object string_literal569_tree=null;
		Object char_literal573_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:30: ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' )
			int alt203=3;
			switch ( input.LA(1) ) {
			case FORWARD:
				{
				alt203=1;
				}
				break;
			case EXTERNAL:
				{
				alt203=2;
				}
				break;
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case RESOURCESTRING:
			case SEMI:
			case THREADVAR:
			case TYPE:
			case VAR:
				{
				alt203=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 203, 0, input);
				throw nvae;
			}
			switch (alt203) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:32: 'forward' ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal563=(Token)match(input,FORWARD,FOLLOW_FORWARD_in_procBody12054); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal563_tree = (Object)adaptor.create(string_literal563);
					adaptor.addChild(root_0, string_literal563_tree);
					}

					char_literal564=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12056); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal564_tree = (Object)adaptor.create(char_literal564);
					adaptor.addChild(root_0, char_literal564_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:46: ( functionDirective )*
					loop200:
					while (true) {
						int alt200=2;
						alt200 = dfa200.predict(input);
						switch (alt200) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:47: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12059);
							functionDirective565=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective565.getTree());

							}
							break;

						default :
							break loop200;
						}
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:32: 'external' ( 'name' expression | 'index' expression )* ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal566=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_procBody12097); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal566_tree = (Object)adaptor.create(string_literal566);
					adaptor.addChild(root_0, string_literal566_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:43: ( 'name' expression | 'index' expression )*
					loop201:
					while (true) {
						int alt201=3;
						int LA201_0 = input.LA(1);
						if ( (LA201_0==NAME) ) {
							int LA201_2 = input.LA(2);
							if ( (synpred274_Delphi()) ) {
								alt201=1;
							}

						}
						else if ( (LA201_0==INDEX) ) {
							int LA201_3 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt201=2;
							}

						}

						switch (alt201) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:44: 'name' expression
							{
							string_literal567=(Token)match(input,NAME,FOLLOW_NAME_in_procBody12100); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal567_tree = (Object)adaptor.create(string_literal567);
							adaptor.addChild(root_0, string_literal567_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12102);
							expression568=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());

							}
							break;
						case 2 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:64: 'index' expression
							{
							string_literal569=(Token)match(input,INDEX,FOLLOW_INDEX_in_procBody12106); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal569_tree = (Object)adaptor.create(string_literal569);
							adaptor.addChild(root_0, string_literal569_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12108);
							expression570=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression570.getTree());

							}
							break;

						default :
							break loop201;
						}
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:85: ( functionDirective )*
					loop202:
					while (true) {
						int alt202=2;
						switch ( input.LA(1) ) {
						case OVERLOAD:
							{
							int LA202_2 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case INLINE:
							{
							int LA202_3 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case ASSEMBLER:
							{
							int LA202_4 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case CDECL:
							{
							int LA202_5 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case PASCAL:
							{
							int LA202_6 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA202_7 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case SAFECALL:
							{
							int LA202_8 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case STDCALL:
							{
							int LA202_9 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA202_10 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case FAR:
							{
							int LA202_11 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA202_12 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case NEAR:
							{
							int LA202_13 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case DEPRECATED:
							{
							int LA202_14 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case EXPERIMENTAL:
							{
							int LA202_15 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case PLATFORM:
							{
							int LA202_16 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case LIBRARY:
							{
							int LA202_17 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA202_18 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case EXTERNAL:
							{
							int LA202_19 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						case UNSAFE:
							{
							int LA202_20 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt202=1;
							}

							}
							break;
						}
						switch (alt202) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:86: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12113);
							functionDirective571=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective571.getTree());

							}
							break;

						default :
							break loop202;
						}
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:446:32: block ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_block_in_procBody12149);
					block572=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block572.getTree());

					char_literal573=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12151); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal573_tree = (Object)adaptor.create(char_literal573);
					adaptor.addChild(root_0, char_literal573_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, procBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procBody"


	public static class customAttribute_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttribute"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:1: customAttribute : customAttributeList ;
	public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
		DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
		retval.start = input.LT(1);
		int customAttribute_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeList574 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:30: ( customAttributeList )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:32: customAttributeList
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_customAttributeList_in_customAttribute12204);
			customAttributeList574=customAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeList574.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, customAttribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttribute"


	public static class customAttributeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:1: customAttributeList : ( customAttributeDecl )* ;
	public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
		DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
		retval.start = input.LT(1);
		int customAttributeList_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeDecl575 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:30: ( ( customAttributeDecl )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:32: ( customAttributeDecl )*
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:32: ( customAttributeDecl )*
			loop204:
			while (true) {
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==LBRACK) ) {
					int LA204_2 = input.LA(2);
					if ( (synpred278_Delphi()) ) {
						alt204=1;
					}

				}

				switch (alt204) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:33: customAttributeDecl
					{
					pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12251);
					customAttributeDecl575=customAttributeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeDecl575.getTree());

					}
					break;

				default :
					break loop204;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, customAttributeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeList"


	public static class customAttributeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeDecl"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:1: customAttributeDecl : '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) ;
	public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
		DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
		retval.start = input.LT(1);
		int customAttributeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal576=null;
		Token char_literal578=null;
		Token char_literal580=null;
		Token char_literal581=null;
		ParserRuleReturnScope namespacedQualifiedIdent577 =null;
		ParserRuleReturnScope expressionList579 =null;

		Object char_literal576_tree=null;
		Object char_literal578_tree=null;
		Object char_literal580_tree=null;
		Object char_literal581_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_namespacedQualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule namespacedQualifiedIdent");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:30: ( '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:32: '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']'
			{
			char_literal576=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_customAttributeDecl12299); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal576);

			pushFollow(FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12301);
			namespacedQualifiedIdent577=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespacedQualifiedIdent.add(namespacedQualifiedIdent577.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:61: ( '(' ( expressionList )? ')' )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==LPAREN) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:62: '(' ( expressionList )? ')'
					{
					char_literal578=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_customAttributeDecl12304); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal578);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:66: ( expressionList )?
					int alt205=2;
					int LA205_0 = input.LA(1);
					if ( ((LA205_0 >= ADD && LA205_0 <= ANSISTRING)||LA205_0==AS||(LA205_0 >= AT && LA205_0 <= AT2)||LA205_0==BREAK||LA205_0==COMMA||(LA205_0 >= CONTAINS && LA205_0 <= ControlString)||LA205_0==DEFAULT||LA205_0==DIV||LA205_0==DOT||LA205_0==EQUAL||LA205_0==EXIT||LA205_0==EXPORT||LA205_0==FALSE||LA205_0==FINAL||(LA205_0 >= FUNCTION && LA205_0 <= GE)||LA205_0==GT||(LA205_0 >= IMPLEMENTS && LA205_0 <= INHERITED)||LA205_0==IS||LA205_0==LBRACK||LA205_0==LE||(LA205_0 >= LOCAL && LA205_0 <= NAME)||LA205_0==NIL||(LA205_0 >= NOT && LA205_0 <= OBJECT)||(LA205_0 >= OPERATOR && LA205_0 <= OUT)||(LA205_0 >= PLUS && LA205_0 <= POINTER2)||LA205_0==PROCEDURE||LA205_0==QuotedString||(LA205_0 >= READ && LA205_0 <= READONLY)||(LA205_0 >= REFERENCE && LA205_0 <= REGISTER)||LA205_0==REMOVE||(LA205_0 >= SHL && LA205_0 <= STAR)||(LA205_0 >= STORED && LA205_0 <= STRING)||LA205_0==TRUE||LA205_0==TkAsmHexNum||(LA205_0 >= TkHexNum && LA205_0 <= TkIntNum)||LA205_0==TkRealNum||LA205_0==VARIANT||LA205_0==WRITE||(LA205_0 >= XOR && LA205_0 <= 201)) ) {
						alt205=1;
					}
					else if ( (LA205_0==RPAREN) ) {
						int LA205_2 = input.LA(2);
						if ( (synpred279_Delphi()) ) {
							alt205=1;
						}
					}
					switch (alt205) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:67: expressionList
							{
							pushFollow(FOLLOW_expressionList_in_customAttributeDecl12307);
							expressionList579=expressionList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expressionList.add(expressionList579.getTree());
							}
							break;

					}

					char_literal580=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_customAttributeDecl12311); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal580);

					}
					break;

			}

			char_literal581=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_customAttributeDecl12315); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal581);

			// AST REWRITE
			// elements: RPAREN, namespacedQualifiedIdent, LBRACK, expressionList, RBRACK, LPAREN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 455:95: -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:98: ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
				adaptor.addChild(root_1, stream_LBRACK.nextNode());
				adaptor.addChild(root_1, stream_namespacedQualifiedIdent.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:147: ( '(' ( expressionList )? ')' )?
				if ( stream_RPAREN.hasNext()||stream_expressionList.hasNext()||stream_LPAREN.hasNext() ) {
					adaptor.addChild(root_1, stream_LPAREN.nextNode());
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:152: ( expressionList )?
					if ( stream_expressionList.hasNext() ) {
						adaptor.addChild(root_1, stream_expressionList.nextTree());
					}
					stream_expressionList.reset();

					adaptor.addChild(root_1, stream_RPAREN.nextNode());
				}
				stream_RPAREN.reset();
				stream_expressionList.reset();
				stream_LPAREN.reset();

				adaptor.addChild(root_1, stream_RBRACK.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, customAttributeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeDecl"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? );
	public final DelphiParser.expression_return expression() throws RecognitionException {
		DelphiParser.expression_return retval = new DelphiParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal586=null;
		ParserRuleReturnScope anonymousExpression582 =null;
		ParserRuleReturnScope simpleExpression583 =null;
		ParserRuleReturnScope relOp584 =null;
		ParserRuleReturnScope simpleExpression585 =null;
		ParserRuleReturnScope expression587 =null;

		Object char_literal586_tree=null;
		RewriteRuleSubtreeStream stream_anonymousExpression=new RewriteRuleSubtreeStream(adaptor,"rule anonymousExpression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? )
			int alt209=2;
			switch ( input.LA(1) ) {
			case PROCEDURE:
				{
				int LA209_1 = input.LA(2);
				if ( (synpred281_Delphi()) ) {
					alt209=1;
				}
				else if ( (true) ) {
					alt209=2;
				}

				}
				break;
			case FUNCTION:
				{
				int LA209_2 = input.LA(2);
				if ( (synpred281_Delphi()) ) {
					alt209=1;
				}
				else if ( (true) ) {
					alt209=2;
				}

				}
				break;
			case EOF:
			case ABSOLUTE:
			case ADD:
			case AND:
			case ANSISTRING:
			case AS:
			case ASM:
			case ASSEMBLER:
			case AT:
			case AT2:
			case AUTOMATED:
			case BEGIN:
			case BREAK:
			case CASE:
			case CDECL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONST:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case ControlString:
			case DEFAULT:
			case DEPRECATED:
			case DESTRUCTOR:
			case DISPID:
			case DIV:
			case DO:
			case DOT:
			case DOTDOT:
			case DOWNTO:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case EXIT:
			case EXPERIMENTAL:
			case EXPORT:
			case EXPORTS:
			case EXTERNAL:
			case FALSE:
			case FAR:
			case FINAL:
			case FINALIZATION:
			case FINALLY:
			case GE:
			case GT:
			case IMPLEMENTATION:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case INHERITED:
			case INITIALIZATION:
			case INLINE:
			case IS:
			case LABEL:
			case LBRACK:
			case LE:
			case LIBRARY:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case MINUS:
			case MOD:
			case NAME:
			case NEAR:
			case NIL:
			case NODEFAULT:
			case NOT:
			case NOT_EQUAL:
			case OBJECT:
			case OF:
			case ON:
			case OPERATOR:
			case OR:
			case OUT:
			case OVERLOAD:
			case PASCAL:
			case PLATFORM:
			case PLUS:
			case POINTER:
			case POINTER2:
			case PRIVATE:
			case PROPERTY:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case QuotedString:
			case RBRACK:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case RESIDENT:
			case RESOURCESTRING:
			case RPAREN:
			case SAFECALL:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case STDCALL:
			case STORED:
			case STRICT:
			case STRING:
			case THEN:
			case THREADVAR:
			case TO:
			case TRUE:
			case TYPE:
			case TkAsmHexNum:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case UNSAFE:
			case UNTIL:
			case VAR:
			case VARARGS:
			case VARIANT:
			case WRITE:
			case WRITEONLY:
			case XOR:
			case 200:
			case 201:
				{
				alt209=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				throw nvae;
			}
			switch (alt209) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: anonymousExpression
					{
					pushFollow(FOLLOW_anonymousExpression_in_expression12399);
					anonymousExpression582=anonymousExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_anonymousExpression.add(anonymousExpression582.getTree());
					// AST REWRITE
					// elements: anonymousExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 461:52: -> ^( TkAnonymousExpression anonymousExpression )
					{
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:55: ^( TkAnonymousExpression anonymousExpression )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
						adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:32: simpleExpression ( relOp simpleExpression )? ( '=' expression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleExpression_in_expression12440);
					simpleExpression583=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression583.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:49: ( relOp simpleExpression )?
					int alt207=2;
					switch ( input.LA(1) ) {
						case EQUAL:
							{
							int LA207_1 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt207=1;
							}
							}
							break;
						case LT:
							{
							int LA207_2 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt207=1;
							}
							}
							break;
						case GT:
							{
							int LA207_4 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt207=1;
							}
							}
							break;
						case GE:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA207_5 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt207=1;
							}
							}
							break;
					}
					switch (alt207) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:50: relOp simpleExpression
							{
							pushFollow(FOLLOW_relOp_in_expression12443);
							relOp584=relOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, relOp584.getTree());

							pushFollow(FOLLOW_simpleExpression_in_expression12445);
							simpleExpression585=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression585.getTree());

							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:75: ( '=' expression )?
					int alt208=2;
					int LA208_0 = input.LA(1);
					if ( (LA208_0==EQUAL) ) {
						int LA208_1 = input.LA(2);
						if ( (synpred283_Delphi()) ) {
							alt208=1;
						}
					}
					switch (alt208) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:76: '=' expression
							{
							char_literal586=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_expression12450); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal586_tree = (Object)adaptor.create(char_literal586);
							adaptor.addChild(root_0, char_literal586_tree);
							}

							pushFollow(FOLLOW_expression_in_expression12452);
							expression587=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression587.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class anonymousExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "anonymousExpression"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
	public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
		DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
		retval.start = input.LT(1);
		int anonymousExpression_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal588=null;
		Token string_literal591=null;
		Token char_literal593=null;
		ParserRuleReturnScope formalParameterSection589 =null;
		ParserRuleReturnScope block590 =null;
		ParserRuleReturnScope formalParameterSection592 =null;
		ParserRuleReturnScope typeDecl594 =null;
		ParserRuleReturnScope block595 =null;

		Object string_literal588_tree=null;
		Object string_literal591_tree=null;
		Object char_literal593_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==PROCEDURE) ) {
				alt212=1;
			}
			else if ( (LA212_0==FUNCTION) ) {
				alt212=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}

			switch (alt212) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:32: 'procedure' ( formalParameterSection )? block
					{
					root_0 = (Object)adaptor.nil();


					string_literal588=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_anonymousExpression12503); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal588_tree = (Object)adaptor.create(string_literal588);
					adaptor.addChild(root_0, string_literal588_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:44: ( formalParameterSection )?
					int alt210=2;
					alt210 = dfa210.predict(input);
					switch (alt210) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12506);
							formalParameterSection589=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection589.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_block_in_anonymousExpression12510);
					block590=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block590.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:32: 'function' ( formalParameterSection )? ':' typeDecl block
					{
					root_0 = (Object)adaptor.nil();


					string_literal591=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_anonymousExpression12543); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal591_tree = (Object)adaptor.create(string_literal591);
					adaptor.addChild(root_0, string_literal591_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:43: ( formalParameterSection )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==LPAREN) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12546);
							formalParameterSection592=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection592.getTree());

							}
							break;

					}

					char_literal593=(Token)match(input,COLON,FOLLOW_COLON_in_anonymousExpression12550); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal593_tree = (Object)adaptor.create(char_literal593);
					adaptor.addChild(root_0, char_literal593_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_anonymousExpression12552);
					typeDecl594=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl594.getTree());

					pushFollow(FOLLOW_block_in_anonymousExpression12554);
					block595=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block595.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, anonymousExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymousExpression"


	public static class simpleExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleExpression"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:1: simpleExpression : factor ( operator factor )* ;
	public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
		DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
		retval.start = input.LT(1);
		int simpleExpression_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor596 =null;
		ParserRuleReturnScope operator597 =null;
		ParserRuleReturnScope factor598 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:30: ( factor ( operator factor )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:32: factor ( operator factor )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_simpleExpression12603);
			factor596=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor596.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:39: ( operator factor )*
			loop213:
			while (true) {
				int alt213=2;
				switch ( input.LA(1) ) {
				case PLUS:
					{
					int LA213_2 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt213=1;
					}

					}
					break;
				case MINUS:
					{
					int LA213_3 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt213=1;
					}

					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA213_4 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt213=1;
					}

					}
					break;
				}
				switch (alt213) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:40: operator factor
					{
					pushFollow(FOLLOW_operator_in_simpleExpression12606);
					operator597=operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, operator597.getTree());

					pushFollow(FOLLOW_factor_in_simpleExpression12608);
					factor598=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor598.getTree());

					}
					break;

				default :
					break loop213;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, simpleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpression"


	public static class factor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' );
	public final DelphiParser.factor_return factor() throws RecognitionException {
		DelphiParser.factor_return retval = new DelphiParser.factor_return();
		retval.start = input.LT(1);
		int factor_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal599=null;
		Token string_literal601=null;
		Token string_literal603=null;
		Token char_literal605=null;
		Token char_literal607=null;
		Token char_literal609=null;
		Token TkAsmHexNum613=null;
		Token string_literal614=null;
		Token string_literal615=null;
		Token string_literal616=null;
		Token char_literal617=null;
		Token char_literal619=null;
		Token char_literal620=null;
		Token char_literal621=null;
		Token char_literal627=null;
		Token char_literal629=null;
		ParserRuleReturnScope factor600 =null;
		ParserRuleReturnScope factor602 =null;
		ParserRuleReturnScope factor604 =null;
		ParserRuleReturnScope factor606 =null;
		ParserRuleReturnScope factor608 =null;
		ParserRuleReturnScope ident610 =null;
		ParserRuleReturnScope intNum611 =null;
		ParserRuleReturnScope realNum612 =null;
		ParserRuleReturnScope expression618 =null;
		ParserRuleReturnScope expression622 =null;
		ParserRuleReturnScope stringFactor623 =null;
		ParserRuleReturnScope setSection624 =null;
		ParserRuleReturnScope designator625 =null;
		ParserRuleReturnScope typeId626 =null;
		ParserRuleReturnScope expression628 =null;

		Object char_literal599_tree=null;
		Object string_literal601_tree=null;
		Object string_literal603_tree=null;
		Object char_literal605_tree=null;
		Object char_literal607_tree=null;
		Object char_literal609_tree=null;
		Object TkAsmHexNum613_tree=null;
		Object string_literal614_tree=null;
		Object string_literal615_tree=null;
		Object string_literal616_tree=null;
		Object char_literal617_tree=null;
		Object char_literal619_tree=null;
		Object char_literal620_tree=null;
		Object char_literal621_tree=null;
		Object char_literal627_tree=null;
		Object char_literal629_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:30: ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' )
			int alt216=17;
			alt216 = dfa216.predict(input);
			switch (alt216) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '@' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal599=(Token)match(input,AT2,FOLLOW_AT2_in_factor12669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal599_tree = (Object)adaptor.create(char_literal599);
					adaptor.addChild(root_0, char_literal599_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12671);
					factor600=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor600.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: '@@' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal601=(Token)match(input,201,FOLLOW_201_in_factor12704); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal601_tree = (Object)adaptor.create(string_literal601);
					adaptor.addChild(root_0, string_literal601_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12706);
					factor602=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor602.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: 'not' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal603=(Token)match(input,NOT,FOLLOW_NOT_in_factor12746); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal603_tree = (Object)adaptor.create(string_literal603);
					adaptor.addChild(root_0, string_literal603_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12748);
					factor604=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor604.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: '+' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal605=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor12781); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal605_tree = (Object)adaptor.create(char_literal605);
					adaptor.addChild(root_0, char_literal605_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12783);
					factor606=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor606.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: '-' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal607=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor12816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal607_tree = (Object)adaptor.create(char_literal607);
					adaptor.addChild(root_0, char_literal607_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12818);
					factor608=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor608.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: '^' ident
					{
					root_0 = (Object)adaptor.nil();


					char_literal609=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor12851); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal609_tree = (Object)adaptor.create(char_literal609);
					adaptor.addChild(root_0, char_literal609_tree);
					}

					pushFollow(FOLLOW_ident_in_factor12853);
					ident610=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident610.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: intNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intNum_in_factor12897);
					intNum611=intNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum611.getTree());

					}
					break;
				case 8 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: realNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_realNum_in_factor12930);
					realNum612=realNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, realNum612.getTree());

					}
					break;
				case 9 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: TkAsmHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkAsmHexNum613=(Token)match(input,TkAsmHexNum,FOLLOW_TkAsmHexNum_in_factor12963); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkAsmHexNum613_tree = (Object)adaptor.create(TkAsmHexNum613);
					adaptor.addChild(root_0, TkAsmHexNum613_tree);
					}

					}
					break;
				case 10 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: 'true'
					{
					root_0 = (Object)adaptor.nil();


					string_literal614=(Token)match(input,TRUE,FOLLOW_TRUE_in_factor13006); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal614_tree = (Object)adaptor.create(string_literal614);
					adaptor.addChild(root_0, string_literal614_tree);
					}

					}
					break;
				case 11 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: 'false'
					{
					root_0 = (Object)adaptor.nil();


					string_literal615=(Token)match(input,FALSE,FOLLOW_FALSE_in_factor13039); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal615_tree = (Object)adaptor.create(string_literal615);
					adaptor.addChild(root_0, string_literal615_tree);
					}

					}
					break;
				case 12 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: 'nil'
					{
					root_0 = (Object)adaptor.nil();


					string_literal616=(Token)match(input,NIL,FOLLOW_NIL_in_factor13072); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal616_tree = (Object)adaptor.create(string_literal616);
					adaptor.addChild(root_0, string_literal616_tree);
					}

					}
					break;
				case 13 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '(' expression ')' ( '^' )? ( '.' expression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13105); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal617_tree = (Object)adaptor.create(char_literal617);
					adaptor.addChild(root_0, char_literal617_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13107);
					expression618=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression618.getTree());

					char_literal619=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13109); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal619_tree = (Object)adaptor.create(char_literal619);
					adaptor.addChild(root_0, char_literal619_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:51: ( '^' )?
					int alt214=2;
					int LA214_0 = input.LA(1);
					if ( (LA214_0==POINTER2) ) {
						int LA214_1 = input.LA(2);
						if ( (synpred300_Delphi()) ) {
							alt214=1;
						}
					}
					switch (alt214) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:52: '^'
							{
							char_literal620=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor13112); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal620_tree = (Object)adaptor.create(char_literal620);
							adaptor.addChild(root_0, char_literal620_tree);
							}

							}
							break;

					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:58: ( '.' expression )?
					int alt215=2;
					int LA215_0 = input.LA(1);
					if ( (LA215_0==DOT) ) {
						switch ( input.LA(2) ) {
							case ABSOLUTE:
							case AND:
							case AS:
							case ASM:
							case ASSEMBLER:
							case AT2:
							case AUTOMATED:
							case BEGIN:
							case CASE:
							case CDECL:
							case CLASS:
							case COLON:
							case COMMA:
							case CONST:
							case CONSTRUCTOR:
							case ControlString:
							case DEPRECATED:
							case DESTRUCTOR:
							case DISPID:
							case DIV:
							case DO:
							case DOT:
							case DOTDOT:
							case DOWNTO:
							case ELSE:
							case END:
							case EQUAL:
							case EXCEPT:
							case EXPERIMENTAL:
							case EXPORTS:
							case EXTERNAL:
							case FALSE:
							case FAR:
							case FINALIZATION:
							case FINALLY:
							case FUNCTION:
							case GE:
							case GT:
							case IMPLEMENTATION:
							case IN:
							case INHERITED:
							case INITIALIZATION:
							case INLINE:
							case IS:
							case LABEL:
							case LBRACK:
							case LE:
							case LIBRARY:
							case LPAREN:
							case LT:
							case MINUS:
							case MOD:
							case NEAR:
							case NIL:
							case NODEFAULT:
							case NOT:
							case NOT_EQUAL:
							case OF:
							case ON:
							case OR:
							case OVERLOAD:
							case PASCAL:
							case PLATFORM:
							case PLUS:
							case POINTER2:
							case PRIVATE:
							case PROCEDURE:
							case PROPERTY:
							case PROTECTED:
							case PUBLIC:
							case PUBLISHED:
							case QuotedString:
							case RBRACK:
							case RESIDENT:
							case RESOURCESTRING:
							case RPAREN:
							case SAFECALL:
							case SEMI:
							case SHL:
							case SHR:
							case SLASH:
							case STAR:
							case STDCALL:
							case THEN:
							case THREADVAR:
							case TO:
							case TRUE:
							case TYPE:
							case TkAsmHexNum:
							case TkHexNum:
							case TkIntNum:
							case TkRealNum:
							case UNSAFE:
							case UNTIL:
							case VAR:
							case VARARGS:
							case WRITEONLY:
							case XOR:
							case 201:
								{
								alt215=1;
								}
								break;
							case TkIdentifier:
								{
								int LA215_4 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case 200:
								{
								int LA215_5 = input.LA(3);
								if ( (LA215_5==TkIdentifier) ) {
									int LA215_21 = input.LA(4);
									if ( (synpred301_Delphi()) ) {
										alt215=1;
									}
								}
								}
								break;
							case NAME:
								{
								int LA215_6 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case READ:
								{
								int LA215_7 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case EOF:
								{
								alt215=1;
								}
								break;
							case WRITE:
								{
								int LA215_9 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case READONLY:
								{
								int LA215_10 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case STORED:
								{
								int LA215_11 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case DEFAULT:
								{
								int LA215_12 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case IMPLEMENTS:
								{
								int LA215_13 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case REGISTER:
								{
								int LA215_14 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case EXPORT:
								{
								int LA215_15 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case LOCAL:
								{
								int LA215_16 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case INDEX:
								{
								int LA215_17 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case STRICT:
								{
								int LA215_18 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case OPERATOR:
								{
								int LA215_19 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
							case ADD:
							case ANSISTRING:
							case AT:
							case BREAK:
							case CONTAINS:
							case CONTINUE:
							case EXIT:
							case FINAL:
							case MESSAGE:
							case OBJECT:
							case OUT:
							case POINTER:
							case REFERENCE:
							case REMOVE:
							case STRING:
							case VARIANT:
								{
								int LA215_20 = input.LA(3);
								if ( (synpred301_Delphi()) ) {
									alt215=1;
								}
								}
								break;
						}
					}
					switch (alt215) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:59: '.' expression
							{
							char_literal621=(Token)match(input,DOT,FOLLOW_DOT_in_factor13117); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal621_tree = (Object)adaptor.create(char_literal621);
							adaptor.addChild(root_0, char_literal621_tree);
							}

							pushFollow(FOLLOW_expression_in_factor13119);
							expression622=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression622.getTree());

							}
							break;

					}

					}
					break;
				case 14 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: stringFactor
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringFactor_in_factor13162);
					stringFactor623=stringFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor623.getTree());

					}
					break;
				case 15 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: setSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setSection_in_factor13195);
					setSection624=setSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setSection624.getTree());

					}
					break;
				case 16 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_factor13228);
					designator625=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator625.getTree());

					}
					break;
				case 17 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: typeId '(' expression ')'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_factor13261);
					typeId626=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId626.getTree());

					char_literal627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal627_tree = (Object)adaptor.create(char_literal627);
					adaptor.addChild(root_0, char_literal627_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13265);
					expression628=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression628.getTree());

					char_literal629=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13267); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal629_tree = (Object)adaptor.create(char_literal629);
					adaptor.addChild(root_0, char_literal629_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, factor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "factor"


	public static class stringFactor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringFactor"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:1: stringFactor : ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? );
	public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
		DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
		retval.start = input.LT(1);
		int stringFactor_StartIndex = input.index();

		Object root_0 = null;

		Token ControlString630=null;
		Token QuotedString631=null;
		Token ControlString632=null;
		Token QuotedString633=null;
		Token QuotedString634=null;
		Token ControlString635=null;
		Token QuotedString636=null;
		Token ControlString637=null;

		Object ControlString630_tree=null;
		Object QuotedString631_tree=null;
		Object ControlString632_tree=null;
		Object QuotedString633_tree=null;
		Object QuotedString634_tree=null;
		Object ControlString635_tree=null;
		Object QuotedString636_tree=null;
		Object ControlString637_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:30: ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? )
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==ControlString) ) {
				alt221=1;
			}
			else if ( (LA221_0==QuotedString) ) {
				alt221=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 221, 0, input);
				throw nvae;
			}

			switch (alt221) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: ControlString ( QuotedString ControlString )* ( QuotedString )?
					{
					root_0 = (Object)adaptor.nil();


					ControlString630=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13320); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ControlString630_tree = (Object)adaptor.create(ControlString630);
					adaptor.addChild(root_0, ControlString630_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:46: ( QuotedString ControlString )*
					loop217:
					while (true) {
						int alt217=2;
						int LA217_0 = input.LA(1);
						if ( (LA217_0==QuotedString) ) {
							int LA217_1 = input.LA(2);
							if ( (LA217_1==ControlString) ) {
								int LA217_3 = input.LA(3);
								if ( (synpred306_Delphi()) ) {
									alt217=1;
								}

							}

						}

						switch (alt217) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:47: QuotedString ControlString
							{
							QuotedString631=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13323); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString631_tree = (Object)adaptor.create(QuotedString631);
							adaptor.addChild(root_0, QuotedString631_tree);
							}

							ControlString632=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13325); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString632_tree = (Object)adaptor.create(ControlString632);
							adaptor.addChild(root_0, ControlString632_tree);
							}

							}
							break;

						default :
							break loop217;
						}
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:76: ( QuotedString )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==QuotedString) ) {
						int LA218_1 = input.LA(2);
						if ( (synpred307_Delphi()) ) {
							alt218=1;
						}
					}
					switch (alt218) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:77: QuotedString
							{
							QuotedString633=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13330); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString633_tree = (Object)adaptor.create(QuotedString633);
							adaptor.addChild(root_0, QuotedString633_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: QuotedString ( ControlString QuotedString )* ( ControlString )?
					{
					root_0 = (Object)adaptor.nil();


					QuotedString634=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13365); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QuotedString634_tree = (Object)adaptor.create(QuotedString634);
					adaptor.addChild(root_0, QuotedString634_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:45: ( ControlString QuotedString )*
					loop219:
					while (true) {
						int alt219=2;
						int LA219_0 = input.LA(1);
						if ( (LA219_0==ControlString) ) {
							int LA219_1 = input.LA(2);
							if ( (LA219_1==QuotedString) ) {
								int LA219_3 = input.LA(3);
								if ( (synpred309_Delphi()) ) {
									alt219=1;
								}

							}

						}

						switch (alt219) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:46: ControlString QuotedString
							{
							ControlString635=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13368); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString635_tree = (Object)adaptor.create(ControlString635);
							adaptor.addChild(root_0, ControlString635_tree);
							}

							QuotedString636=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13370); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString636_tree = (Object)adaptor.create(QuotedString636);
							adaptor.addChild(root_0, QuotedString636_tree);
							}

							}
							break;

						default :
							break loop219;
						}
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:75: ( ControlString )?
					int alt220=2;
					int LA220_0 = input.LA(1);
					if ( (LA220_0==ControlString) ) {
						int LA220_1 = input.LA(2);
						if ( (synpred310_Delphi()) ) {
							alt220=1;
						}
					}
					switch (alt220) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:76: ControlString
							{
							ControlString637=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13375); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString637_tree = (Object)adaptor.create(ControlString637);
							adaptor.addChild(root_0, ControlString637_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, stringFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringFactor"


	public static class setSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setSection"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:1: setSection : '[' ( expression ( ( ',' | '..' ) expression )* )? ']' ;
	public final DelphiParser.setSection_return setSection() throws RecognitionException {
		DelphiParser.setSection_return retval = new DelphiParser.setSection_return();
		retval.start = input.LT(1);
		int setSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal638=null;
		Token set640=null;
		Token char_literal642=null;
		ParserRuleReturnScope expression639 =null;
		ParserRuleReturnScope expression641 =null;

		Object char_literal638_tree=null;
		Object set640_tree=null;
		Object char_literal642_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:30: ( '[' ( expression ( ( ',' | '..' ) expression )* )? ']' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: '[' ( expression ( ( ',' | '..' ) expression )* )? ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal638=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_setSection13432); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal638_tree = (Object)adaptor.create(char_literal638);
			adaptor.addChild(root_0, char_literal638_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:36: ( expression ( ( ',' | '..' ) expression )* )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( ((LA223_0 >= ADD && LA223_0 <= ANSISTRING)||LA223_0==AS||(LA223_0 >= AT && LA223_0 <= AT2)||LA223_0==BREAK||LA223_0==COMMA||(LA223_0 >= CONTAINS && LA223_0 <= ControlString)||LA223_0==DEFAULT||LA223_0==DIV||(LA223_0 >= DOT && LA223_0 <= DOTDOT)||LA223_0==EQUAL||LA223_0==EXIT||LA223_0==EXPORT||LA223_0==FALSE||LA223_0==FINAL||(LA223_0 >= FUNCTION && LA223_0 <= GE)||LA223_0==GT||(LA223_0 >= IMPLEMENTS && LA223_0 <= INHERITED)||LA223_0==IS||LA223_0==LBRACK||LA223_0==LE||(LA223_0 >= LOCAL && LA223_0 <= NAME)||LA223_0==NIL||(LA223_0 >= NOT && LA223_0 <= OBJECT)||(LA223_0 >= OPERATOR && LA223_0 <= OUT)||(LA223_0 >= PLUS && LA223_0 <= POINTER2)||LA223_0==PROCEDURE||LA223_0==QuotedString||(LA223_0 >= READ && LA223_0 <= READONLY)||(LA223_0 >= REFERENCE && LA223_0 <= REGISTER)||LA223_0==REMOVE||(LA223_0 >= SHL && LA223_0 <= STAR)||(LA223_0 >= STORED && LA223_0 <= STRING)||LA223_0==TRUE||LA223_0==TkAsmHexNum||(LA223_0 >= TkHexNum && LA223_0 <= TkIntNum)||LA223_0==TkRealNum||LA223_0==VARIANT||LA223_0==WRITE||(LA223_0 >= XOR && LA223_0 <= 201)) ) {
				alt223=1;
			}
			else if ( (LA223_0==RBRACK) ) {
				int LA223_2 = input.LA(2);
				if ( (synpred313_Delphi()) ) {
					alt223=1;
				}
			}
			switch (alt223) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:37: expression ( ( ',' | '..' ) expression )*
					{
					pushFollow(FOLLOW_expression_in_setSection13435);
					expression639=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression639.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:48: ( ( ',' | '..' ) expression )*
					loop222:
					while (true) {
						int alt222=2;
						int LA222_0 = input.LA(1);
						if ( (LA222_0==COMMA||LA222_0==DOTDOT) ) {
							alt222=1;
						}

						switch (alt222) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( ',' | '..' ) expression
							{
							set640=input.LT(1);
							if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set640));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_expression_in_setSection13446);
							expression641=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression641.getTree());

							}
							break;

						default :
							break loop222;
						}
					}

					}
					break;

			}

			char_literal642=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_setSection13452); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal642_tree = (Object)adaptor.create(char_literal642);
			adaptor.addChild(root_0, char_literal642_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, setSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setSection"


	public static class designator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designator"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:1: designator : ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* ;
	public final DelphiParser.designator_return designator() throws RecognitionException {
		DelphiParser.designator_return retval = new DelphiParser.designator_return();
		retval.start = input.LT(1);
		int designator_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal643=null;
		ParserRuleReturnScope namespacedQualifiedIdent644 =null;
		ParserRuleReturnScope typeId645 =null;
		ParserRuleReturnScope designatorItem646 =null;

		Object string_literal643_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:30: ( ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )*
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ( 'inherited' )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==INHERITED) ) {
				int LA224_1 = input.LA(2);
				if ( (synpred314_Delphi()) ) {
					alt224=1;
				}
			}
			switch (alt224) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:33: 'inherited'
					{
					string_literal643=(Token)match(input,INHERITED,FOLLOW_INHERITED_in_designator13509); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal643_tree = (Object)adaptor.create(string_literal643);
					adaptor.addChild(root_0, string_literal643_tree);
					}

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:47: ( ( namespacedQualifiedIdent | typeId ) )?
			int alt226=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA226_1 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case 200:
					{
					int LA226_2 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case NAME:
					{
					int LA226_3 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case READ:
					{
					int LA226_5 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case WRITE:
					{
					int LA226_6 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case READONLY:
					{
					int LA226_7 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case STORED:
					{
					int LA226_8 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case DEFAULT:
					{
					int LA226_9 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case IMPLEMENTS:
					{
					int LA226_10 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA226_11 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA226_12 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case LOCAL:
					{
					int LA226_13 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case INDEX:
					{
					int LA226_14 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case STRICT:
					{
					int LA226_15 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case OPERATOR:
					{
					int LA226_16 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case AT:
					{
					int LA226_17 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case EXIT:
				case FINAL:
				case MESSAGE:
				case OBJECT:
				case OUT:
				case POINTER:
				case REFERENCE:
				case REMOVE:
				case STRING:
				case VARIANT:
					{
					int LA226_18 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt226=1;
					}
					}
					break;
			}
			switch (alt226) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:49: ( namespacedQualifiedIdent | typeId )
					{
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:49: ( namespacedQualifiedIdent | typeId )
					int alt225=2;
					switch ( input.LA(1) ) {
					case TkIdentifier:
						{
						int LA225_1 = input.LA(2);
						if ( (synpred315_Delphi()) ) {
							alt225=1;
						}
						else if ( (true) ) {
							alt225=2;
						}

						}
						break;
					case 200:
						{
						int LA225_2 = input.LA(2);
						if ( (LA225_2==TkIdentifier) ) {
							int LA225_6 = input.LA(3);
							if ( (synpred315_Delphi()) ) {
								alt225=1;
							}
							else if ( (true) ) {
								alt225=2;
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 225, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OBJECT:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STORED:
					case STRICT:
					case STRING:
					case VARIANT:
					case WRITE:
						{
						int LA225_3 = input.LA(2);
						if ( (synpred315_Delphi()) ) {
							alt225=1;
						}
						else if ( (true) ) {
							alt225=2;
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 225, 0, input);
						throw nvae;
					}
					switch (alt225) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:50: namespacedQualifiedIdent
							{
							pushFollow(FOLLOW_namespacedQualifiedIdent_in_designator13516);
							namespacedQualifiedIdent644=namespacedQualifiedIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent644.getTree());

							}
							break;
						case 2 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:77: typeId
							{
							pushFollow(FOLLOW_typeId_in_designator13520);
							typeId645=typeId();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId645.getTree());

							}
							break;

					}

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:88: ( designatorItem )*
			loop227:
			while (true) {
				int alt227=2;
				alt227 = dfa227.predict(input);
				switch (alt227) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:89: designatorItem
					{
					pushFollow(FOLLOW_designatorItem_in_designator13527);
					designatorItem646=designatorItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designatorItem646.getTree());

					}
					break;

				default :
					break loop227;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, designator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designator"


	public static class designatorItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designatorItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:1: designatorItem : ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' );
	public final DelphiParser.designatorItem_return designatorItem() throws RecognitionException {
		DelphiParser.designatorItem_return retval = new DelphiParser.designatorItem_return();
		retval.start = input.LT(1);
		int designatorItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal647=null;
		Token set648=null;
		Token char_literal650=null;
		Token char_literal652=null;
		Token char_literal654=null;
		Token char_literal655=null;
		Token char_literal657=null;
		Token char_literal658=null;
		Token char_literal661=null;
		Token char_literal664=null;
		ParserRuleReturnScope ident649 =null;
		ParserRuleReturnScope genericTypeIdent651 =null;
		ParserRuleReturnScope genericTypeIdent653 =null;
		ParserRuleReturnScope expressionList656 =null;
		ParserRuleReturnScope expression659 =null;
		ParserRuleReturnScope colonConstruct660 =null;
		ParserRuleReturnScope expression662 =null;
		ParserRuleReturnScope colonConstruct663 =null;

		Object char_literal647_tree=null;
		Object set648_tree=null;
		Object char_literal650_tree=null;
		Object char_literal652_tree=null;
		Object char_literal654_tree=null;
		Object char_literal655_tree=null;
		Object char_literal657_tree=null;
		Object char_literal658_tree=null;
		Object char_literal661_tree=null;
		Object char_literal664_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_colonConstruct=new RewriteRuleSubtreeStream(adaptor,"rule colonConstruct");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:30: ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' )
			int alt233=5;
			switch ( input.LA(1) ) {
			case POINTER2:
				{
				alt233=1;
				}
				break;
			case AT2:
			case DOT:
				{
				alt233=2;
				}
				break;
			case LT:
				{
				alt233=3;
				}
				break;
			case LBRACK:
				{
				alt233=4;
				}
				break;
			case LPAREN:
				{
				alt233=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 233, 0, input);
				throw nvae;
			}
			switch (alt233) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: '^'
					{
					root_0 = (Object)adaptor.nil();


					char_literal647=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_designatorItem13580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal647_tree = (Object)adaptor.create(char_literal647);
					adaptor.addChild(root_0, char_literal647_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:32: ( '.' | '@' ) ident
					{
					root_0 = (Object)adaptor.nil();


					set648=input.LT(1);
					if ( input.LA(1)==AT2||input.LA(1)==DOT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set648));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_ident_in_designatorItem13621);
					ident649=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident649.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
					{
					char_literal650=(Token)match(input,LT,FOLLOW_LT_in_designatorItem13669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal650_tree = (Object)adaptor.create(char_literal650);
					adaptor.addChild(root_0, char_literal650_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13671);
					genericTypeIdent651=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent651.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:54: ( ',' genericTypeIdent )*
					loop228:
					while (true) {
						int alt228=2;
						int LA228_0 = input.LA(1);
						if ( (LA228_0==COMMA) ) {
							alt228=1;
						}

						switch (alt228) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:55: ',' genericTypeIdent
							{
							char_literal652=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13674); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal652_tree = (Object)adaptor.create(char_literal652);
							adaptor.addChild(root_0, char_literal652_tree);
							}

							pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13676);
							genericTypeIdent653=genericTypeIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent653.getTree());

							}
							break;

						default :
							break loop228;
						}
					}

					char_literal654=(Token)match(input,GT,FOLLOW_GT_in_designatorItem13680); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal654_tree = (Object)adaptor.create(char_literal654);
					adaptor.addChild(root_0, char_literal654_tree);
					}

					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: '[' expressionList ']'
					{
					root_0 = (Object)adaptor.nil();


					char_literal655=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_designatorItem13721); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal655_tree = (Object)adaptor.create(char_literal655);
					adaptor.addChild(root_0, char_literal655_tree);
					}

					pushFollow(FOLLOW_expressionList_in_designatorItem13723);
					expressionList656=expressionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList656.getTree());

					char_literal657=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_designatorItem13725); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal657_tree = (Object)adaptor.create(char_literal657);
					adaptor.addChild(root_0, char_literal657_tree);
					}

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:32: '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')'
					{
					char_literal658=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_designatorItem13758); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal658);

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:36: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )?
					int alt232=2;
					int LA232_0 = input.LA(1);
					if ( ((LA232_0 >= ADD && LA232_0 <= ANSISTRING)||LA232_0==AS||(LA232_0 >= AT && LA232_0 <= AT2)||LA232_0==BREAK||(LA232_0 >= COLON && LA232_0 <= COMMA)||(LA232_0 >= CONTAINS && LA232_0 <= ControlString)||LA232_0==DEFAULT||LA232_0==DIV||LA232_0==DOT||LA232_0==EQUAL||LA232_0==EXIT||LA232_0==EXPORT||LA232_0==FALSE||LA232_0==FINAL||(LA232_0 >= FUNCTION && LA232_0 <= GE)||LA232_0==GT||(LA232_0 >= IMPLEMENTS && LA232_0 <= INHERITED)||LA232_0==IS||LA232_0==LBRACK||LA232_0==LE||(LA232_0 >= LOCAL && LA232_0 <= NAME)||LA232_0==NIL||(LA232_0 >= NOT && LA232_0 <= OBJECT)||(LA232_0 >= OPERATOR && LA232_0 <= OUT)||(LA232_0 >= PLUS && LA232_0 <= POINTER2)||LA232_0==PROCEDURE||LA232_0==QuotedString||(LA232_0 >= READ && LA232_0 <= READONLY)||(LA232_0 >= REFERENCE && LA232_0 <= REGISTER)||LA232_0==REMOVE||(LA232_0 >= SHL && LA232_0 <= STAR)||(LA232_0 >= STORED && LA232_0 <= STRING)||LA232_0==TRUE||LA232_0==TkAsmHexNum||(LA232_0 >= TkHexNum && LA232_0 <= TkIntNum)||LA232_0==TkRealNum||LA232_0==VARIANT||LA232_0==WRITE||(LA232_0 >= XOR && LA232_0 <= 201)) ) {
						alt232=1;
					}
					else if ( (LA232_0==RPAREN) ) {
						int LA232_2 = input.LA(2);
						if ( (synpred327_Delphi()) ) {
							alt232=1;
						}
					}
					switch (alt232) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
							{
							pushFollow(FOLLOW_expression_in_designatorItem13761);
							expression659=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression659.getTree());
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:48: ( colonConstruct )?
							int alt229=2;
							int LA229_0 = input.LA(1);
							if ( (LA229_0==COLON) ) {
								alt229=1;
							}
							switch (alt229) {
								case 1 :
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:49: colonConstruct
									{
									pushFollow(FOLLOW_colonConstruct_in_designatorItem13764);
									colonConstruct660=colonConstruct();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct660.getTree());
									}
									break;

							}

							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:66: ( ',' expression ( colonConstruct )? )*
							loop231:
							while (true) {
								int alt231=2;
								int LA231_0 = input.LA(1);
								if ( (LA231_0==COMMA) ) {
									alt231=1;
								}

								switch (alt231) {
								case 1 :
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:67: ',' expression ( colonConstruct )?
									{
									char_literal661=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13769); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(char_literal661);

									pushFollow(FOLLOW_expression_in_designatorItem13771);
									expression662=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_expression.add(expression662.getTree());
									// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:82: ( colonConstruct )?
									int alt230=2;
									int LA230_0 = input.LA(1);
									if ( (LA230_0==COLON) ) {
										alt230=1;
									}
									switch (alt230) {
										case 1 :
											// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:83: colonConstruct
											{
											pushFollow(FOLLOW_colonConstruct_in_designatorItem13774);
											colonConstruct663=colonConstruct();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct663.getTree());
											}
											break;

									}

									}
									break;

								default :
									break loop231;
								}
							}

							}
							break;

					}

					char_literal664=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_designatorItem13782); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal664);

					// AST REWRITE
					// elements: RPAREN, LPAREN, expression, colonConstruct, expression, colonConstruct
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 499:108: -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')'
					{
						adaptor.addChild(root_0, stream_LPAREN.nextNode());
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:115: ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )?
						if ( stream_expression.hasNext()||stream_colonConstruct.hasNext()||stream_expression.hasNext() ) {
							adaptor.addChild(root_0, stream_expression.nextTree());
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:127: ( colonConstruct )?
							if ( stream_colonConstruct.hasNext() ) {
								adaptor.addChild(root_0, stream_colonConstruct.nextTree());
							}
							stream_colonConstruct.reset();

							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:145: ( expression ( colonConstruct )? )*
							while ( stream_expression.hasNext() ) {
								adaptor.addChild(root_0, stream_expression.nextTree());
								// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:157: ( colonConstruct )?
								if ( stream_colonConstruct.hasNext() ) {
									adaptor.addChild(root_0, stream_colonConstruct.nextTree());
								}
								stream_colonConstruct.reset();

							}
							stream_expression.reset();

						}
						stream_expression.reset();
						stream_colonConstruct.reset();
						stream_expression.reset();

						adaptor.addChild(root_0, stream_RPAREN.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, designatorItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designatorItem"


	public static class expressionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:1: expressionList : expression ( ',' expression )* ;
	public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
		DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
		retval.start = input.LT(1);
		int expressionList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal666=null;
		ParserRuleReturnScope expression665 =null;
		ParserRuleReturnScope expression667 =null;

		Object char_literal666_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:30: ( expression ( ',' expression )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:32: expression ( ',' expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expressionList13859);
			expression665=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression665.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:43: ( ',' expression )*
			loop234:
			while (true) {
				int alt234=2;
				int LA234_0 = input.LA(1);
				if ( (LA234_0==COMMA) ) {
					alt234=1;
				}

				switch (alt234) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:44: ',' expression
					{
					char_literal666=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13862); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal666_tree = (Object)adaptor.create(char_literal666);
					adaptor.addChild(root_0, char_literal666_tree);
					}

					pushFollow(FOLLOW_expression_in_expressionList13864);
					expression667=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression667.getTree());

					}
					break;

				default :
					break loop234;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, expressionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class colonConstruct_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "colonConstruct"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:1: colonConstruct : ':' expression ( ':' expression )? ;
	public final DelphiParser.colonConstruct_return colonConstruct() throws RecognitionException {
		DelphiParser.colonConstruct_return retval = new DelphiParser.colonConstruct_return();
		retval.start = input.LT(1);
		int colonConstruct_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal668=null;
		Token char_literal670=null;
		ParserRuleReturnScope expression669 =null;
		ParserRuleReturnScope expression671 =null;

		Object char_literal668_tree=null;
		Object char_literal670_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:30: ( ':' expression ( ':' expression )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:32: ':' expression ( ':' expression )?
			{
			root_0 = (Object)adaptor.nil();


			char_literal668=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13917); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal668_tree = (Object)adaptor.create(char_literal668);
			adaptor.addChild(root_0, char_literal668_tree);
			}

			pushFollow(FOLLOW_expression_in_colonConstruct13919);
			expression669=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression669.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:47: ( ':' expression )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==COLON) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:48: ':' expression
					{
					char_literal670=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13922); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal670_tree = (Object)adaptor.create(char_literal670);
					adaptor.addChild(root_0, char_literal670_tree);
					}

					pushFollow(FOLLOW_expression_in_colonConstruct13924);
					expression671=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression671.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, colonConstruct_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "colonConstruct"


	public static class operator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "operator"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:1: operator : ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' );
	public final DelphiParser.operator_return operator() throws RecognitionException {
		DelphiParser.operator_return retval = new DelphiParser.operator_return();
		retval.start = input.LT(1);
		int operator_StartIndex = input.index();

		Object root_0 = null;

		Token set672=null;

		Object set672_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:30: ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set672=input.LT(1);
			if ( input.LA(1)==AND||input.LA(1)==AS||input.LA(1)==DIV||(input.LA(1) >= MINUS && input.LA(1) <= MOD)||input.LA(1)==OR||input.LA(1)==PLUS||(input.LA(1) >= SHL && input.LA(1) <= STAR)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set672));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator"


	public static class relOp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relOp"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:519:1: relOp : ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' );
	public final DelphiParser.relOp_return relOp() throws RecognitionException {
		DelphiParser.relOp_return retval = new DelphiParser.relOp_return();
		retval.start = input.LT(1);
		int relOp_StartIndex = input.index();

		Object root_0 = null;

		Token set673=null;

		Object set673_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:519:30: ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set673=input.LT(1);
			if ( input.LA(1)==EQUAL||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==IN||input.LA(1)==IS||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NOT_EQUAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set673));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, relOp_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relOp"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:532:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
	public final DelphiParser.statement_return statement() throws RecognitionException {
		DelphiParser.statement_return retval = new DelphiParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal685=null;
		ParserRuleReturnScope ifStatement674 =null;
		ParserRuleReturnScope caseStatement675 =null;
		ParserRuleReturnScope repeatStatement676 =null;
		ParserRuleReturnScope whileStatement677 =null;
		ParserRuleReturnScope forStatement678 =null;
		ParserRuleReturnScope withStatement679 =null;
		ParserRuleReturnScope tryStatement680 =null;
		ParserRuleReturnScope raiseStatement681 =null;
		ParserRuleReturnScope assemblerStatement682 =null;
		ParserRuleReturnScope compoundStatement683 =null;
		ParserRuleReturnScope label684 =null;
		ParserRuleReturnScope statement686 =null;
		ParserRuleReturnScope simpleStatement687 =null;

		Object char_literal685_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:532:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
			int alt236=12;
			switch ( input.LA(1) ) {
			case IF:
				{
				alt236=1;
				}
				break;
			case CASE:
				{
				alt236=2;
				}
				break;
			case REPEAT:
				{
				alt236=3;
				}
				break;
			case WHILE:
				{
				alt236=4;
				}
				break;
			case FOR:
				{
				alt236=5;
				}
				break;
			case WITH:
				{
				alt236=6;
				}
				break;
			case TRY:
				{
				alt236=7;
				}
				break;
			case RAISE:
				{
				alt236=8;
				}
				break;
			case ASM:
				{
				alt236=9;
				}
				break;
			case BEGIN:
				{
				alt236=10;
				}
				break;
			case TkIdentifier:
				{
				int LA236_11 = input.LA(2);
				if ( (LA236_11==COLON) ) {
					int LA236_19 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_11==EOF||(LA236_11 >= ADD && LA236_11 <= ANSISTRING)||LA236_11==AS||(LA236_11 >= ASSIGN && LA236_11 <= AT2)||LA236_11==BREAK||LA236_11==COMMA||(LA236_11 >= CONTAINS && LA236_11 <= ControlString)||LA236_11==DEFAULT||LA236_11==DIV||(LA236_11 >= DOT && LA236_11 <= DOTDOT)||(LA236_11 >= ELSE && LA236_11 <= EXIT)||LA236_11==EXPORT||LA236_11==FALSE||(LA236_11 >= FINAL && LA236_11 <= FINALLY)||(LA236_11 >= FUNCTION && LA236_11 <= GE)||LA236_11==GT||(LA236_11 >= IMPLEMENTS && LA236_11 <= INHERITED)||LA236_11==IS||LA236_11==LBRACK||LA236_11==LE||(LA236_11 >= LOCAL && LA236_11 <= NAME)||LA236_11==NIL||(LA236_11 >= NOT && LA236_11 <= OBJECT)||(LA236_11 >= ON && LA236_11 <= OUT)||(LA236_11 >= PLUS && LA236_11 <= POINTER2)||LA236_11==PROCEDURE||LA236_11==QuotedString||(LA236_11 >= READ && LA236_11 <= READONLY)||(LA236_11 >= REFERENCE && LA236_11 <= REGISTER)||LA236_11==REMOVE||LA236_11==SEMI||(LA236_11 >= SHL && LA236_11 <= STAR)||(LA236_11 >= STORED && LA236_11 <= STRING)||LA236_11==TRUE||LA236_11==TkAsmHexNum||(LA236_11 >= TkHexNum && LA236_11 <= TkIntNum)||LA236_11==TkRealNum||LA236_11==UNTIL||LA236_11==VARIANT||LA236_11==WRITE||(LA236_11 >= XOR && LA236_11 <= 201)) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIntNum:
				{
				int LA236_12 = input.LA(2);
				if ( (LA236_12==COLON) ) {
					int LA236_20 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_12==AND||LA236_12==AS||LA236_12==COMMA||LA236_12==DIV||LA236_12==DOTDOT||LA236_12==EQUAL||LA236_12==GE||LA236_12==GT||LA236_12==IN||LA236_12==IS||LA236_12==LE||LA236_12==LT||(LA236_12 >= MINUS && LA236_12 <= MOD)||LA236_12==NOT_EQUAL||LA236_12==OR||LA236_12==PLUS||(LA236_12 >= SHL && LA236_12 <= STAR)||LA236_12==XOR) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkHexNum:
				{
				int LA236_13 = input.LA(2);
				if ( (LA236_13==COLON) ) {
					int LA236_21 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_13==AND||LA236_13==AS||LA236_13==COMMA||LA236_13==DIV||LA236_13==DOTDOT||LA236_13==EQUAL||LA236_13==GE||LA236_13==GT||LA236_13==IN||LA236_13==IS||LA236_13==LE||LA236_13==LT||(LA236_13 >= MINUS && LA236_13 <= MOD)||LA236_13==NOT_EQUAL||LA236_13==OR||LA236_13==PLUS||(LA236_13 >= SHL && LA236_13 <= STAR)||LA236_13==XOR) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA236_14 = input.LA(2);
				if ( (LA236_14==COLON) ) {
					int LA236_22 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_14==EOF||(LA236_14 >= ADD && LA236_14 <= ANSISTRING)||LA236_14==AS||(LA236_14 >= ASSIGN && LA236_14 <= AT2)||LA236_14==BREAK||LA236_14==COMMA||(LA236_14 >= CONTAINS && LA236_14 <= ControlString)||LA236_14==DEFAULT||LA236_14==DIV||(LA236_14 >= DOT && LA236_14 <= DOTDOT)||(LA236_14 >= ELSE && LA236_14 <= EXIT)||LA236_14==EXPORT||LA236_14==FALSE||(LA236_14 >= FINAL && LA236_14 <= FINALLY)||(LA236_14 >= FUNCTION && LA236_14 <= GE)||LA236_14==GT||(LA236_14 >= IMPLEMENTS && LA236_14 <= INHERITED)||LA236_14==IS||LA236_14==LBRACK||LA236_14==LE||(LA236_14 >= LOCAL && LA236_14 <= NAME)||LA236_14==NIL||(LA236_14 >= NOT && LA236_14 <= OBJECT)||(LA236_14 >= ON && LA236_14 <= OUT)||(LA236_14 >= PLUS && LA236_14 <= POINTER2)||LA236_14==PROCEDURE||LA236_14==QuotedString||(LA236_14 >= READ && LA236_14 <= READONLY)||(LA236_14 >= REFERENCE && LA236_14 <= REGISTER)||LA236_14==REMOVE||LA236_14==SEMI||(LA236_14 >= SHL && LA236_14 <= STAR)||(LA236_14 >= STORED && LA236_14 <= STRING)||LA236_14==TRUE||LA236_14==TkAsmHexNum||(LA236_14 >= TkHexNum && LA236_14 <= TkIntNum)||LA236_14==TkRealNum||LA236_14==UNTIL||LA236_14==VARIANT||LA236_14==WRITE||(LA236_14 >= XOR && LA236_14 <= 201)) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EOF:
			case AND:
			case AS:
			case ASSIGN:
			case AT2:
			case COLON:
			case COMMA:
			case ControlString:
			case DIV:
			case DOT:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FALSE:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GOTO:
			case GT:
			case IN:
			case INHERITED:
			case IS:
			case LBRACK:
			case LE:
			case LPAREN:
			case LT:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case POINTER2:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TRUE:
			case TkAsmHexNum:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 200:
			case 201:
				{
				alt236=12;
				}
				break;
			case BREAK:
				{
				int LA236_16 = input.LA(2);
				if ( (LA236_16==COLON) ) {
					int LA236_23 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_16==EOF||(LA236_16 >= ADD && LA236_16 <= ANSISTRING)||LA236_16==AS||(LA236_16 >= ASSIGN && LA236_16 <= AT2)||LA236_16==BREAK||LA236_16==COMMA||(LA236_16 >= CONTAINS && LA236_16 <= ControlString)||LA236_16==DEFAULT||LA236_16==DIV||(LA236_16 >= DOT && LA236_16 <= DOTDOT)||(LA236_16 >= ELSE && LA236_16 <= EXIT)||LA236_16==EXPORT||LA236_16==FALSE||(LA236_16 >= FINAL && LA236_16 <= FINALLY)||(LA236_16 >= FUNCTION && LA236_16 <= GE)||LA236_16==GT||(LA236_16 >= IMPLEMENTS && LA236_16 <= INHERITED)||LA236_16==IS||LA236_16==LBRACK||LA236_16==LE||(LA236_16 >= LOCAL && LA236_16 <= NAME)||LA236_16==NIL||(LA236_16 >= NOT && LA236_16 <= OBJECT)||(LA236_16 >= ON && LA236_16 <= OUT)||(LA236_16 >= PLUS && LA236_16 <= POINTER2)||LA236_16==PROCEDURE||LA236_16==QuotedString||(LA236_16 >= READ && LA236_16 <= READONLY)||(LA236_16 >= REFERENCE && LA236_16 <= REGISTER)||LA236_16==REMOVE||LA236_16==SEMI||(LA236_16 >= SHL && LA236_16 <= STAR)||(LA236_16 >= STORED && LA236_16 <= STRING)||LA236_16==TRUE||LA236_16==TkAsmHexNum||(LA236_16 >= TkHexNum && LA236_16 <= TkIntNum)||LA236_16==TkRealNum||LA236_16==UNTIL||LA236_16==VARIANT||LA236_16==WRITE||(LA236_16 >= XOR && LA236_16 <= 201)) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA236_17 = input.LA(2);
				if ( (LA236_17==COLON) ) {
					int LA236_24 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_17==EOF||(LA236_17 >= ADD && LA236_17 <= ANSISTRING)||LA236_17==AS||(LA236_17 >= ASSIGN && LA236_17 <= AT2)||LA236_17==BREAK||LA236_17==COMMA||(LA236_17 >= CONTAINS && LA236_17 <= ControlString)||LA236_17==DEFAULT||LA236_17==DIV||(LA236_17 >= DOT && LA236_17 <= DOTDOT)||(LA236_17 >= ELSE && LA236_17 <= EXIT)||LA236_17==EXPORT||LA236_17==FALSE||(LA236_17 >= FINAL && LA236_17 <= FINALLY)||(LA236_17 >= FUNCTION && LA236_17 <= GE)||LA236_17==GT||(LA236_17 >= IMPLEMENTS && LA236_17 <= INHERITED)||LA236_17==IS||LA236_17==LBRACK||LA236_17==LE||(LA236_17 >= LOCAL && LA236_17 <= NAME)||LA236_17==NIL||(LA236_17 >= NOT && LA236_17 <= OBJECT)||(LA236_17 >= ON && LA236_17 <= OUT)||(LA236_17 >= PLUS && LA236_17 <= POINTER2)||LA236_17==PROCEDURE||LA236_17==QuotedString||(LA236_17 >= READ && LA236_17 <= READONLY)||(LA236_17 >= REFERENCE && LA236_17 <= REGISTER)||LA236_17==REMOVE||LA236_17==SEMI||(LA236_17 >= SHL && LA236_17 <= STAR)||(LA236_17 >= STORED && LA236_17 <= STRING)||LA236_17==TRUE||LA236_17==TkAsmHexNum||(LA236_17 >= TkHexNum && LA236_17 <= TkIntNum)||LA236_17==TkRealNum||LA236_17==UNTIL||LA236_17==VARIANT||LA236_17==WRITE||(LA236_17 >= XOR && LA236_17 <= 201)) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				int LA236_18 = input.LA(2);
				if ( (LA236_18==COLON) ) {
					int LA236_25 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt236=11;
					}
					else if ( (true) ) {
						alt236=12;
					}

				}
				else if ( (LA236_18==EOF||(LA236_18 >= ADD && LA236_18 <= ANSISTRING)||LA236_18==AS||(LA236_18 >= ASSIGN && LA236_18 <= AT2)||LA236_18==BREAK||LA236_18==COMMA||(LA236_18 >= CONTAINS && LA236_18 <= ControlString)||LA236_18==DEFAULT||LA236_18==DIV||(LA236_18 >= DOT && LA236_18 <= DOTDOT)||(LA236_18 >= ELSE && LA236_18 <= EXIT)||LA236_18==EXPORT||LA236_18==FALSE||(LA236_18 >= FINAL && LA236_18 <= FINALLY)||(LA236_18 >= FUNCTION && LA236_18 <= GE)||LA236_18==GT||(LA236_18 >= IMPLEMENTS && LA236_18 <= INHERITED)||LA236_18==IS||LA236_18==LBRACK||LA236_18==LE||(LA236_18 >= LOCAL && LA236_18 <= NAME)||LA236_18==NIL||(LA236_18 >= NOT && LA236_18 <= OBJECT)||(LA236_18 >= ON && LA236_18 <= OUT)||(LA236_18 >= PLUS && LA236_18 <= POINTER2)||LA236_18==PROCEDURE||LA236_18==QuotedString||(LA236_18 >= READ && LA236_18 <= READONLY)||(LA236_18 >= REFERENCE && LA236_18 <= REGISTER)||LA236_18==REMOVE||LA236_18==SEMI||(LA236_18 >= SHL && LA236_18 <= STAR)||(LA236_18 >= STORED && LA236_18 <= STRING)||LA236_18==TRUE||LA236_18==TkAsmHexNum||(LA236_18 >= TkHexNum && LA236_18 <= TkIntNum)||LA236_18==TkRealNum||LA236_18==UNTIL||LA236_18==VARIANT||LA236_18==WRITE||(LA236_18 >= XOR && LA236_18 <= 201)) ) {
					alt236=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 236, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 236, 0, input);
				throw nvae;
			}
			switch (alt236) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:532:32: ifStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ifStatement_in_statement14698);
					ifStatement674=ifStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement674.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:533:32: caseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_caseStatement_in_statement14731);
					caseStatement675=caseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement675.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:534:32: repeatStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_repeatStatement_in_statement14764);
					repeatStatement676=repeatStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, repeatStatement676.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:535:32: whileStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_whileStatement_in_statement14797);
					whileStatement677=whileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement677.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:536:32: forStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forStatement_in_statement14830);
					forStatement678=forStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement678.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:537:32: withStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_withStatement_in_statement14863);
					withStatement679=withStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement679.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:32: tryStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_tryStatement_in_statement14896);
					tryStatement680=tryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement680.getTree());

					}
					break;
				case 8 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: raiseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raiseStatement_in_statement14929);
					raiseStatement681=raiseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raiseStatement681.getTree());

					}
					break;
				case 9 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:540:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_statement14962);
					assemblerStatement682=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement682.getTree());

					}
					break;
				case 10 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:541:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_statement14995);
					compoundStatement683=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement683.getTree());

					}
					break;
				case 11 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: label ':' statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_label_in_statement15028);
					label684=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label684.getTree());

					char_literal685=(Token)match(input,COLON,FOLLOW_COLON_in_statement15030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal685_tree = (Object)adaptor.create(char_literal685);
					adaptor.addChild(root_0, char_literal685_tree);
					}

					pushFollow(FOLLOW_statement_in_statement15032);
					statement686=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement686.getTree());

					}
					break;
				case 12 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:543:32: simpleStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleStatement_in_statement15065);
					simpleStatement687=simpleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement687.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class ifStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ifStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
	public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
		DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
		retval.start = input.LT(1);
		int ifStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal688=null;
		Token string_literal690=null;
		Token string_literal692=null;
		ParserRuleReturnScope expression689 =null;
		ParserRuleReturnScope statement691 =null;
		ParserRuleReturnScope statement693 =null;

		Object string_literal688_tree=null;
		Object string_literal690_tree=null;
		Object string_literal692_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:30: ( 'if' expression 'then' statement ( 'else' statement )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:32: 'if' expression 'then' statement ( 'else' statement )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal688=(Token)match(input,IF,FOLLOW_IF_in_ifStatement15119); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal688_tree = (Object)adaptor.create(string_literal688);
			adaptor.addChild(root_0, string_literal688_tree);
			}

			pushFollow(FOLLOW_expression_in_ifStatement15121);
			expression689=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression689.getTree());

			string_literal690=(Token)match(input,THEN,FOLLOW_THEN_in_ifStatement15123); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal690_tree = (Object)adaptor.create(string_literal690);
			adaptor.addChild(root_0, string_literal690_tree);
			}

			pushFollow(FOLLOW_statement_in_ifStatement15125);
			statement691=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement691.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:65: ( 'else' statement )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ELSE) ) {
				int LA237_1 = input.LA(2);
				if ( (synpred359_Delphi()) ) {
					alt237=1;
				}
			}
			switch (alt237) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:66: 'else' statement
					{
					string_literal692=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement15128); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal692_tree = (Object)adaptor.create(string_literal692);
					adaptor.addChild(root_0, string_literal692_tree);
					}

					pushFollow(FOLLOW_statement_in_ifStatement15130);
					statement693=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement693.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, ifStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ifStatement"


	public static class caseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
	public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
		DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
		retval.start = input.LT(1);
		int caseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal694=null;
		Token string_literal696=null;
		Token string_literal698=null;
		Token char_literal700=null;
		Token string_literal701=null;
		ParserRuleReturnScope expression695 =null;
		ParserRuleReturnScope caseItem697 =null;
		ParserRuleReturnScope statementList699 =null;

		Object string_literal694_tree=null;
		Object string_literal696_tree=null;
		Object string_literal698_tree=null;
		Object char_literal700_tree=null;
		Object string_literal701_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal694=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement15184); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal694_tree = (Object)adaptor.create(string_literal694);
			adaptor.addChild(root_0, string_literal694_tree);
			}

			pushFollow(FOLLOW_expression_in_caseStatement15186);
			expression695=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression695.getTree());

			string_literal696=(Token)match(input,OF,FOLLOW_OF_in_caseStatement15188); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal696_tree = (Object)adaptor.create(string_literal696);
			adaptor.addChild(root_0, string_literal696_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:55: ( caseItem )*
			loop238:
			while (true) {
				int alt238=2;
				int LA238_0 = input.LA(1);
				if ( ((LA238_0 >= ADD && LA238_0 <= ANSISTRING)||LA238_0==AS||(LA238_0 >= AT && LA238_0 <= AT2)||LA238_0==BREAK||(LA238_0 >= COLON && LA238_0 <= COMMA)||(LA238_0 >= CONTAINS && LA238_0 <= ControlString)||LA238_0==DEFAULT||LA238_0==DIV||(LA238_0 >= DOT && LA238_0 <= DOTDOT)||LA238_0==EQUAL||LA238_0==EXIT||LA238_0==EXPORT||LA238_0==FALSE||LA238_0==FINAL||(LA238_0 >= FUNCTION && LA238_0 <= GE)||LA238_0==GT||(LA238_0 >= IMPLEMENTS && LA238_0 <= INHERITED)||LA238_0==IS||LA238_0==LBRACK||LA238_0==LE||(LA238_0 >= LOCAL && LA238_0 <= NAME)||LA238_0==NIL||(LA238_0 >= NOT && LA238_0 <= OBJECT)||(LA238_0 >= OPERATOR && LA238_0 <= OUT)||(LA238_0 >= PLUS && LA238_0 <= POINTER2)||LA238_0==PROCEDURE||LA238_0==QuotedString||(LA238_0 >= READ && LA238_0 <= READONLY)||(LA238_0 >= REFERENCE && LA238_0 <= REGISTER)||LA238_0==REMOVE||(LA238_0 >= SHL && LA238_0 <= STAR)||(LA238_0 >= STORED && LA238_0 <= STRING)||LA238_0==TRUE||LA238_0==TkAsmHexNum||(LA238_0 >= TkHexNum && LA238_0 <= TkIntNum)||LA238_0==TkRealNum||LA238_0==VARIANT||LA238_0==WRITE||(LA238_0 >= XOR && LA238_0 <= 201)) ) {
					alt238=1;
				}

				switch (alt238) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:56: caseItem
					{
					pushFollow(FOLLOW_caseItem_in_caseStatement15191);
					caseItem697=caseItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseItem697.getTree());

					}
					break;

				default :
					break loop238;
				}
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:67: ( 'else' statementList ( ';' )? )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==ELSE) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:68: 'else' statementList ( ';' )?
					{
					string_literal698=(Token)match(input,ELSE,FOLLOW_ELSE_in_caseStatement15196); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal698_tree = (Object)adaptor.create(string_literal698);
					adaptor.addChild(root_0, string_literal698_tree);
					}

					pushFollow(FOLLOW_statementList_in_caseStatement15198);
					statementList699=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList699.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:89: ( ';' )?
					int alt239=2;
					int LA239_0 = input.LA(1);
					if ( (LA239_0==SEMI) ) {
						alt239=1;
					}
					switch (alt239) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:90: ';'
							{
							char_literal700=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseStatement15201); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal700_tree = (Object)adaptor.create(char_literal700);
							adaptor.addChild(root_0, char_literal700_tree);
							}

							}
							break;

					}

					}
					break;

			}

			string_literal701=(Token)match(input,END,FOLLOW_END_in_caseStatement15207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal701_tree = (Object)adaptor.create(string_literal701);
			adaptor.addChild(root_0, string_literal701_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, caseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseStatement"


	public static class caseItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
	public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
		DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
		retval.start = input.LT(1);
		int caseItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal703=null;
		Token char_literal705=null;
		Token char_literal707=null;
		ParserRuleReturnScope caseLabel702 =null;
		ParserRuleReturnScope caseLabel704 =null;
		ParserRuleReturnScope statement706 =null;

		Object char_literal703_tree=null;
		Object char_literal705_tree=null;
		Object char_literal707_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_caseLabel_in_caseItem15264);
			caseLabel702=caseLabel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel702.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:42: ( ',' caseLabel )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( (LA241_0==COMMA) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:43: ',' caseLabel
					{
					char_literal703=(Token)match(input,COMMA,FOLLOW_COMMA_in_caseItem15267); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal703_tree = (Object)adaptor.create(char_literal703);
					adaptor.addChild(root_0, char_literal703_tree);
					}

					pushFollow(FOLLOW_caseLabel_in_caseItem15269);
					caseLabel704=caseLabel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel704.getTree());

					}
					break;

				default :
					break loop241;
				}
			}

			char_literal705=(Token)match(input,COLON,FOLLOW_COLON_in_caseItem15273); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal705_tree = (Object)adaptor.create(char_literal705);
			adaptor.addChild(root_0, char_literal705_tree);
			}

			pushFollow(FOLLOW_statement_in_caseItem15275);
			statement706=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement706.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:73: ( ';' )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==SEMI) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:74: ';'
					{
					char_literal707=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseItem15278); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal707_tree = (Object)adaptor.create(char_literal707);
					adaptor.addChild(root_0, char_literal707_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, caseItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseItem"


	public static class caseLabel_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseLabel"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:1: caseLabel : expression ( '..' expression )? ;
	public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
		DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
		retval.start = input.LT(1);
		int caseLabel_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal709=null;
		ParserRuleReturnScope expression708 =null;
		ParserRuleReturnScope expression710 =null;

		Object string_literal709_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:30: ( expression ( '..' expression )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:32: expression ( '..' expression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_caseLabel15337);
			expression708=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression708.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:43: ( '..' expression )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==DOTDOT) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:44: '..' expression
					{
					string_literal709=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_caseLabel15340); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal709_tree = (Object)adaptor.create(string_literal709);
					adaptor.addChild(root_0, string_literal709_tree);
					}

					pushFollow(FOLLOW_expression_in_caseLabel15342);
					expression710=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression710.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, caseLabel_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseLabel"


	public static class repeatStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "repeatStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
	public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
		DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
		retval.start = input.LT(1);
		int repeatStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal711=null;
		Token string_literal713=null;
		ParserRuleReturnScope statementList712 =null;
		ParserRuleReturnScope expression714 =null;

		Object string_literal711_tree=null;
		Object string_literal713_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:30: ( 'repeat' ( statementList )? 'until' expression )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:32: 'repeat' ( statementList )? 'until' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal711=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_repeatStatement15394); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal711_tree = (Object)adaptor.create(string_literal711);
			adaptor.addChild(root_0, string_literal711_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:41: ( statementList )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==ADD||LA244_0==ANSISTRING||LA244_0==ASM||(LA244_0 >= ASSIGN && LA244_0 <= AT2)||(LA244_0 >= BEGIN && LA244_0 <= CASE)||(LA244_0 >= CONTAINS && LA244_0 <= CONTINUE)||LA244_0==DEFAULT||LA244_0==DOT||LA244_0==EXIT||LA244_0==EXPORT||LA244_0==FINAL||LA244_0==FOR||LA244_0==GOTO||LA244_0==IF||LA244_0==IMPLEMENTS||(LA244_0 >= INDEX && LA244_0 <= INHERITED)||LA244_0==LBRACK||(LA244_0 >= LOCAL && LA244_0 <= MESSAGE)||LA244_0==NAME||LA244_0==OBJECT||LA244_0==OPERATOR||LA244_0==OUT||(LA244_0 >= POINTER && LA244_0 <= POINTER2)||LA244_0==RAISE||(LA244_0 >= READ && LA244_0 <= READONLY)||(LA244_0 >= REFERENCE && LA244_0 <= REGISTER)||(LA244_0 >= REMOVE && LA244_0 <= REPEAT)||LA244_0==SEMI||(LA244_0 >= STORED && LA244_0 <= STRING)||LA244_0==TRY||(LA244_0 >= TkHexNum && LA244_0 <= TkIntNum)||LA244_0==VARIANT||(LA244_0 >= WHILE && LA244_0 <= WRITE)||LA244_0==200) ) {
				alt244=1;
			}
			else if ( (LA244_0==UNTIL) ) {
				int LA244_2 = input.LA(2);
				if ( (synpred366_Delphi()) ) {
					alt244=1;
				}
			}
			switch (alt244) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:42: statementList
					{
					pushFollow(FOLLOW_statementList_in_repeatStatement15397);
					statementList712=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList712.getTree());

					}
					break;

			}

			string_literal713=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_repeatStatement15401); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal713_tree = (Object)adaptor.create(string_literal713);
			adaptor.addChild(root_0, string_literal713_tree);
			}

			pushFollow(FOLLOW_expression_in_repeatStatement15403);
			expression714=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression714.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, repeatStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repeatStatement"


	public static class whileStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "whileStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:1: whileStatement : 'while' expression 'do' statement ;
	public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
		DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
		retval.start = input.LT(1);
		int whileStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal715=null;
		Token string_literal717=null;
		ParserRuleReturnScope expression716 =null;
		ParserRuleReturnScope statement718 =null;

		Object string_literal715_tree=null;
		Object string_literal717_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:30: ( 'while' expression 'do' statement )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: 'while' expression 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal715=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement15454); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal715_tree = (Object)adaptor.create(string_literal715);
			adaptor.addChild(root_0, string_literal715_tree);
			}

			pushFollow(FOLLOW_expression_in_whileStatement15456);
			expression716=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression716.getTree());

			string_literal717=(Token)match(input,DO,FOLLOW_DO_in_whileStatement15458); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal717_tree = (Object)adaptor.create(string_literal717);
			adaptor.addChild(root_0, string_literal717_tree);
			}

			pushFollow(FOLLOW_statement_in_whileStatement15460);
			statement718=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement718.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, whileStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whileStatement"


	public static class forStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:1: forStatement : ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement );
	public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
		DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
		retval.start = input.LT(1);
		int forStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal719=null;
		Token string_literal721=null;
		Token string_literal723=null;
		Token string_literal725=null;
		Token string_literal727=null;
		Token string_literal729=null;
		Token string_literal731=null;
		Token string_literal733=null;
		Token string_literal735=null;
		Token string_literal737=null;
		Token string_literal739=null;
		ParserRuleReturnScope designator720 =null;
		ParserRuleReturnScope expression722 =null;
		ParserRuleReturnScope expression724 =null;
		ParserRuleReturnScope statement726 =null;
		ParserRuleReturnScope designator728 =null;
		ParserRuleReturnScope expression730 =null;
		ParserRuleReturnScope expression732 =null;
		ParserRuleReturnScope statement734 =null;
		ParserRuleReturnScope designator736 =null;
		ParserRuleReturnScope expression738 =null;
		ParserRuleReturnScope statement740 =null;

		Object string_literal719_tree=null;
		Object string_literal721_tree=null;
		Object string_literal723_tree=null;
		Object string_literal725_tree=null;
		Object string_literal727_tree=null;
		Object string_literal729_tree=null;
		Object string_literal731_tree=null;
		Object string_literal733_tree=null;
		Object string_literal735_tree=null;
		Object string_literal737_tree=null;
		Object string_literal739_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:30: ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement )
			int alt245=3;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==FOR) ) {
				int LA245_1 = input.LA(2);
				if ( (synpred367_Delphi()) ) {
					alt245=1;
				}
				else if ( (synpred368_Delphi()) ) {
					alt245=2;
				}
				else if ( (true) ) {
					alt245=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}

			switch (alt245) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: 'for' designator ':=' expression 'to' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal719=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15513); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal719_tree = (Object)adaptor.create(string_literal719);
					adaptor.addChild(root_0, string_literal719_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15515);
					designator720=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator720.getTree());

					string_literal721=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15517); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal721_tree = (Object)adaptor.create(string_literal721);
					adaptor.addChild(root_0, string_literal721_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15519);
					expression722=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression722.getTree());

					string_literal723=(Token)match(input,TO,FOLLOW_TO_in_forStatement15521); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal723_tree = (Object)adaptor.create(string_literal723);
					adaptor.addChild(root_0, string_literal723_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15523);
					expression724=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression724.getTree());

					string_literal725=(Token)match(input,DO,FOLLOW_DO_in_forStatement15525); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal725_tree = (Object)adaptor.create(string_literal725);
					adaptor.addChild(root_0, string_literal725_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15527);
					statement726=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement726.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: 'for' designator ':=' expression 'downto' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal727=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15560); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal727_tree = (Object)adaptor.create(string_literal727);
					adaptor.addChild(root_0, string_literal727_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15562);
					designator728=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator728.getTree());

					string_literal729=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15564); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal729_tree = (Object)adaptor.create(string_literal729);
					adaptor.addChild(root_0, string_literal729_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15566);
					expression730=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression730.getTree());

					string_literal731=(Token)match(input,DOWNTO,FOLLOW_DOWNTO_in_forStatement15568); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal731_tree = (Object)adaptor.create(string_literal731);
					adaptor.addChild(root_0, string_literal731_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15570);
					expression732=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression732.getTree());

					string_literal733=(Token)match(input,DO,FOLLOW_DO_in_forStatement15572); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal733_tree = (Object)adaptor.create(string_literal733);
					adaptor.addChild(root_0, string_literal733_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15574);
					statement734=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement734.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:32: 'for' designator 'in' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal735=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15607); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal735_tree = (Object)adaptor.create(string_literal735);
					adaptor.addChild(root_0, string_literal735_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15609);
					designator736=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator736.getTree());

					string_literal737=(Token)match(input,IN,FOLLOW_IN_in_forStatement15611); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal737_tree = (Object)adaptor.create(string_literal737);
					adaptor.addChild(root_0, string_literal737_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15613);
					expression738=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression738.getTree());

					string_literal739=(Token)match(input,DO,FOLLOW_DO_in_forStatement15615); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal739_tree = (Object)adaptor.create(string_literal739);
					adaptor.addChild(root_0, string_literal739_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15617);
					statement740=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement740.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, forStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forStatement"


	public static class withStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:1: withStatement : 'with' withItem 'do' statement ;
	public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
		DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
		retval.start = input.LT(1);
		int withStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal741=null;
		Token string_literal743=null;
		ParserRuleReturnScope withItem742 =null;
		ParserRuleReturnScope statement744 =null;

		Object string_literal741_tree=null;
		Object string_literal743_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:30: ( 'with' withItem 'do' statement )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:32: 'with' withItem 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal741=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement15669); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal741_tree = (Object)adaptor.create(string_literal741);
			adaptor.addChild(root_0, string_literal741_tree);
			}

			pushFollow(FOLLOW_withItem_in_withStatement15671);
			withItem742=withItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem742.getTree());

			string_literal743=(Token)match(input,DO,FOLLOW_DO_in_withStatement15673); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal743_tree = (Object)adaptor.create(string_literal743);
			adaptor.addChild(root_0, string_literal743_tree);
			}

			pushFollow(FOLLOW_statement_in_withStatement15675);
			statement744=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement744.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, withStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withStatement"


	public static class withItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItem"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:1: withItem : ( designator 'as' designator | designator ( ',' designator )* );
	public final DelphiParser.withItem_return withItem() throws RecognitionException {
		DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
		retval.start = input.LT(1);
		int withItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal746=null;
		Token char_literal749=null;
		ParserRuleReturnScope designator745 =null;
		ParserRuleReturnScope designator747 =null;
		ParserRuleReturnScope designator748 =null;
		ParserRuleReturnScope designator750 =null;

		Object string_literal746_tree=null;
		Object char_literal749_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:30: ( designator 'as' designator | designator ( ',' designator )* )
			int alt247=2;
			switch ( input.LA(1) ) {
			case INHERITED:
				{
				int LA247_1 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case TkIdentifier:
				{
				int LA247_2 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case 200:
				{
				int LA247_3 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				int LA247_4 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case POINTER2:
				{
				int LA247_5 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case AT2:
			case DOT:
				{
				int LA247_6 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case LT:
				{
				int LA247_7 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case LBRACK:
				{
				int LA247_8 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA247_9 = input.LA(2);
				if ( (synpred369_Delphi()) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case AS:
				{
				alt247=1;
				}
				break;
			case COMMA:
			case DO:
				{
				alt247=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				throw nvae;
			}
			switch (alt247) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: designator 'as' designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_withItem15732);
					designator745=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator745.getTree());

					string_literal746=(Token)match(input,AS,FOLLOW_AS_in_withItem15734); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal746_tree = (Object)adaptor.create(string_literal746);
					adaptor.addChild(root_0, string_literal746_tree);
					}

					pushFollow(FOLLOW_designator_in_withItem15736);
					designator747=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator747.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: designator ( ',' designator )*
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_withItem15776);
					designator748=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator748.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:43: ( ',' designator )*
					loop246:
					while (true) {
						int alt246=2;
						int LA246_0 = input.LA(1);
						if ( (LA246_0==COMMA) ) {
							alt246=1;
						}

						switch (alt246) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:44: ',' designator
							{
							char_literal749=(Token)match(input,COMMA,FOLLOW_COMMA_in_withItem15779); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal749_tree = (Object)adaptor.create(char_literal749);
							adaptor.addChild(root_0, char_literal749_tree);
							}

							pushFollow(FOLLOW_designator_in_withItem15781);
							designator750=designator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, designator750.getTree());

							}
							break;

						default :
							break loop246;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, withItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItem"


	public static class compoundStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compoundStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
	public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
		DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
		retval.start = input.LT(1);
		int compoundStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal751=null;
		Token string_literal753=null;
		ParserRuleReturnScope statementList752 =null;

		Object string_literal751_tree=null;
		Object string_literal753_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_BEGIN=new RewriteRuleTokenStream(adaptor,"token BEGIN");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:32: 'begin' ( statementList )? 'end'
			{
			string_literal751=(Token)match(input,BEGIN,FOLLOW_BEGIN_in_compoundStatement15831); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BEGIN.add(string_literal751);

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:40: ( statementList )?
			int alt248=2;
			int LA248_0 = input.LA(1);
			if ( (LA248_0==ADD||LA248_0==ANSISTRING||LA248_0==ASM||(LA248_0 >= ASSIGN && LA248_0 <= AT2)||(LA248_0 >= BEGIN && LA248_0 <= CASE)||(LA248_0 >= CONTAINS && LA248_0 <= CONTINUE)||LA248_0==DEFAULT||LA248_0==DOT||LA248_0==EXIT||LA248_0==EXPORT||LA248_0==FINAL||LA248_0==FOR||LA248_0==GOTO||LA248_0==IF||LA248_0==IMPLEMENTS||(LA248_0 >= INDEX && LA248_0 <= INHERITED)||LA248_0==LBRACK||(LA248_0 >= LOCAL && LA248_0 <= MESSAGE)||LA248_0==NAME||LA248_0==OBJECT||LA248_0==OPERATOR||LA248_0==OUT||(LA248_0 >= POINTER && LA248_0 <= POINTER2)||LA248_0==RAISE||(LA248_0 >= READ && LA248_0 <= READONLY)||(LA248_0 >= REFERENCE && LA248_0 <= REGISTER)||(LA248_0 >= REMOVE && LA248_0 <= REPEAT)||LA248_0==SEMI||(LA248_0 >= STORED && LA248_0 <= STRING)||LA248_0==TRY||(LA248_0 >= TkHexNum && LA248_0 <= TkIntNum)||LA248_0==VARIANT||(LA248_0 >= WHILE && LA248_0 <= WRITE)||LA248_0==200) ) {
				alt248=1;
			}
			else if ( (LA248_0==END) ) {
				int LA248_2 = input.LA(2);
				if ( (synpred371_Delphi()) ) {
					alt248=1;
				}
			}
			switch (alt248) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:41: statementList
					{
					pushFollow(FOLLOW_statementList_in_compoundStatement15834);
					statementList752=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statementList.add(statementList752.getTree());
					}
					break;

			}

			string_literal753=(Token)match(input,END,FOLLOW_END_in_compoundStatement15838); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal753);

			// AST REWRITE
			// elements: END, statementList, BEGIN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 566:63: -> ^( 'begin' ( statementList )? 'end' )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:66: ^( 'begin' ( statementList )? 'end' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:76: ( statementList )?
				if ( stream_statementList.hasNext() ) {
					adaptor.addChild(root_1, stream_statementList.nextTree());
				}
				stream_statementList.reset();

				adaptor.addChild(root_1, stream_END.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, compoundStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compoundStatement"


	public static class statementList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statementList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:1: statementList : ( statement )? ( ';' ( statement )? )* ;
	public final DelphiParser.statementList_return statementList() throws RecognitionException {
		DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
		retval.start = input.LT(1);
		int statementList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal755=null;
		ParserRuleReturnScope statement754 =null;
		ParserRuleReturnScope statement756 =null;

		Object char_literal755_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:30: ( ( statement )? ( ';' ( statement )? )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: ( statement )? ( ';' ( statement )? )*
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: ( statement )?
			int alt249=2;
			switch ( input.LA(1) ) {
				case ADD:
				case ANSISTRING:
				case ASM:
				case ASSIGN:
				case AT:
				case AT2:
				case BEGIN:
				case BREAK:
				case CASE:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DOT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case FOR:
				case GOTO:
				case IF:
				case IMPLEMENTS:
				case INDEX:
				case INHERITED:
				case LBRACK:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case POINTER2:
				case RAISE:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case REPEAT:
				case STORED:
				case STRICT:
				case STRING:
				case TRY:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case VARIANT:
				case WHILE:
				case WITH:
				case WRITE:
				case 200:
					{
					alt249=1;
					}
					break;
				case SEMI:
					{
					int LA249_2 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA249_3 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case END:
					{
					int LA249_4 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case EOF:
					{
					int LA249_5 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA249_6 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA249_7 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA249_8 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt249=1;
					}
					}
					break;
			}
			switch (alt249) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:33: statement
					{
					pushFollow(FOLLOW_statement_in_statementList15904);
					statement754=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement754.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:45: ( ';' ( statement )? )*
			loop251:
			while (true) {
				int alt251=2;
				int LA251_0 = input.LA(1);
				if ( (LA251_0==SEMI) ) {
					int LA251_2 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt251=1;
					}

				}

				switch (alt251) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:46: ';' ( statement )?
					{
					char_literal755=(Token)match(input,SEMI,FOLLOW_SEMI_in_statementList15909); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal755_tree = (Object)adaptor.create(char_literal755);
					adaptor.addChild(root_0, char_literal755_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:50: ( statement )?
					int alt250=2;
					switch ( input.LA(1) ) {
						case ADD:
						case ANSISTRING:
						case ASM:
						case ASSIGN:
						case AT:
						case AT2:
						case BEGIN:
						case BREAK:
						case CASE:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DOT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case FOR:
						case GOTO:
						case IF:
						case IMPLEMENTS:
						case INDEX:
						case INHERITED:
						case LBRACK:
						case LOCAL:
						case LPAREN:
						case LT:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case POINTER2:
						case RAISE:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case REPEAT:
						case STORED:
						case STRICT:
						case STRING:
						case TRY:
						case TkHexNum:
						case TkIdentifier:
						case TkIntNum:
						case VARIANT:
						case WHILE:
						case WITH:
						case WRITE:
						case 200:
							{
							alt250=1;
							}
							break;
						case FINALIZATION:
							{
							int LA250_2 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case END:
							{
							int LA250_3 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case EOF:
							{
							int LA250_4 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case SEMI:
							{
							int LA250_5 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case UNTIL:
							{
							int LA250_6 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case EXCEPT:
							{
							int LA250_7 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
						case FINALLY:
							{
							int LA250_8 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt250=1;
							}
							}
							break;
					}
					switch (alt250) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:51: statement
							{
							pushFollow(FOLLOW_statement_in_statementList15912);
							statement756=statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statement756.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop251;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, statementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statementList"


	public static class simpleStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement );
	public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
		DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
		retval.start = input.LT(1);
		int simpleStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal758=null;
		ParserRuleReturnScope designator757 =null;
		ParserRuleReturnScope expression759 =null;
		ParserRuleReturnScope designator760 =null;
		ParserRuleReturnScope gotoStatement761 =null;

		Object string_literal758_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:30: ( designator ':=' expression | designator | gotoStatement )
			int alt252=3;
			switch ( input.LA(1) ) {
			case INHERITED:
				{
				int LA252_1 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIdentifier:
				{
				int LA252_2 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 200:
				{
				int LA252_3 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA252_4 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}
				else if ( (true) ) {
					alt252=3;
				}

				}
				break;
			case POINTER2:
				{
				int LA252_5 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
				{
				int LA252_6 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LT:
				{
				int LA252_7 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA252_8 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				int LA252_9 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASSIGN:
				{
				alt252=1;
				}
				break;
			case EOF:
			case AND:
			case AS:
			case COLON:
			case COMMA:
			case ControlString:
			case DIV:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FALSE:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TRUE:
			case TkAsmHexNum:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 201:
				{
				alt252=2;
				}
				break;
			case DOT:
				{
				int LA252_17 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GOTO:
				{
				alt252=3;
				}
				break;
			case BREAK:
				{
				int LA252_42 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}
				else if ( (true) ) {
					alt252=3;
				}

				}
				break;
			case CONTINUE:
				{
				int LA252_43 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}
				else if ( (true) ) {
					alt252=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				int LA252_44 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt252=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt252=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 44, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}
			switch (alt252) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: designator ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement15966);
					designator757=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator757.getTree());

					string_literal758=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_simpleStatement15968); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal758_tree = (Object)adaptor.create(string_literal758);
					adaptor.addChild(root_0, string_literal758_tree);
					}

					pushFollow(FOLLOW_expression_in_simpleStatement15970);
					expression759=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression759.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16003);
					designator760=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator760.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:32: gotoStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_gotoStatement_in_simpleStatement16037);
					gotoStatement761=gotoStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement761.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, simpleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleStatement"


	public static class gotoStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "gotoStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:574:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
	public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
		DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
		retval.start = input.LT(1);
		int gotoStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal762=null;
		Token string_literal764=null;
		Token char_literal765=null;
		Token char_literal767=null;
		Token string_literal768=null;
		Token string_literal769=null;
		ParserRuleReturnScope label763 =null;
		ParserRuleReturnScope expression766 =null;

		Object string_literal762_tree=null;
		Object string_literal764_tree=null;
		Object char_literal765_tree=null;
		Object char_literal767_tree=null;
		Object string_literal768_tree=null;
		Object string_literal769_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:574:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
			int alt254=4;
			switch ( input.LA(1) ) {
			case GOTO:
				{
				alt254=1;
				}
				break;
			case EXIT:
				{
				alt254=2;
				}
				break;
			case BREAK:
				{
				alt254=3;
				}
				break;
			case CONTINUE:
				{
				alt254=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 254, 0, input);
				throw nvae;
			}
			switch (alt254) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:574:32: 'goto' label
					{
					root_0 = (Object)adaptor.nil();


					string_literal762=(Token)match(input,GOTO,FOLLOW_GOTO_in_gotoStatement16089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal762_tree = (Object)adaptor.create(string_literal762);
					adaptor.addChild(root_0, string_literal762_tree);
					}

					pushFollow(FOLLOW_label_in_gotoStatement16091);
					label763=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label763.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: 'exit' ( '(' expression ')' )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal764=(Token)match(input,EXIT,FOLLOW_EXIT_in_gotoStatement16124); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal764_tree = (Object)adaptor.create(string_literal764);
					adaptor.addChild(root_0, string_literal764_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:39: ( '(' expression ')' )?
					int alt253=2;
					int LA253_0 = input.LA(1);
					if ( (LA253_0==LPAREN) ) {
						int LA253_1 = input.LA(2);
						if ( (synpred378_Delphi()) ) {
							alt253=1;
						}
					}
					switch (alt253) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:40: '(' expression ')'
							{
							char_literal765=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gotoStatement16127); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal765_tree = (Object)adaptor.create(char_literal765);
							adaptor.addChild(root_0, char_literal765_tree);
							}

							pushFollow(FOLLOW_expression_in_gotoStatement16129);
							expression766=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression766.getTree());

							char_literal767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gotoStatement16131); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal767_tree = (Object)adaptor.create(char_literal767);
							adaptor.addChild(root_0, char_literal767_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:576:32: 'break'
					{
					root_0 = (Object)adaptor.nil();


					string_literal768=(Token)match(input,BREAK,FOLLOW_BREAK_in_gotoStatement16166); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal768_tree = (Object)adaptor.create(string_literal768);
					adaptor.addChild(root_0, string_literal768_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:32: 'continue'
					{
					root_0 = (Object)adaptor.nil();


					string_literal769=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_gotoStatement16199); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal769_tree = (Object)adaptor.create(string_literal769);
					adaptor.addChild(root_0, string_literal769_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, gotoStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "gotoStatement"


	public static class constExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constExpression"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression );
	public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
		DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
		retval.start = input.LT(1);
		int constExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal770=null;
		Token char_literal772=null;
		Token char_literal774=null;
		Token char_literal775=null;
		Token char_literal777=null;
		Token char_literal779=null;
		ParserRuleReturnScope recordConstExpression771 =null;
		ParserRuleReturnScope recordConstExpression773 =null;
		ParserRuleReturnScope constExpression776 =null;
		ParserRuleReturnScope constExpression778 =null;
		ParserRuleReturnScope expression780 =null;

		Object char_literal770_tree=null;
		Object char_literal772_tree=null;
		Object char_literal774_tree=null;
		Object char_literal775_tree=null;
		Object char_literal777_tree=null;
		Object char_literal779_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:30: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression )
			int alt257=3;
			alt257 = dfa257.predict(input);
			switch (alt257) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal770=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16252); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal770_tree = (Object)adaptor.create(char_literal770);
					adaptor.addChild(root_0, char_literal770_tree);
					}

					pushFollow(FOLLOW_recordConstExpression_in_constExpression16254);
					recordConstExpression771=recordConstExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression771.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:58: ( ';' recordConstExpression )*
					loop255:
					while (true) {
						int alt255=2;
						int LA255_0 = input.LA(1);
						if ( (LA255_0==SEMI) ) {
							alt255=1;
						}

						switch (alt255) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:59: ';' recordConstExpression
							{
							char_literal772=(Token)match(input,SEMI,FOLLOW_SEMI_in_constExpression16257); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal772_tree = (Object)adaptor.create(char_literal772);
							adaptor.addChild(root_0, char_literal772_tree);
							}

							pushFollow(FOLLOW_recordConstExpression_in_constExpression16259);
							recordConstExpression773=recordConstExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression773.getTree());

							}
							break;

						default :
							break loop255;
						}
					}

					char_literal774=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal774_tree = (Object)adaptor.create(char_literal774);
					adaptor.addChild(root_0, char_literal774_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: '(' constExpression ( ',' constExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal775=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16297); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal775_tree = (Object)adaptor.create(char_literal775);
					adaptor.addChild(root_0, char_literal775_tree);
					}

					pushFollow(FOLLOW_constExpression_in_constExpression16299);
					constExpression776=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression776.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:52: ( ',' constExpression )*
					loop256:
					while (true) {
						int alt256=2;
						int LA256_0 = input.LA(1);
						if ( (LA256_0==COMMA) ) {
							alt256=1;
						}

						switch (alt256) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:53: ',' constExpression
							{
							char_literal777=(Token)match(input,COMMA,FOLLOW_COMMA_in_constExpression16302); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal777_tree = (Object)adaptor.create(char_literal777);
							adaptor.addChild(root_0, char_literal777_tree);
							}

							pushFollow(FOLLOW_constExpression_in_constExpression16304);
							constExpression778=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression778.getTree());

							}
							break;

						default :
							break loop256;
						}
					}

					char_literal779=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal779_tree = (Object)adaptor.create(char_literal779);
					adaptor.addChild(root_0, char_literal779_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:32: expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_constExpression16341);
					expression780=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression780.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, constExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constExpression"


	public static class recordConstExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordConstExpression"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:1: recordConstExpression : ident ':' constExpression ;
	public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
		DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
		retval.start = input.LT(1);
		int recordConstExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal782=null;
		ParserRuleReturnScope ident781 =null;
		ParserRuleReturnScope constExpression783 =null;

		Object char_literal782_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:30: ( ident ':' constExpression )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:32: ident ':' constExpression
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_recordConstExpression16385);
			ident781=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident781.getTree());

			char_literal782=(Token)match(input,COLON,FOLLOW_COLON_in_recordConstExpression16387); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal782_tree = (Object)adaptor.create(char_literal782);
			adaptor.addChild(root_0, char_literal782_tree);
			}

			pushFollow(FOLLOW_constExpression_in_recordConstExpression16389);
			constExpression783=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression783.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, recordConstExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordConstExpression"


	public static class tryStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "tryStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
	public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
		DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
		retval.start = input.LT(1);
		int tryStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal784=null;
		Token string_literal786=null;
		Token string_literal788=null;
		Token string_literal789=null;
		Token string_literal791=null;
		Token string_literal793=null;
		ParserRuleReturnScope statementList785 =null;
		ParserRuleReturnScope handlerList787 =null;
		ParserRuleReturnScope statementList790 =null;
		ParserRuleReturnScope statementList792 =null;

		Object string_literal784_tree=null;
		Object string_literal786_tree=null;
		Object string_literal788_tree=null;
		Object string_literal789_tree=null;
		Object string_literal791_tree=null;
		Object string_literal793_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==TRY) ) {
				int LA261_1 = input.LA(2);
				if ( (synpred386_Delphi()) ) {
					alt261=1;
				}
				else if ( (true) ) {
					alt261=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 261, 0, input);
				throw nvae;
			}

			switch (alt261) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: 'try' ( statementList )? 'except' handlerList 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal784=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16445); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal784_tree = (Object)adaptor.create(string_literal784);
					adaptor.addChild(root_0, string_literal784_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:38: ( statementList )?
					int alt258=2;
					int LA258_0 = input.LA(1);
					if ( (LA258_0==ADD||LA258_0==ANSISTRING||LA258_0==ASM||(LA258_0 >= ASSIGN && LA258_0 <= AT2)||(LA258_0 >= BEGIN && LA258_0 <= CASE)||(LA258_0 >= CONTAINS && LA258_0 <= CONTINUE)||LA258_0==DEFAULT||LA258_0==DOT||LA258_0==EXIT||LA258_0==EXPORT||LA258_0==FINAL||LA258_0==FOR||LA258_0==GOTO||LA258_0==IF||LA258_0==IMPLEMENTS||(LA258_0 >= INDEX && LA258_0 <= INHERITED)||LA258_0==LBRACK||(LA258_0 >= LOCAL && LA258_0 <= MESSAGE)||LA258_0==NAME||LA258_0==OBJECT||LA258_0==OPERATOR||LA258_0==OUT||(LA258_0 >= POINTER && LA258_0 <= POINTER2)||LA258_0==RAISE||(LA258_0 >= READ && LA258_0 <= READONLY)||(LA258_0 >= REFERENCE && LA258_0 <= REGISTER)||(LA258_0 >= REMOVE && LA258_0 <= REPEAT)||LA258_0==SEMI||(LA258_0 >= STORED && LA258_0 <= STRING)||LA258_0==TRY||(LA258_0 >= TkHexNum && LA258_0 <= TkIntNum)||LA258_0==VARIANT||(LA258_0 >= WHILE && LA258_0 <= WRITE)||LA258_0==200) ) {
						alt258=1;
					}
					else if ( (LA258_0==EXCEPT) ) {
						int LA258_2 = input.LA(2);
						if ( (synpred385_Delphi()) ) {
							alt258=1;
						}
					}
					switch (alt258) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16448);
							statementList785=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList785.getTree());

							}
							break;

					}

					string_literal786=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_tryStatement16452); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal786_tree = (Object)adaptor.create(string_literal786);
					adaptor.addChild(root_0, string_literal786_tree);
					}

					pushFollow(FOLLOW_handlerList_in_tryStatement16454);
					handlerList787=handlerList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerList787.getTree());

					string_literal788=(Token)match(input,END,FOLLOW_END_in_tryStatement16456); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal788_tree = (Object)adaptor.create(string_literal788);
					adaptor.addChild(root_0, string_literal788_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal789=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16489); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal789_tree = (Object)adaptor.create(string_literal789);
					adaptor.addChild(root_0, string_literal789_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:38: ( statementList )?
					int alt259=2;
					int LA259_0 = input.LA(1);
					if ( (LA259_0==ADD||LA259_0==ANSISTRING||LA259_0==ASM||(LA259_0 >= ASSIGN && LA259_0 <= AT2)||(LA259_0 >= BEGIN && LA259_0 <= CASE)||(LA259_0 >= CONTAINS && LA259_0 <= CONTINUE)||LA259_0==DEFAULT||LA259_0==DOT||LA259_0==EXIT||LA259_0==EXPORT||LA259_0==FINAL||LA259_0==FOR||LA259_0==GOTO||LA259_0==IF||LA259_0==IMPLEMENTS||(LA259_0 >= INDEX && LA259_0 <= INHERITED)||LA259_0==LBRACK||(LA259_0 >= LOCAL && LA259_0 <= MESSAGE)||LA259_0==NAME||LA259_0==OBJECT||LA259_0==OPERATOR||LA259_0==OUT||(LA259_0 >= POINTER && LA259_0 <= POINTER2)||LA259_0==RAISE||(LA259_0 >= READ && LA259_0 <= READONLY)||(LA259_0 >= REFERENCE && LA259_0 <= REGISTER)||(LA259_0 >= REMOVE && LA259_0 <= REPEAT)||LA259_0==SEMI||(LA259_0 >= STORED && LA259_0 <= STRING)||LA259_0==TRY||(LA259_0 >= TkHexNum && LA259_0 <= TkIntNum)||LA259_0==VARIANT||(LA259_0 >= WHILE && LA259_0 <= WRITE)||LA259_0==200) ) {
						alt259=1;
					}
					else if ( (LA259_0==FINALLY) ) {
						int LA259_2 = input.LA(2);
						if ( (synpred387_Delphi()) ) {
							alt259=1;
						}
					}
					switch (alt259) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16492);
							statementList790=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList790.getTree());

							}
							break;

					}

					string_literal791=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_tryStatement16496); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal791_tree = (Object)adaptor.create(string_literal791);
					adaptor.addChild(root_0, string_literal791_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:65: ( statementList )?
					int alt260=2;
					int LA260_0 = input.LA(1);
					if ( (LA260_0==ADD||LA260_0==ANSISTRING||LA260_0==ASM||(LA260_0 >= ASSIGN && LA260_0 <= AT2)||(LA260_0 >= BEGIN && LA260_0 <= CASE)||(LA260_0 >= CONTAINS && LA260_0 <= CONTINUE)||LA260_0==DEFAULT||LA260_0==DOT||LA260_0==EXIT||LA260_0==EXPORT||LA260_0==FINAL||LA260_0==FOR||LA260_0==GOTO||LA260_0==IF||LA260_0==IMPLEMENTS||(LA260_0 >= INDEX && LA260_0 <= INHERITED)||LA260_0==LBRACK||(LA260_0 >= LOCAL && LA260_0 <= MESSAGE)||LA260_0==NAME||LA260_0==OBJECT||LA260_0==OPERATOR||LA260_0==OUT||(LA260_0 >= POINTER && LA260_0 <= POINTER2)||LA260_0==RAISE||(LA260_0 >= READ && LA260_0 <= READONLY)||(LA260_0 >= REFERENCE && LA260_0 <= REGISTER)||(LA260_0 >= REMOVE && LA260_0 <= REPEAT)||LA260_0==SEMI||(LA260_0 >= STORED && LA260_0 <= STRING)||LA260_0==TRY||(LA260_0 >= TkHexNum && LA260_0 <= TkIntNum)||LA260_0==VARIANT||(LA260_0 >= WHILE && LA260_0 <= WRITE)||LA260_0==200) ) {
						alt260=1;
					}
					else if ( (LA260_0==END) ) {
						int LA260_2 = input.LA(2);
						if ( (synpred388_Delphi()) ) {
							alt260=1;
						}
					}
					switch (alt260) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:66: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16499);
							statementList792=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList792.getTree());

							}
							break;

					}

					string_literal793=(Token)match(input,END,FOLLOW_END_in_tryStatement16503); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal793_tree = (Object)adaptor.create(string_literal793);
					adaptor.addChild(root_0, string_literal793_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, tryStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tryStatement"


	public static class handlerList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
	public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
		DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
		retval.start = input.LT(1);
		int handlerList_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal795=null;
		ParserRuleReturnScope handler794 =null;
		ParserRuleReturnScope statementList796 =null;
		ParserRuleReturnScope statementList797 =null;

		Object string_literal795_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:30: ( ( handler )* ( 'else' statementList )? | statementList )
			int alt264=2;
			switch ( input.LA(1) ) {
			case ELSE:
			case ON:
				{
				alt264=1;
				}
				break;
			case END:
				{
				int LA264_2 = input.LA(2);
				if ( (synpred391_Delphi()) ) {
					alt264=1;
				}
				else if ( (true) ) {
					alt264=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case ASM:
			case ASSIGN:
			case AT:
			case AT2:
			case BEGIN:
			case BREAK:
			case CASE:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DOT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case FOR:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case INDEX:
			case INHERITED:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case POINTER2:
			case RAISE:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case REPEAT:
			case SEMI:
			case STORED:
			case STRICT:
			case STRING:
			case TRY:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case VARIANT:
			case WHILE:
			case WITH:
			case WRITE:
			case 200:
				{
				alt264=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 264, 0, input);
				throw nvae;
			}
			switch (alt264) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( handler )* ( 'else' statementList )?
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( handler )*
					loop262:
					while (true) {
						int alt262=2;
						int LA262_0 = input.LA(1);
						if ( (LA262_0==ON) ) {
							alt262=1;
						}

						switch (alt262) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:33: handler
							{
							pushFollow(FOLLOW_handler_in_handlerList16558);
							handler794=handler();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, handler794.getTree());

							}
							break;

						default :
							break loop262;
						}
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:43: ( 'else' statementList )?
					int alt263=2;
					int LA263_0 = input.LA(1);
					if ( (LA263_0==ELSE) ) {
						alt263=1;
					}
					switch (alt263) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:44: 'else' statementList
							{
							string_literal795=(Token)match(input,ELSE,FOLLOW_ELSE_in_handlerList16563); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal795_tree = (Object)adaptor.create(string_literal795);
							adaptor.addChild(root_0, string_literal795_tree);
							}

							pushFollow(FOLLOW_statementList_in_handlerList16565);
							statementList796=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList796.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: statementList
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statementList_in_handlerList16600);
					statementList797=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList797.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, handlerList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerList"


	public static class handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
	public final DelphiParser.handler_return handler() throws RecognitionException {
		DelphiParser.handler_return retval = new DelphiParser.handler_return();
		retval.start = input.LT(1);
		int handler_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal798=null;
		Token string_literal801=null;
		ParserRuleReturnScope handlerIdent799 =null;
		ParserRuleReturnScope typeId800 =null;
		ParserRuleReturnScope handlerStatement802 =null;

		Object string_literal798_tree=null;
		Object string_literal801_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
			{
			root_0 = (Object)adaptor.nil();


			string_literal798=(Token)match(input,ON,FOLLOW_ON_in_handler16658); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal798_tree = (Object)adaptor.create(string_literal798);
			adaptor.addChild(root_0, string_literal798_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:37: ( handlerIdent )?
			int alt265=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA265_1 = input.LA(2);
					if ( (LA265_1==COLON) ) {
						alt265=1;
					}
					}
					break;
				case 200:
					{
					int LA265_2 = input.LA(2);
					if ( (LA265_2==TkIdentifier) ) {
						int LA265_6 = input.LA(3);
						if ( (LA265_6==COLON) ) {
							alt265=1;
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA265_3 = input.LA(2);
					if ( (LA265_3==COLON) ) {
						alt265=1;
					}
					}
					break;
			}
			switch (alt265) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:38: handlerIdent
					{
					pushFollow(FOLLOW_handlerIdent_in_handler16661);
					handlerIdent799=handlerIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerIdent799.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_typeId_in_handler16665);
			typeId800=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId800.getTree());

			string_literal801=(Token)match(input,DO,FOLLOW_DO_in_handler16667); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal801_tree = (Object)adaptor.create(string_literal801);
			adaptor.addChild(root_0, string_literal801_tree);
			}

			pushFollow(FOLLOW_handlerStatement_in_handler16669);
			handlerStatement802=handlerStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerStatement802.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, handler_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handler"


	public static class handlerIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerIdent"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:1: handlerIdent : ident ':' ;
	public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
		DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
		retval.start = input.LT(1);
		int handlerIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal804=null;
		ParserRuleReturnScope ident803 =null;

		Object char_literal804_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:30: ( ident ':' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: ident ':'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_handlerIdent16724);
			ident803=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident803.getTree());

			char_literal804=(Token)match(input,COLON,FOLLOW_COLON_in_handlerIdent16726); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal804_tree = (Object)adaptor.create(char_literal804);
			adaptor.addChild(root_0, char_literal804_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, handlerIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerIdent"


	public static class handlerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:1: handlerStatement : ( statement ( ';' )? | ';' );
	public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
		DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
		retval.start = input.LT(1);
		int handlerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal806=null;
		Token char_literal807=null;
		ParserRuleReturnScope statement805 =null;

		Object char_literal806_tree=null;
		Object char_literal807_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:30: ( statement ( ';' )? | ';' )
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==EOF||LA267_0==ADD||LA267_0==ANSISTRING||LA267_0==ASM||(LA267_0 >= ASSIGN && LA267_0 <= AT2)||(LA267_0 >= BEGIN && LA267_0 <= CASE)||(LA267_0 >= CONTAINS && LA267_0 <= CONTINUE)||LA267_0==DEFAULT||LA267_0==DOT||(LA267_0 >= ELSE && LA267_0 <= END)||LA267_0==EXIT||LA267_0==EXPORT||LA267_0==FINAL||LA267_0==FOR||LA267_0==GOTO||LA267_0==IF||LA267_0==IMPLEMENTS||(LA267_0 >= INDEX && LA267_0 <= INHERITED)||LA267_0==LBRACK||(LA267_0 >= LOCAL && LA267_0 <= MESSAGE)||LA267_0==NAME||LA267_0==OBJECT||(LA267_0 >= ON && LA267_0 <= OPERATOR)||LA267_0==OUT||(LA267_0 >= POINTER && LA267_0 <= POINTER2)||LA267_0==RAISE||(LA267_0 >= READ && LA267_0 <= READONLY)||(LA267_0 >= REFERENCE && LA267_0 <= REGISTER)||(LA267_0 >= REMOVE && LA267_0 <= REPEAT)||(LA267_0 >= STORED && LA267_0 <= STRING)||LA267_0==TRY||(LA267_0 >= TkHexNum && LA267_0 <= TkIntNum)||LA267_0==VARIANT||(LA267_0 >= WHILE && LA267_0 <= WRITE)||LA267_0==200) ) {
				alt267=1;
			}
			else if ( (LA267_0==SEMI) ) {
				int LA267_2 = input.LA(2);
				if ( (synpred394_Delphi()) ) {
					alt267=1;
				}
				else if ( (true) ) {
					alt267=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}

			switch (alt267) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: statement ( ';' )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statement_in_handlerStatement16775);
					statement805=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement805.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:42: ( ';' )?
					int alt266=2;
					int LA266_0 = input.LA(1);
					if ( (LA266_0==SEMI) ) {
						alt266=1;
					}
					switch (alt266) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:43: ';'
							{
							char_literal806=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16778); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal806_tree = (Object)adaptor.create(char_literal806);
							adaptor.addChild(root_0, char_literal806_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:32: ';'
					{
					root_0 = (Object)adaptor.nil();


					char_literal807=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16813); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal807_tree = (Object)adaptor.create(char_literal807);
					adaptor.addChild(root_0, char_literal807_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, handlerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerStatement"


	public static class raiseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raiseStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
	public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
		DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
		retval.start = input.LT(1);
		int raiseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal808=null;
		Token AT810=null;
		ParserRuleReturnScope designator809 =null;
		ParserRuleReturnScope designator811 =null;

		Object string_literal808_tree=null;
		Object AT810_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:30: ( 'raise' ( designator )? ( AT designator )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:32: 'raise' ( designator )? ( AT designator )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal808=(Token)match(input,RAISE,FOLLOW_RAISE_in_raiseStatement16864); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal808_tree = (Object)adaptor.create(string_literal808);
			adaptor.addChild(root_0, string_literal808_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:40: ( designator )?
			int alt268=2;
			switch ( input.LA(1) ) {
				case INHERITED:
					{
					int LA268_1 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA268_2 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case 200:
					{
					int LA268_3 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case AT:
					{
					int LA268_4 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case POINTER2:
					{
					int LA268_5 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case AT2:
					{
					int LA268_6 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case LT:
					{
					int LA268_7 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA268_8 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case LPAREN:
					{
					int LA268_9 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA268_10 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case ELSE:
					{
					int LA268_11 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case EOF:
					{
					int LA268_12 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case SEMI:
					{
					int LA268_13 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case END:
					{
					int LA268_14 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA268_15 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA268_16 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case DOT:
					{
					int LA268_17 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case 201:
					{
					int LA268_18 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case NOT:
					{
					int LA268_19 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case PLUS:
					{
					int LA268_20 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case MINUS:
					{
					int LA268_21 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case TkHexNum:
				case TkIntNum:
					{
					int LA268_22 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case TkRealNum:
					{
					int LA268_23 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case TkAsmHexNum:
					{
					int LA268_24 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case TRUE:
					{
					int LA268_25 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case FALSE:
					{
					int LA268_26 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case NIL:
					{
					int LA268_27 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case ControlString:
					{
					int LA268_28 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case QuotedString:
					{
					int LA268_29 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA268_30 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case EQUAL:
					{
					int LA268_31 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case GE:
				case GT:
				case IN:
				case IS:
				case LE:
				case NOT_EQUAL:
					{
					int LA268_32 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case DOTDOT:
					{
					int LA268_33 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case COMMA:
					{
					int LA268_34 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case COLON:
					{
					int LA268_35 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA268_36 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA268_37 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA268_38 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA268_39 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
				case ON:
					{
					int LA268_40 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt268=1;
					}
					}
					break;
			}
			switch (alt268) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:41: designator
					{
					pushFollow(FOLLOW_designator_in_raiseStatement16867);
					designator809=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator809.getTree());

					}
					break;

			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:54: ( AT designator )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==AT) ) {
				int LA269_1 = input.LA(2);
				if ( (synpred396_Delphi()) ) {
					alt269=1;
				}
			}
			switch (alt269) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:55: AT designator
					{
					AT810=(Token)match(input,AT,FOLLOW_AT_in_raiseStatement16872); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT810_tree = (Object)adaptor.create(AT810);
					adaptor.addChild(root_0, AT810_tree);
					}

					pushFollow(FOLLOW_designator_in_raiseStatement16874);
					designator811=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator811.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, raiseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "raiseStatement"


	public static class assemblerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assemblerStatement"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
	public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
		DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
		retval.start = input.LT(1);
		int assemblerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal812=null;
		Token set813=null;
		Token string_literal814=null;

		Object string_literal812_tree=null;
		Object set813_tree=null;
		Object string_literal814_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:30: ( 'asm' (~ ( 'end' ) )* 'end' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:32: 'asm' (~ ( 'end' ) )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal812=(Token)match(input,ASM,FOLLOW_ASM_in_assemblerStatement16927); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal812_tree = (Object)adaptor.create(string_literal812);
			adaptor.addChild(root_0, string_literal812_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:38: (~ ( 'end' ) )*
			loop270:
			while (true) {
				int alt270=2;
				int LA270_0 = input.LA(1);
				if ( ((LA270_0 >= ABSOLUTE && LA270_0 <= ELSE)||(LA270_0 >= EQUAL && LA270_0 <= 201)) ) {
					alt270=1;
				}

				switch (alt270) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
					{
					set813=input.LT(1);
					if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE)||(input.LA(1) >= EQUAL && input.LA(1) <= 201) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set813));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop270;
				}
			}

			string_literal814=(Token)match(input,END,FOLLOW_END_in_assemblerStatement16935); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal814_tree = (Object)adaptor.create(string_literal814);
			adaptor.addChild(root_0, string_literal814_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, assemblerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assemblerStatement"


	public static class methodDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:1: methodDirective : ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective );
	public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
		DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
		retval.start = input.LT(1);
		int methodDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal822=null;
		ParserRuleReturnScope reintroduceDirective815 =null;
		ParserRuleReturnScope overloadDirective816 =null;
		ParserRuleReturnScope bindingDirective817 =null;
		ParserRuleReturnScope abstractDirective818 =null;
		ParserRuleReturnScope inlineDirective819 =null;
		ParserRuleReturnScope callConvention820 =null;
		ParserRuleReturnScope hintingDirective821 =null;
		ParserRuleReturnScope oldCallConventionDirective823 =null;
		ParserRuleReturnScope dispIDDirective824 =null;

		Object char_literal822_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:30: ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective )
			int alt271=9;
			switch ( input.LA(1) ) {
			case REINTRODUCE:
				{
				alt271=1;
				}
				break;
			case OVERLOAD:
				{
				alt271=2;
				}
				break;
			case DYNAMIC:
			case MESSAGE:
			case OVERRIDE:
			case STATIC:
			case VIRTUAL:
				{
				alt271=3;
				}
				break;
			case ABSTRACT:
			case FINAL:
				{
				alt271=4;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt271=5;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt271=6;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt271=7;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt271=8;
				}
				break;
			case DISPID:
				{
				alt271=9;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				throw nvae;
			}
			switch (alt271) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:32: reintroduceDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_reintroduceDirective_in_methodDirective17008);
					reintroduceDirective815=reintroduceDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reintroduceDirective815.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_methodDirective17050);
					overloadDirective816=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective816.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: bindingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bindingDirective_in_methodDirective17095);
					bindingDirective817=bindingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDirective817.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:617:32: abstractDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_abstractDirective_in_methodDirective17141);
					abstractDirective818=abstractDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abstractDirective818.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_methodDirective17186);
					inlineDirective819=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective819.getTree());

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:619:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_methodDirective17233);
					callConvention820=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention820.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:620:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_methodDirective17281);
					hintingDirective821=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective821.getTree());

					char_literal822=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirective17283); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal822_tree = (Object)adaptor.create(char_literal822);
					adaptor.addChild(root_0, char_literal822_tree);
					}

					}
					break;
				case 8 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective17325);
					oldCallConventionDirective823=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective823.getTree());

					}
					break;
				case 9 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_methodDirective17361);
					dispIDDirective824=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective824.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, methodDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirective"


	public static class functionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:1: functionDirective : ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' );
	public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
		DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
		retval.start = input.LT(1);
		int functionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal830=null;
		Token string_literal833=null;
		Token char_literal834=null;
		ParserRuleReturnScope overloadDirective825 =null;
		ParserRuleReturnScope inlineDirective826 =null;
		ParserRuleReturnScope callConvention827 =null;
		ParserRuleReturnScope oldCallConventionDirective828 =null;
		ParserRuleReturnScope hintingDirective829 =null;
		ParserRuleReturnScope callConventionNoSemi831 =null;
		ParserRuleReturnScope externalDirective832 =null;

		Object char_literal830_tree=null;
		Object string_literal833_tree=null;
		Object char_literal834_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:30: ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' )
			int alt273=7;
			switch ( input.LA(1) ) {
			case OVERLOAD:
				{
				alt273=1;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt273=2;
				}
				break;
			case CDECL:
				{
				int LA273_3 = input.LA(2);
				if ( (LA273_3==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_3==EXTERNAL||LA273_3==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PASCAL:
				{
				int LA273_4 = input.LA(2);
				if ( (LA273_4==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_4==EXTERNAL||LA273_4==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGISTER:
				{
				int LA273_5 = input.LA(2);
				if ( (LA273_5==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_5==EXTERNAL||LA273_5==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SAFECALL:
				{
				int LA273_6 = input.LA(2);
				if ( (LA273_6==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_6==EXTERNAL||LA273_6==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STDCALL:
				{
				int LA273_7 = input.LA(2);
				if ( (LA273_7==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_7==EXTERNAL||LA273_7==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORT:
				{
				int LA273_8 = input.LA(2);
				if ( (LA273_8==SEMI) ) {
					alt273=3;
				}
				else if ( (LA273_8==EXTERNAL||LA273_8==VARARGS) ) {
					alt273=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt273=4;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt273=5;
				}
				break;
			case EXTERNAL:
			case VARARGS:
				{
				alt273=6;
				}
				break;
			case UNSAFE:
				{
				alt273=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 273, 0, input);
				throw nvae;
			}
			switch (alt273) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_functionDirective17409);
					overloadDirective825=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective825.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_functionDirective17452);
					inlineDirective826=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective826.getTree());

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_functionDirective17497);
					callConvention827=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention827.getTree());

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective17543);
					oldCallConventionDirective828=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective828.getTree());

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_functionDirective17577);
					hintingDirective829=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective829.getTree());

					char_literal830=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17579); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal830_tree = (Object)adaptor.create(char_literal830);
					adaptor.addChild(root_0, char_literal830_tree);
					}

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( callConventionNoSemi )? externalDirective
					{
					root_0 = (Object)adaptor.nil();


					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( callConventionNoSemi )?
					int alt272=2;
					int LA272_0 = input.LA(1);
					if ( (LA272_0==CDECL||LA272_0==EXPORT||LA272_0==PASCAL||LA272_0==REGISTER||LA272_0==SAFECALL||LA272_0==STDCALL) ) {
						alt272=1;
					}
					switch (alt272) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: callConventionNoSemi
							{
							pushFollow(FOLLOW_callConventionNoSemi_in_functionDirective17620);
							callConventionNoSemi831=callConventionNoSemi();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi831.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_externalDirective_in_functionDirective17624);
					externalDirective832=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective832.getTree());

					}
					break;
				case 7 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:32: 'unsafe' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal833=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_functionDirective17667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal833_tree = (Object)adaptor.create(string_literal833);
					adaptor.addChild(root_0, string_literal833_tree);
					}

					char_literal834=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal834_tree = (Object)adaptor.create(char_literal834);
					adaptor.addChild(root_0, char_literal834_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, functionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirective"


	public static class reintroduceDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reintroduceDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:1: reintroduceDirective : 'reintroduce' ';' ;
	public final DelphiParser.reintroduceDirective_return reintroduceDirective() throws RecognitionException {
		DelphiParser.reintroduceDirective_return retval = new DelphiParser.reintroduceDirective_return();
		retval.start = input.LT(1);
		int reintroduceDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal835=null;
		Token char_literal836=null;

		Object string_literal835_tree=null;
		Object char_literal836_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:30: ( 'reintroduce' ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:32: 'reintroduce' ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal835=(Token)match(input,REINTRODUCE,FOLLOW_REINTRODUCE_in_reintroduceDirective17729); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal835_tree = (Object)adaptor.create(string_literal835);
			adaptor.addChild(root_0, string_literal835_tree);
			}

			char_literal836=(Token)match(input,SEMI,FOLLOW_SEMI_in_reintroduceDirective17731); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal836_tree = (Object)adaptor.create(char_literal836);
			adaptor.addChild(root_0, char_literal836_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, reintroduceDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "reintroduceDirective"


	public static class overloadDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "overloadDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:1: overloadDirective : 'overload' ( ';' )? ;
	public final DelphiParser.overloadDirective_return overloadDirective() throws RecognitionException {
		DelphiParser.overloadDirective_return retval = new DelphiParser.overloadDirective_return();
		retval.start = input.LT(1);
		int overloadDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal837=null;
		Token char_literal838=null;

		Object string_literal837_tree=null;
		Object char_literal838_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:30: ( 'overload' ( ';' )? )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: 'overload' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal837=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_overloadDirective17779); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal837_tree = (Object)adaptor.create(string_literal837);
			adaptor.addChild(root_0, string_literal837_tree);
			}

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:43: ( ';' )?
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==SEMI) ) {
				int LA274_1 = input.LA(2);
				if ( (synpred414_Delphi()) ) {
					alt274=1;
				}
			}
			switch (alt274) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:44: ';'
					{
					char_literal838=(Token)match(input,SEMI,FOLLOW_SEMI_in_overloadDirective17782); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal838_tree = (Object)adaptor.create(char_literal838);
					adaptor.addChild(root_0, char_literal838_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, overloadDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadDirective"


	public static class bindingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bindingDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:1: bindingDirective : ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' );
	public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
		DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
		retval.start = input.LT(1);
		int bindingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal839=null;
		Token char_literal841=null;
		Token string_literal842=null;
		Token char_literal843=null;
		Token string_literal844=null;
		Token char_literal845=null;
		Token string_literal846=null;
		Token char_literal847=null;
		Token string_literal848=null;
		Token char_literal849=null;
		ParserRuleReturnScope expression840 =null;

		Object string_literal839_tree=null;
		Object char_literal841_tree=null;
		Object string_literal842_tree=null;
		Object char_literal843_tree=null;
		Object string_literal844_tree=null;
		Object char_literal845_tree=null;
		Object string_literal846_tree=null;
		Object char_literal847_tree=null;
		Object string_literal848_tree=null;
		Object char_literal849_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:30: ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' )
			int alt275=5;
			switch ( input.LA(1) ) {
			case MESSAGE:
				{
				alt275=1;
				}
				break;
			case STATIC:
				{
				alt275=2;
				}
				break;
			case DYNAMIC:
				{
				alt275=3;
				}
				break;
			case OVERRIDE:
				{
				alt275=4;
				}
				break;
			case VIRTUAL:
				{
				alt275=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}
			switch (alt275) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:32: 'message' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal839=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_bindingDirective17837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal839_tree = (Object)adaptor.create(string_literal839);
					adaptor.addChild(root_0, string_literal839_tree);
					}

					pushFollow(FOLLOW_expression_in_bindingDirective17839);
					expression840=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression840.getTree());

					char_literal841=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17841); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal841_tree = (Object)adaptor.create(char_literal841);
					adaptor.addChild(root_0, char_literal841_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: 'static' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal842=(Token)match(input,STATIC,FOLLOW_STATIC_in_bindingDirective17874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal842_tree = (Object)adaptor.create(string_literal842);
					adaptor.addChild(root_0, string_literal842_tree);
					}

					char_literal843=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17876); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal843_tree = (Object)adaptor.create(char_literal843);
					adaptor.addChild(root_0, char_literal843_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: 'dynamic' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal844=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_bindingDirective17909); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal844_tree = (Object)adaptor.create(string_literal844);
					adaptor.addChild(root_0, string_literal844_tree);
					}

					char_literal845=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17911); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal845_tree = (Object)adaptor.create(char_literal845);
					adaptor.addChild(root_0, char_literal845_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:32: 'override' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal846=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_bindingDirective17944); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal846_tree = (Object)adaptor.create(string_literal846);
					adaptor.addChild(root_0, string_literal846_tree);
					}

					char_literal847=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17946); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal847_tree = (Object)adaptor.create(char_literal847);
					adaptor.addChild(root_0, char_literal847_tree);
					}

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:32: 'virtual' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal848=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_bindingDirective17979); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal848_tree = (Object)adaptor.create(string_literal848);
					adaptor.addChild(root_0, string_literal848_tree);
					}

					char_literal849=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17981); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal849_tree = (Object)adaptor.create(char_literal849);
					adaptor.addChild(root_0, char_literal849_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, bindingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bindingDirective"


	public static class abstractDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "abstractDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:1: abstractDirective : ( 'abstract' ';' | 'final' ';' );
	public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
		DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
		retval.start = input.LT(1);
		int abstractDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal850=null;
		Token char_literal851=null;
		Token string_literal852=null;
		Token char_literal853=null;

		Object string_literal850_tree=null;
		Object char_literal851_tree=null;
		Object string_literal852_tree=null;
		Object char_literal853_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:30: ( 'abstract' ';' | 'final' ';' )
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==ABSTRACT) ) {
				alt276=1;
			}
			else if ( (LA276_0==FINAL) ) {
				alt276=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 276, 0, input);
				throw nvae;
			}

			switch (alt276) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:32: 'abstract' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal850=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_abstractDirective18029); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal850_tree = (Object)adaptor.create(string_literal850);
					adaptor.addChild(root_0, string_literal850_tree);
					}

					char_literal851=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal851_tree = (Object)adaptor.create(char_literal851);
					adaptor.addChild(root_0, char_literal851_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:32: 'final' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal852=(Token)match(input,FINAL,FOLLOW_FINAL_in_abstractDirective18064); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal852_tree = (Object)adaptor.create(string_literal852);
					adaptor.addChild(root_0, string_literal852_tree);
					}

					char_literal853=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18066); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal853_tree = (Object)adaptor.create(char_literal853);
					adaptor.addChild(root_0, char_literal853_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, abstractDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "abstractDirective"


	public static class inlineDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:1: inlineDirective : ( 'inline' ';' | 'assembler' ';' );
	public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
		DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
		retval.start = input.LT(1);
		int inlineDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal854=null;
		Token char_literal855=null;
		Token string_literal856=null;
		Token char_literal857=null;

		Object string_literal854_tree=null;
		Object char_literal855_tree=null;
		Object string_literal856_tree=null;
		Object char_literal857_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:30: ( 'inline' ';' | 'assembler' ';' )
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==INLINE) ) {
				alt277=1;
			}
			else if ( (LA277_0==ASSEMBLER) ) {
				alt277=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}

			switch (alt277) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:32: 'inline' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal854=(Token)match(input,INLINE,FOLLOW_INLINE_in_inlineDirective18116); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal854_tree = (Object)adaptor.create(string_literal854);
					adaptor.addChild(root_0, string_literal854_tree);
					}

					char_literal855=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18118); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal855_tree = (Object)adaptor.create(char_literal855);
					adaptor.addChild(root_0, char_literal855_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: 'assembler' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal856=(Token)match(input,ASSEMBLER,FOLLOW_ASSEMBLER_in_inlineDirective18151); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal856_tree = (Object)adaptor.create(string_literal856);
					adaptor.addChild(root_0, string_literal856_tree);
					}

					char_literal857=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal857_tree = (Object)adaptor.create(char_literal857);
					adaptor.addChild(root_0, char_literal857_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, inlineDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineDirective"


	public static class callConvention_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConvention"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:1: callConvention : ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' );
	public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
		DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
		retval.start = input.LT(1);
		int callConvention_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal858=null;
		Token char_literal859=null;
		Token string_literal860=null;
		Token char_literal861=null;
		Token string_literal862=null;
		Token char_literal863=null;
		Token string_literal864=null;
		Token char_literal865=null;
		Token string_literal866=null;
		Token char_literal867=null;
		Token string_literal868=null;
		Token char_literal869=null;

		Object string_literal858_tree=null;
		Object char_literal859_tree=null;
		Object string_literal860_tree=null;
		Object char_literal861_tree=null;
		Object string_literal862_tree=null;
		Object char_literal863_tree=null;
		Object string_literal864_tree=null;
		Object char_literal865_tree=null;
		Object string_literal866_tree=null;
		Object char_literal867_tree=null;
		Object string_literal868_tree=null;
		Object char_literal869_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:30: ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' )
			int alt278=6;
			switch ( input.LA(1) ) {
			case CDECL:
				{
				alt278=1;
				}
				break;
			case PASCAL:
				{
				alt278=2;
				}
				break;
			case REGISTER:
				{
				alt278=3;
				}
				break;
			case SAFECALL:
				{
				alt278=4;
				}
				break;
			case STDCALL:
				{
				alt278=5;
				}
				break;
			case EXPORT:
				{
				alt278=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 278, 0, input);
				throw nvae;
			}
			switch (alt278) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:32: 'cdecl' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal858=(Token)match(input,CDECL,FOLLOW_CDECL_in_callConvention18205); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal858_tree = (Object)adaptor.create(string_literal858);
					adaptor.addChild(root_0, string_literal858_tree);
					}

					char_literal859=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal859_tree = (Object)adaptor.create(char_literal859);
					adaptor.addChild(root_0, char_literal859_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: 'pascal' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal860=(Token)match(input,PASCAL,FOLLOW_PASCAL_in_callConvention18244); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal860_tree = (Object)adaptor.create(string_literal860);
					adaptor.addChild(root_0, string_literal860_tree);
					}

					char_literal861=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18246); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal861_tree = (Object)adaptor.create(char_literal861);
					adaptor.addChild(root_0, char_literal861_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:650:32: 'register' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal862=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_callConvention18282); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal862_tree = (Object)adaptor.create(string_literal862);
					adaptor.addChild(root_0, string_literal862_tree);
					}

					char_literal863=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18284); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal863_tree = (Object)adaptor.create(char_literal863);
					adaptor.addChild(root_0, char_literal863_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: 'safecall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal864=(Token)match(input,SAFECALL,FOLLOW_SAFECALL_in_callConvention18318); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal864_tree = (Object)adaptor.create(string_literal864);
					adaptor.addChild(root_0, string_literal864_tree);
					}

					char_literal865=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18320); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal865_tree = (Object)adaptor.create(char_literal865);
					adaptor.addChild(root_0, char_literal865_tree);
					}

					}
					break;
				case 5 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:652:32: 'stdcall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal866=(Token)match(input,STDCALL,FOLLOW_STDCALL_in_callConvention18354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal866_tree = (Object)adaptor.create(string_literal866);
					adaptor.addChild(root_0, string_literal866_tree);
					}

					char_literal867=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18356); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal867_tree = (Object)adaptor.create(char_literal867);
					adaptor.addChild(root_0, char_literal867_tree);
					}

					}
					break;
				case 6 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:32: 'export' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal868=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_callConvention18391); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal868_tree = (Object)adaptor.create(string_literal868);
					adaptor.addChild(root_0, string_literal868_tree);
					}

					char_literal869=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18393); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal869_tree = (Object)adaptor.create(char_literal869);
					adaptor.addChild(root_0, char_literal869_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, callConvention_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConvention"


	public static class callConventionNoSemi_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConventionNoSemi"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:1: callConventionNoSemi : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
	public final DelphiParser.callConventionNoSemi_return callConventionNoSemi() throws RecognitionException {
		DelphiParser.callConventionNoSemi_return retval = new DelphiParser.callConventionNoSemi_return();
		retval.start = input.LT(1);
		int callConventionNoSemi_StartIndex = input.index();

		Object root_0 = null;

		Token set870=null;

		Object set870_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set870=input.LT(1);
			if ( input.LA(1)==CDECL||input.LA(1)==EXPORT||input.LA(1)==PASCAL||input.LA(1)==REGISTER||input.LA(1)==SAFECALL||input.LA(1)==STDCALL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set870));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, callConventionNoSemi_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConventionNoSemi"


	public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "oldCallConventionDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:1: oldCallConventionDirective : ( 'far' ';' | 'local' ';' | 'near' ';' );
	public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
		DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
		retval.start = input.LT(1);
		int oldCallConventionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal871=null;
		Token char_literal872=null;
		Token string_literal873=null;
		Token char_literal874=null;
		Token string_literal875=null;
		Token char_literal876=null;

		Object string_literal871_tree=null;
		Object char_literal872_tree=null;
		Object string_literal873_tree=null;
		Object char_literal874_tree=null;
		Object string_literal875_tree=null;
		Object char_literal876_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:30: ( 'far' ';' | 'local' ';' | 'near' ';' )
			int alt279=3;
			switch ( input.LA(1) ) {
			case FAR:
				{
				alt279=1;
				}
				break;
			case LOCAL:
				{
				alt279=2;
				}
				break;
			case NEAR:
				{
				alt279=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				throw nvae;
			}
			switch (alt279) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:32: 'far' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal871=(Token)match(input,FAR,FOLLOW_FAR_in_oldCallConventionDirective18659); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal871_tree = (Object)adaptor.create(string_literal871);
					adaptor.addChild(root_0, string_literal871_tree);
					}

					char_literal872=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18661); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal872_tree = (Object)adaptor.create(char_literal872);
					adaptor.addChild(root_0, char_literal872_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:32: 'local' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal873=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_oldCallConventionDirective18700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal873_tree = (Object)adaptor.create(string_literal873);
					adaptor.addChild(root_0, string_literal873_tree);
					}

					char_literal874=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18702); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal874_tree = (Object)adaptor.create(char_literal874);
					adaptor.addChild(root_0, char_literal874_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:32: 'near' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal875=(Token)match(input,NEAR,FOLLOW_NEAR_in_oldCallConventionDirective18739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal875_tree = (Object)adaptor.create(string_literal875);
					adaptor.addChild(root_0, string_literal875_tree);
					}

					char_literal876=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18741); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal876_tree = (Object)adaptor.create(char_literal876);
					adaptor.addChild(root_0, char_literal876_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, oldCallConventionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "oldCallConventionDirective"


	public static class hintingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hintingDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
	public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
		DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
		retval.start = input.LT(1);
		int hintingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal877=null;
		Token string_literal879=null;
		Token string_literal880=null;
		Token string_literal881=null;
		ParserRuleReturnScope stringFactor878 =null;

		Object string_literal877_tree=null;
		Object string_literal879_tree=null;
		Object string_literal880_tree=null;
		Object string_literal881_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
			int alt281=4;
			switch ( input.LA(1) ) {
			case DEPRECATED:
				{
				alt281=1;
				}
				break;
			case EXPERIMENTAL:
				{
				alt281=2;
				}
				break;
			case PLATFORM:
				{
				alt281=3;
				}
				break;
			case LIBRARY:
				{
				alt281=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}
			switch (alt281) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:32: 'deprecated' ( stringFactor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal877=(Token)match(input,DEPRECATED,FOLLOW_DEPRECATED_in_hintingDirective18795); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal877_tree = (Object)adaptor.create(string_literal877);
					adaptor.addChild(root_0, string_literal877_tree);
					}

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:45: ( stringFactor )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==ControlString||LA280_0==QuotedString) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:46: stringFactor
							{
							pushFollow(FOLLOW_stringFactor_in_hintingDirective18798);
							stringFactor878=stringFactor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor878.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:667:32: 'experimental'
					{
					root_0 = (Object)adaptor.nil();


					string_literal879=(Token)match(input,EXPERIMENTAL,FOLLOW_EXPERIMENTAL_in_hintingDirective18833); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal879_tree = (Object)adaptor.create(string_literal879);
					adaptor.addChild(root_0, string_literal879_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:32: 'platform'
					{
					root_0 = (Object)adaptor.nil();


					string_literal880=(Token)match(input,PLATFORM,FOLLOW_PLATFORM_in_hintingDirective18868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal880_tree = (Object)adaptor.create(string_literal880);
					adaptor.addChild(root_0, string_literal880_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: 'library'
					{
					root_0 = (Object)adaptor.nil();


					string_literal881=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_hintingDirective18901); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal881_tree = (Object)adaptor.create(string_literal881);
					adaptor.addChild(root_0, string_literal881_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, hintingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hintingDirective"


	public static class externalDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:1: externalDirective : ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' );
	public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
		DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
		retval.start = input.LT(1);
		int externalDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal882=null;
		Token char_literal883=null;
		Token string_literal884=null;
		Token char_literal885=null;
		Token string_literal886=null;
		Token char_literal889=null;
		ParserRuleReturnScope constExpression887 =null;
		ParserRuleReturnScope externalSpecifier888 =null;

		Object string_literal882_tree=null;
		Object char_literal883_tree=null;
		Object string_literal884_tree=null;
		Object char_literal885_tree=null;
		Object string_literal886_tree=null;
		Object char_literal889_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:30: ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' )
			int alt283=3;
			int LA283_0 = input.LA(1);
			if ( (LA283_0==VARARGS) ) {
				alt283=1;
			}
			else if ( (LA283_0==EXTERNAL) ) {
				int LA283_2 = input.LA(2);
				if ( (LA283_2==SEMI) ) {
					int LA283_3 = input.LA(3);
					if ( (synpred438_Delphi()) ) {
						alt283=2;
					}
					else if ( (true) ) {
						alt283=3;
					}

				}
				else if ( ((LA283_2 >= ADD && LA283_2 <= ANSISTRING)||LA283_2==AS||(LA283_2 >= AT && LA283_2 <= AT2)||LA283_2==BREAK||(LA283_2 >= CONTAINS && LA283_2 <= ControlString)||LA283_2==DEFAULT||LA283_2==DIV||LA283_2==DOT||LA283_2==EQUAL||LA283_2==EXIT||LA283_2==EXPORT||LA283_2==FALSE||LA283_2==FINAL||(LA283_2 >= FUNCTION && LA283_2 <= GE)||LA283_2==GT||(LA283_2 >= IMPLEMENTS && LA283_2 <= INHERITED)||LA283_2==IS||LA283_2==LBRACK||LA283_2==LE||(LA283_2 >= LOCAL && LA283_2 <= NAME)||LA283_2==NIL||(LA283_2 >= NOT && LA283_2 <= OBJECT)||(LA283_2 >= OPERATOR && LA283_2 <= OUT)||(LA283_2 >= PLUS && LA283_2 <= POINTER2)||LA283_2==PROCEDURE||LA283_2==QuotedString||(LA283_2 >= READ && LA283_2 <= READONLY)||(LA283_2 >= REFERENCE && LA283_2 <= REGISTER)||LA283_2==REMOVE||(LA283_2 >= SHL && LA283_2 <= STAR)||(LA283_2 >= STORED && LA283_2 <= STRING)||LA283_2==TRUE||LA283_2==TkAsmHexNum||(LA283_2 >= TkHexNum && LA283_2 <= TkIntNum)||LA283_2==TkRealNum||LA283_2==VARIANT||LA283_2==WRITE||(LA283_2 >= XOR && LA283_2 <= 201)) ) {
					alt283=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 283, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}

			switch (alt283) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:32: 'varargs' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal882=(Token)match(input,VARARGS,FOLLOW_VARARGS_in_externalDirective18949); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal882_tree = (Object)adaptor.create(string_literal882);
					adaptor.addChild(root_0, string_literal882_tree);
					}

					char_literal883=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective18951); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal883_tree = (Object)adaptor.create(char_literal883);
					adaptor.addChild(root_0, char_literal883_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: 'external' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal884=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective18987); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal884_tree = (Object)adaptor.create(string_literal884);
					adaptor.addChild(root_0, string_literal884_tree);
					}

					char_literal885=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective18989); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal885_tree = (Object)adaptor.create(char_literal885);
					adaptor.addChild(root_0, char_literal885_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:32: 'external' constExpression ( externalSpecifier )* ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal886=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19022); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal886_tree = (Object)adaptor.create(string_literal886);
					adaptor.addChild(root_0, string_literal886_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalDirective19024);
					constExpression887=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression887.getTree());

					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:59: ( externalSpecifier )*
					loop282:
					while (true) {
						int alt282=2;
						int LA282_0 = input.LA(1);
						if ( (LA282_0==INDEX||LA282_0==NAME) ) {
							alt282=1;
						}

						switch (alt282) {
						case 1 :
							// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:60: externalSpecifier
							{
							pushFollow(FOLLOW_externalSpecifier_in_externalDirective19027);
							externalSpecifier888=externalSpecifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, externalSpecifier888.getTree());

							}
							break;

						default :
							break loop282;
						}
					}

					char_literal889=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal889_tree = (Object)adaptor.create(char_literal889);
					adaptor.addChild(root_0, char_literal889_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, externalDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalDirective"


	public static class externalSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalSpecifier"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
	public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
		DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
		retval.start = input.LT(1);
		int externalSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal890=null;
		Token string_literal892=null;
		ParserRuleReturnScope constExpression891 =null;
		ParserRuleReturnScope constExpression893 =null;

		Object string_literal890_tree=null;
		Object string_literal892_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:30: ( 'name' constExpression | 'index' constExpression )
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==NAME) ) {
				alt284=1;
			}
			else if ( (LA284_0==INDEX) ) {
				alt284=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 284, 0, input);
				throw nvae;
			}

			switch (alt284) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:32: 'name' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal890=(Token)match(input,NAME,FOLLOW_NAME_in_externalSpecifier19080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal890_tree = (Object)adaptor.create(string_literal890);
					adaptor.addChild(root_0, string_literal890_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19082);
					constExpression891=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression891.getTree());

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:32: 'index' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal892=(Token)match(input,INDEX,FOLLOW_INDEX_in_externalSpecifier19115); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal892_tree = (Object)adaptor.create(string_literal892);
					adaptor.addChild(root_0, string_literal892_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19117);
					constExpression893=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression893.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, externalSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalSpecifier"


	public static class dispIDDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dispIDDirective"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:1: dispIDDirective : 'dispid' expression ';' ;
	public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
		DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
		retval.start = input.LT(1);
		int dispIDDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal894=null;
		Token char_literal896=null;
		ParserRuleReturnScope expression895 =null;

		Object string_literal894_tree=null;
		Object char_literal896_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:30: ( 'dispid' expression ';' )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:32: 'dispid' expression ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal894=(Token)match(input,DISPID,FOLLOW_DISPID_in_dispIDDirective19170); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal894_tree = (Object)adaptor.create(string_literal894);
			adaptor.addChild(root_0, string_literal894_tree);
			}

			pushFollow(FOLLOW_expression_in_dispIDDirective19172);
			expression895=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression895.getTree());

			char_literal896=(Token)match(input,SEMI,FOLLOW_SEMI_in_dispIDDirective19174); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal896_tree = (Object)adaptor.create(char_literal896);
			adaptor.addChild(root_0, char_literal896_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, dispIDDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dispIDDirective"


	public static class ident_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:683:1: ident : ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames );
	public final DelphiParser.ident_return ident() throws RecognitionException {
		DelphiParser.ident_return retval = new DelphiParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier897=null;
		Token char_literal898=null;
		Token TkIdentifier899=null;
		ParserRuleReturnScope usedKeywordsAsNames900 =null;

		Object TkIdentifier897_tree=null;
		Object char_literal898_tree=null;
		Object TkIdentifier899_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:683:30: ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames )
			int alt285=3;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt285=1;
				}
				break;
			case 200:
				{
				alt285=2;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				alt285=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				throw nvae;
			}
			switch (alt285) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:683:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier897=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19237); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier897_tree = (Object)adaptor.create(TkIdentifier897);
					adaptor.addChild(root_0, TkIdentifier897_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:32: '&' TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					char_literal898=(Token)match(input,200,FOLLOW_200_in_ident19270); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal898_tree = (Object)adaptor.create(char_literal898);
					adaptor.addChild(root_0, char_literal898_tree);
					}

					TkIdentifier899=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier899_tree = (Object)adaptor.create(TkIdentifier899);
					adaptor.addChild(root_0, TkIdentifier899_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:685:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_ident19305);
					usedKeywordsAsNames900=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames900.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usedKeywordsAsNames"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:1: usedKeywordsAsNames : ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) );
	public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
		DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
		retval.start = input.LT(1);
		int usedKeywordsAsNames_StartIndex = input.index();

		Object root_0 = null;

		Token set901=null;

		Object set901_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:30: ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set901=input.LT(1);
			if ( input.LA(1)==ADD||input.LA(1)==ANSISTRING||input.LA(1)==AT||input.LA(1)==BREAK||(input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE)||input.LA(1)==DEFAULT||input.LA(1)==EXIT||input.LA(1)==EXPORT||input.LA(1)==FINAL||input.LA(1)==IMPLEMENTS||input.LA(1)==INDEX||input.LA(1)==LOCAL||input.LA(1)==MESSAGE||input.LA(1)==NAME||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||input.LA(1)==OUT||input.LA(1)==POINTER||(input.LA(1) >= READ && input.LA(1) <= READONLY)||(input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER)||input.LA(1)==REMOVE||(input.LA(1) >= STORED && input.LA(1) <= STRING)||input.LA(1)==VARIANT||input.LA(1)==WRITE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set901));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, usedKeywordsAsNames_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usedKeywordsAsNames"


	public static class identList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
	public final DelphiParser.identList_return identList() throws RecognitionException {
		DelphiParser.identList_return retval = new DelphiParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal903=null;
		ParserRuleReturnScope ident902 =null;
		ParserRuleReturnScope ident904 =null;

		Object char_literal903_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identList19583);
			ident902=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident902.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:38: ( ',' ident )*
			loop286:
			while (true) {
				int alt286=2;
				int LA286_0 = input.LA(1);
				if ( (LA286_0==COMMA) ) {
					alt286=1;
				}

				switch (alt286) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:39: ',' ident
					{
					char_literal903=(Token)match(input,COMMA,FOLLOW_COMMA_in_identList19586); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal903);

					pushFollow(FOLLOW_ident_in_identList19588);
					ident904=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident904.getTree());
					}
					break;

				default :
					break loop286;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 691:51: -> ^( ident ( ident )* )
			{
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:54: ^( ident ( ident )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:62: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class identListFlat_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identListFlat"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
	public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
		DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
		retval.start = input.LT(1);
		int identListFlat_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal906=null;
		ParserRuleReturnScope ident905 =null;
		ParserRuleReturnScope ident907 =null;

		Object char_literal906_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:30: ( ident ( ',' ident )* -> ident ( ident )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identListFlat19653);
			ident905=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident905.getTree());
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:38: ( ',' ident )*
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( (LA287_0==COMMA) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:39: ',' ident
					{
					char_literal906=(Token)match(input,COMMA,FOLLOW_COMMA_in_identListFlat19656); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal906);

					pushFollow(FOLLOW_ident_in_identListFlat19658);
					ident907=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident907.getTree());
					}
					break;

				default :
					break loop287;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 693:51: -> ident ( ident )*
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:60: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_0, stream_ident.nextTree());
				}
				stream_ident.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, identListFlat_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identListFlat"


	public static class label_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "label"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
	public final DelphiParser.label_return label() throws RecognitionException {
		DelphiParser.label_return retval = new DelphiParser.label_return();
		retval.start = input.LT(1);
		int label_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier908=null;
		Token TkIntNum909=null;
		Token TkHexNum910=null;
		ParserRuleReturnScope usedKeywordsAsNames911 =null;

		Object TkIdentifier908_tree=null;
		Object TkIntNum909_tree=null;
		Object TkHexNum910_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
			int alt288=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt288=1;
				}
				break;
			case TkIntNum:
				{
				alt288=2;
				}
				break;
			case TkHexNum:
				{
				alt288=3;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				alt288=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}
			switch (alt288) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier908=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_label19732); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier908_tree = (Object)adaptor.create(TkIdentifier908);
					adaptor.addChild(root_0, TkIdentifier908_tree);
					}

					}
					break;
				case 2 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:696:32: TkIntNum
					{
					root_0 = (Object)adaptor.nil();


					TkIntNum909=(Token)match(input,TkIntNum,FOLLOW_TkIntNum_in_label19765); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIntNum909_tree = (Object)adaptor.create(TkIntNum909);
					adaptor.addChild(root_0, TkIntNum909_tree);
					}

					}
					break;
				case 3 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:32: TkHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkHexNum910=(Token)match(input,TkHexNum,FOLLOW_TkHexNum_in_label19798); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkHexNum910_tree = (Object)adaptor.create(TkHexNum910);
					adaptor.addChild(root_0, TkHexNum910_tree);
					}

					}
					break;
				case 4 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:698:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_label19831);
					usedKeywordsAsNames911=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames911.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "label"


	public static class intNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intNum"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:700:1: intNum : ( TkIntNum | TkHexNum );
	public final DelphiParser.intNum_return intNum() throws RecognitionException {
		DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
		retval.start = input.LT(1);
		int intNum_StartIndex = input.index();

		Object root_0 = null;

		Token set912=null;

		Object set912_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:700:30: ( TkIntNum | TkHexNum )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set912=input.LT(1);
			if ( input.LA(1)==TkHexNum||input.LA(1)==TkIntNum ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set912));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, intNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intNum"


	public static class realNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "realNum"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:1: realNum : TkRealNum ;
	public final DelphiParser.realNum_return realNum() throws RecognitionException {
		DelphiParser.realNum_return retval = new DelphiParser.realNum_return();
		retval.start = input.LT(1);
		int realNum_StartIndex = input.index();

		Object root_0 = null;

		Token TkRealNum913=null;

		Object TkRealNum913_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:30: ( TkRealNum )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:32: TkRealNum
			{
			root_0 = (Object)adaptor.nil();


			TkRealNum913=(Token)match(input,TkRealNum,FOLLOW_TkRealNum_in_realNum19981); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TkRealNum913_tree = (Object)adaptor.create(TkRealNum913);
			adaptor.addChild(root_0, TkRealNum913_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, realNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "realNum"


	public static class namespacedQualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespacedQualifiedIdent"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:1: namespacedQualifiedIdent : ( namespaceName '.' )? qualifiedIdent ;
	public final DelphiParser.namespacedQualifiedIdent_return namespacedQualifiedIdent() throws RecognitionException {
		DelphiParser.namespacedQualifiedIdent_return retval = new DelphiParser.namespacedQualifiedIdent_return();
		retval.start = input.LT(1);
		int namespacedQualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal915=null;
		ParserRuleReturnScope namespaceName914 =null;
		ParserRuleReturnScope qualifiedIdent916 =null;

		Object char_literal915_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:30: ( ( namespaceName '.' )? qualifiedIdent )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:32: ( namespaceName '.' )? qualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:32: ( namespaceName '.' )?
			int alt289=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA289_1 = input.LA(2);
					if ( (LA289_1==DOT) ) {
						int LA289_4 = input.LA(3);
						if ( (synpred477_Delphi()) ) {
							alt289=1;
						}
					}
					}
					break;
				case 200:
					{
					int LA289_2 = input.LA(2);
					if ( (LA289_2==TkIdentifier) ) {
						int LA289_6 = input.LA(3);
						if ( (LA289_6==DOT) ) {
							int LA289_9 = input.LA(4);
							if ( (synpred477_Delphi()) ) {
								alt289=1;
							}
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA289_3 = input.LA(2);
					if ( (LA289_3==DOT) ) {
						int LA289_7 = input.LA(3);
						if ( (synpred477_Delphi()) ) {
							alt289=1;
						}
					}
					}
					break;
			}
			switch (alt289) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:33: namespaceName '.'
					{
					pushFollow(FOLLOW_namespaceName_in_namespacedQualifiedIdent20023);
					namespaceName914=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName914.getTree());

					char_literal915=(Token)match(input,DOT,FOLLOW_DOT_in_namespacedQualifiedIdent20025); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal915_tree = (Object)adaptor.create(char_literal915);
					adaptor.addChild(root_0, char_literal915_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent20029);
			qualifiedIdent916=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent916.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, namespacedQualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespacedQualifiedIdent"


	public static class namespaceName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceName"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:1: namespaceName : ident ( '.' ident )* ;
	public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
		DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
		retval.start = input.LT(1);
		int namespaceName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal918=null;
		ParserRuleReturnScope ident917 =null;
		ParserRuleReturnScope ident919 =null;

		Object char_literal918_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:30: ( ident ( '.' ident )* )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:32: ident ( '.' ident )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_namespaceName20081);
			ident917=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident917.getTree());

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:38: ( '.' ident )*
			loop290:
			while (true) {
				int alt290=2;
				alt290 = dfa290.predict(input);
				switch (alt290) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:39: '.' ident
					{
					char_literal918=(Token)match(input,DOT,FOLLOW_DOT_in_namespaceName20084); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal918_tree = (Object)adaptor.create(char_literal918);
					adaptor.addChild(root_0, char_literal918_tree);
					}

					pushFollow(FOLLOW_ident_in_namespaceName20086);
					ident919=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident919.getTree());

					}
					break;

				default :
					break loop290;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, namespaceName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceName"


	public static class qualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "qualifiedIdent"
	// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:1: qualifiedIdent : ( ident '.' )* ident ;
	public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
		DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
		retval.start = input.LT(1);
		int qualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal921=null;
		ParserRuleReturnScope ident920 =null;
		ParserRuleReturnScope ident922 =null;

		Object char_literal921_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:30: ( ( ident '.' )* ident )
			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:33: ( ident '.' )* ident
			{
			root_0 = (Object)adaptor.nil();


			// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:33: ( ident '.' )*
			loop291:
			while (true) {
				int alt291=2;
				switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA291_1 = input.LA(2);
					if ( (LA291_1==DOT) ) {
						switch ( input.LA(3) ) {
						case TkIdentifier:
							{
							int LA291_7 = input.LA(4);
							if ( (synpred479_Delphi()) ) {
								alt291=1;
							}

							}
							break;
						case 200:
							{
							int LA291_8 = input.LA(4);
							if ( (LA291_8==TkIdentifier) ) {
								int LA291_11 = input.LA(5);
								if ( (synpred479_Delphi()) ) {
									alt291=1;
								}

							}

							}
							break;
						case ADD:
						case ANSISTRING:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case STRING:
						case VARIANT:
						case WRITE:
							{
							int LA291_9 = input.LA(4);
							if ( (synpred479_Delphi()) ) {
								alt291=1;
							}

							}
							break;
						}
					}

					}
					break;
				case 200:
					{
					int LA291_2 = input.LA(2);
					if ( (LA291_2==TkIdentifier) ) {
						int LA291_6 = input.LA(3);
						if ( (LA291_6==DOT) ) {
							switch ( input.LA(4) ) {
							case TkIdentifier:
								{
								int LA291_7 = input.LA(5);
								if ( (synpred479_Delphi()) ) {
									alt291=1;
								}

								}
								break;
							case 200:
								{
								int LA291_8 = input.LA(5);
								if ( (LA291_8==TkIdentifier) ) {
									int LA291_11 = input.LA(6);
									if ( (synpred479_Delphi()) ) {
										alt291=1;
									}

								}

								}
								break;
							case ADD:
							case ANSISTRING:
							case AT:
							case BREAK:
							case CONTAINS:
							case CONTINUE:
							case DEFAULT:
							case EXIT:
							case EXPORT:
							case FINAL:
							case IMPLEMENTS:
							case INDEX:
							case LOCAL:
							case MESSAGE:
							case NAME:
							case OBJECT:
							case OPERATOR:
							case OUT:
							case POINTER:
							case READ:
							case READONLY:
							case REFERENCE:
							case REGISTER:
							case REMOVE:
							case STORED:
							case STRICT:
							case STRING:
							case VARIANT:
							case WRITE:
								{
								int LA291_9 = input.LA(5);
								if ( (synpred479_Delphi()) ) {
									alt291=1;
								}

								}
								break;
							}
						}

					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA291_3 = input.LA(2);
					if ( (LA291_3==DOT) ) {
						switch ( input.LA(3) ) {
						case TkIdentifier:
							{
							int LA291_7 = input.LA(4);
							if ( (synpred479_Delphi()) ) {
								alt291=1;
							}

							}
							break;
						case 200:
							{
							int LA291_8 = input.LA(4);
							if ( (LA291_8==TkIdentifier) ) {
								int LA291_11 = input.LA(5);
								if ( (synpred479_Delphi()) ) {
									alt291=1;
								}

							}

							}
							break;
						case ADD:
						case ANSISTRING:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case STRING:
						case VARIANT:
						case WRITE:
							{
							int LA291_9 = input.LA(4);
							if ( (synpred479_Delphi()) ) {
								alt291=1;
							}

							}
							break;
						}
					}

					}
					break;
				}
				switch (alt291) {
				case 1 :
					// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:34: ident '.'
					{
					pushFollow(FOLLOW_ident_in_qualifiedIdent20141);
					ident920=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident920.getTree());

					char_literal921=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdent20143); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal921_tree = (Object)adaptor.create(char_literal921);
					adaptor.addChild(root_0, char_literal921_tree);
					}

					}
					break;

				default :
					break loop291;
				}
			}

			pushFollow(FOLLOW_ident_in_qualifiedIdent20148);
			ident922=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident922.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, qualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualifiedIdent"

	// $ANTLR start synpred23_Delphi
	public final void synpred23_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: ( declSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
		{
		pushFollow(FOLLOW_declSection_in_synpred23_Delphi1584);
		declSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Delphi

	// $ANTLR start synpred24_Delphi
	public final void synpred24_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: ( blockBody )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
		{
		pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1589);
		blockBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Delphi

	// $ANTLR start synpred30_Delphi
	public final void synpred30_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( exportedProcHeading )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred30_Delphi1866);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_Delphi

	// $ANTLR start synpred31_Delphi
	public final void synpred31_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: ( methodDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
		{
		pushFollow(FOLLOW_methodDecl_in_synpred31_Delphi1899);
		methodDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred31_Delphi

	// $ANTLR start synpred32_Delphi
	public final void synpred32_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: ( procDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred32_Delphi1932);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred32_Delphi

	// $ANTLR start synpred36_Delphi
	public final void synpred36_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: ( exportedProcHeading )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred36_Delphi2116);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred36_Delphi

	// $ANTLR start synpred38_Delphi
	public final void synpred38_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred38_Delphi2182);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred38_Delphi

	// $ANTLR start synpred40_Delphi
	public final void synpred40_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: ( constDeclaration )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
		{
		pushFollow(FOLLOW_constDeclaration_in_synpred40_Delphi2331);
		constDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred40_Delphi

	// $ANTLR start synpred42_Delphi
	public final void synpred42_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred42_Delphi2486);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred42_Delphi

	// $ANTLR start synpred45_Delphi
	public final void synpred45_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: ( typeDeclaration )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred45_Delphi2580);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_Delphi

	// $ANTLR start synpred46_Delphi
	public final void synpred46_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred46_Delphi2646);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred46_Delphi

	// $ANTLR start synpred48_Delphi
	public final void synpred48_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: ( varDeclaration )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
		{
		pushFollow(FOLLOW_varDeclaration_in_synpred48_Delphi2743);
		varDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred48_Delphi

	// $ANTLR start synpred50_Delphi
	public final void synpred50_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred50_Delphi2903);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred50_Delphi

	// $ANTLR start synpred53_Delphi
	public final void synpred53_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: ( 'absolute' ident )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred53_Delphi2995); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred53_Delphi2997);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_Delphi

	// $ANTLR start synpred54_Delphi
	public final void synpred54_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: ( 'absolute' constExpression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred54_Delphi3030); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred54_Delphi3032);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_Delphi

	// $ANTLR start synpred61_Delphi
	public final void synpred61_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: ( strucType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
		{
		pushFollow(FOLLOW_strucType_in_synpred61_Delphi3277);
		strucType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred61_Delphi

	// $ANTLR start synpred62_Delphi
	public final void synpred62_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: ( pointerType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
		{
		pushFollow(FOLLOW_pointerType_in_synpred62_Delphi3310);
		pointerType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_Delphi

	// $ANTLR start synpred63_Delphi
	public final void synpred63_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: ( stringType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
		{
		pushFollow(FOLLOW_stringType_in_synpred63_Delphi3343);
		stringType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_Delphi

	// $ANTLR start synpred64_Delphi
	public final void synpred64_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( procedureType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
		{
		pushFollow(FOLLOW_procedureType_in_synpred64_Delphi3376);
		procedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_Delphi

	// $ANTLR start synpred65_Delphi
	public final void synpred65_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: ( variantType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
		{
		pushFollow(FOLLOW_variantType_in_synpred65_Delphi3409);
		variantType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred65_Delphi

	// $ANTLR start synpred67_Delphi
	public final void synpred67_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: ( genericPostfix )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
		{
		pushFollow(FOLLOW_genericPostfix_in_synpred67_Delphi3450);
		genericPostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_Delphi

	// $ANTLR start synpred68_Delphi
	public final void synpred68_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( ( 'type' )? typeId ( genericPostfix )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )?
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
		int alt294=2;
		int LA294_0 = input.LA(1);
		if ( (LA294_0==TYPE) ) {
			alt294=1;
		}
		switch (alt294) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred68_Delphi3443); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeId_in_synpred68_Delphi3447);
		typeId();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
		int alt295=2;
		int LA295_0 = input.LA(1);
		if ( (LA295_0==LT) ) {
			alt295=1;
		}
		switch (alt295) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
				{
				pushFollow(FOLLOW_genericPostfix_in_synpred68_Delphi3450);
				genericPostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred68_Delphi

	// $ANTLR start synpred78_Delphi
	public final void synpred78_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: ( 'const' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
		{
		match(input,CONST,FOLLOW_CONST_in_synpred78_Delphi4002); if (state.failed) return;

		}

	}
	// $ANTLR end synpred78_Delphi

	// $ANTLR start synpred79_Delphi
	public final void synpred79_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: ( 'of' typeDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
		{
		match(input,OF,FOLLOW_OF_in_synpred79_Delphi4174); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred79_Delphi4176);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred79_Delphi

	// $ANTLR start synpred81_Delphi
	public final void synpred81_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: ( '[' expression ']' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
		{
		match(input,LBRACK,FOLLOW_LBRACK_in_synpred81_Delphi4325); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred81_Delphi4327);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RBRACK,FOLLOW_RBRACK_in_synpred81_Delphi4329); if (state.failed) return;

		}

	}
	// $ANTLR end synpred81_Delphi

	// $ANTLR start synpred84_Delphi
	public final void synpred84_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: ( codePageNumber )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
		{
		pushFollow(FOLLOW_codePageNumber_in_synpred84_Delphi4376);
		codePageNumber();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred84_Delphi

	// $ANTLR start synpred85_Delphi
	public final void synpred85_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: ( methodType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
		{
		pushFollow(FOLLOW_methodType_in_synpred85_Delphi4485);
		methodType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred85_Delphi

	// $ANTLR start synpred86_Delphi
	public final void synpred86_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: ( simpleProcedureType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
		{
		pushFollow(FOLLOW_simpleProcedureType_in_synpred86_Delphi4518);
		simpleProcedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred86_Delphi

	// $ANTLR start synpred88_Delphi
	public final void synpred88_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ( ';' )? callConventionNoSemi )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
		int alt301=2;
		int LA301_0 = input.LA(1);
		if ( (LA301_0==SEMI) ) {
			alt301=1;
		}
		switch (alt301) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred88_Delphi4661); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_callConventionNoSemi_in_synpred88_Delphi4665);
		callConventionNoSemi();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred88_Delphi

	// $ANTLR start synpred90_Delphi
	public final void synpred90_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred90_Delphi4773);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred90_Delphi

	// $ANTLR start synpred92_Delphi
	public final void synpred92_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: ( formalParameterSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred92_Delphi4828);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred92_Delphi

	// $ANTLR start synpred93_Delphi
	public final void synpred93_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ( ident )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
		{
		pushFollow(FOLLOW_ident_in_synpred93_Delphi4940);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred93_Delphi

	// $ANTLR start synpred94_Delphi
	public final void synpred94_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: ( subRangeType )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
		{
		pushFollow(FOLLOW_subRangeType_in_synpred94_Delphi4973);
		subRangeType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred94_Delphi

	// $ANTLR start synpred95_Delphi
	public final void synpred95_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: ( '..' constExpression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
		{
		match(input,DOTDOT,FOLLOW_DOTDOT_in_synpred95_Delphi5062); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred95_Delphi5064);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred95_Delphi

	// $ANTLR start synpred100_Delphi
	public final void synpred100_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: ( simpleGenericDefinition )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: simpleGenericDefinition
		{
		pushFollow(FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5321);
		simpleGenericDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred100_Delphi

	// $ANTLR start synpred101_Delphi
	public final void synpred101_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:32: ( complexGenericDefinition )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:32: complexGenericDefinition
		{
		pushFollow(FOLLOW_complexGenericDefinition_in_synpred101_Delphi5354);
		complexGenericDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred101_Delphi

	// $ANTLR start synpred113_Delphi
	public final void synpred113_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: ( classTypeTypeDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: classTypeTypeDecl
		{
		pushFollow(FOLLOW_classTypeTypeDecl_in_synpred113_Delphi5879);
		classTypeTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred113_Delphi

	// $ANTLR start synpred114_Delphi
	public final void synpred114_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:32: ( classTypeDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:32: classTypeDecl
		{
		pushFollow(FOLLOW_classTypeDecl_in_synpred114_Delphi5912);
		classTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred114_Delphi

	// $ANTLR start synpred122_Delphi
	public final void synpred122_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred122_Delphi6237); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:40: ( classState )?
		int alt307=2;
		int LA307_0 = input.LA(1);
		if ( (LA307_0==ABSTRACT||LA307_0==SEALED) ) {
			alt307=1;
		}
		switch (alt307) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:41: classState
				{
				pushFollow(FOLLOW_classState_in_synpred122_Delphi6240);
				classState();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:54: ( classParent )?
		int alt308=2;
		int LA308_0 = input.LA(1);
		if ( (LA308_0==LPAREN) ) {
			alt308=1;
		}
		switch (alt308) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:55: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred122_Delphi6245);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:69: ( classItem )*
		loop309:
		while (true) {
			int alt309=2;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==ADD||LA309_0==ANSISTRING||LA309_0==AT||LA309_0==AUTOMATED||LA309_0==BREAK||LA309_0==CLASS||(LA309_0 >= CONST && LA309_0 <= CONTINUE)||LA309_0==DEFAULT||LA309_0==DESTRUCTOR||LA309_0==EXIT||LA309_0==EXPORT||LA309_0==FINAL||LA309_0==FUNCTION||LA309_0==IMPLEMENTS||LA309_0==INDEX||LA309_0==LBRACK||LA309_0==LOCAL||LA309_0==MESSAGE||LA309_0==NAME||LA309_0==OBJECT||LA309_0==OPERATOR||LA309_0==OUT||LA309_0==POINTER||(LA309_0 >= PRIVATE && LA309_0 <= PROCEDURE)||(LA309_0 >= PROPERTY && LA309_0 <= PUBLISHED)||(LA309_0 >= READ && LA309_0 <= READONLY)||(LA309_0 >= REFERENCE && LA309_0 <= REGISTER)||LA309_0==REMOVE||LA309_0==RESOURCESTRING||(LA309_0 >= STORED && LA309_0 <= STRING)||LA309_0==THREADVAR||LA309_0==TYPE||LA309_0==TkIdentifier||LA309_0==VAR||LA309_0==VARIANT||LA309_0==WRITE||LA309_0==200) ) {
				alt309=1;
			}

			switch (alt309) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:70: classItem
				{
				pushFollow(FOLLOW_classItem_in_synpred122_Delphi6250);
				classItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop309;
			}
		}

		match(input,END,FOLLOW_END_in_synpred122_Delphi6254); if (state.failed) return;

		}

	}
	// $ANTLR end synpred122_Delphi

	// $ANTLR start synpred123_Delphi
	public final void synpred123_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:41: ( classParent )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:41: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred123_Delphi6308);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred123_Delphi

	// $ANTLR start synpred126_Delphi
	public final void synpred126_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: ( visibility )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred126_Delphi6544);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred126_Delphi

	// $ANTLR start synpred127_Delphi
	public final void synpred127_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:291:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:291:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred127_Delphi6577);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred127_Delphi

	// $ANTLR start synpred128_Delphi
	public final void synpred128_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: ( classField )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: classField
		{
		pushFollow(FOLLOW_classField_in_synpred128_Delphi6610);
		classField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred128_Delphi

	// $ANTLR start synpred129_Delphi
	public final void synpred129_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: ( classProperty )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred129_Delphi6643);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred129_Delphi

	// $ANTLR start synpred133_Delphi
	public final void synpred133_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( ( 'public' | 'private' | 'protected' )? constSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( 'public' | 'private' | 'protected' )? constSection
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( 'public' | 'private' | 'protected' )?
		int alt310=2;
		int LA310_0 = input.LA(1);
		if ( (LA310_0==PRIVATE||(LA310_0 >= PROTECTED && LA310_0 <= PUBLIC)) ) {
			alt310=1;
		}
		switch (alt310) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
				{
				if ( input.LA(1)==PRIVATE||(input.LA(1) >= PROTECTED && input.LA(1) <= PUBLIC) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}
				break;

		}

		pushFollow(FOLLOW_constSection_in_synpred133_Delphi6685);
		constSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred133_Delphi

	// $ANTLR start synpred137_Delphi
	public final void synpred137_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( ( 'public' | 'private' | 'protected' )? typeSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( 'public' | 'private' | 'protected' )? typeSection
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( 'public' | 'private' | 'protected' )?
		int alt311=2;
		int LA311_0 = input.LA(1);
		if ( (LA311_0==PRIVATE||(LA311_0 >= PROTECTED && LA311_0 <= PUBLIC)) ) {
			alt311=1;
		}
		switch (alt311) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
				{
				if ( input.LA(1)==PRIVATE||(input.LA(1) >= PROTECTED && input.LA(1) <= PUBLIC) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}
				break;

		}

		pushFollow(FOLLOW_typeSection_in_synpred137_Delphi6727);
		typeSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred137_Delphi

	// $ANTLR start synpred142_Delphi
	public final void synpred142_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred142_Delphi6931);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred142_Delphi

	// $ANTLR start synpred143_Delphi
	public final void synpred143_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: ( classProperty )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred143_Delphi6964);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred143_Delphi

	// $ANTLR start synpred148_Delphi
	public final void synpred148_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
		{
		pushFollow(FOLLOW_interfaceKey_in_synpred148_Delphi7050);
		interfaceKey();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:45: ( classParent )?
		int alt312=2;
		int LA312_0 = input.LA(1);
		if ( (LA312_0==LPAREN) ) {
			alt312=1;
		}
		switch (alt312) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:46: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred148_Delphi7053);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:60: ( interfaceGuid )?
		int alt313=2;
		int LA313_0 = input.LA(1);
		if ( (LA313_0==LBRACK) ) {
			int LA313_1 = input.LA(2);
			if ( (LA313_1==QuotedString) ) {
				alt313=1;
			}
		}
		switch (alt313) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:61: interfaceGuid
				{
				pushFollow(FOLLOW_interfaceGuid_in_synpred148_Delphi7058);
				interfaceGuid();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:77: ( interfaceItem )*
		loop314:
		while (true) {
			int alt314=2;
			int LA314_0 = input.LA(1);
			if ( (LA314_0==CLASS||LA314_0==CONSTRUCTOR||LA314_0==DESTRUCTOR||LA314_0==FUNCTION||LA314_0==LBRACK||LA314_0==OPERATOR||LA314_0==PROCEDURE||LA314_0==PROPERTY) ) {
				alt314=1;
			}

			switch (alt314) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:78: interfaceItem
				{
				pushFollow(FOLLOW_interfaceItem_in_synpred148_Delphi7063);
				interfaceItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop314;
			}
		}

		match(input,END,FOLLOW_END_in_synpred148_Delphi7067); if (state.failed) return;

		}

	}
	// $ANTLR end synpred148_Delphi

	// $ANTLR start synpred149_Delphi
	public final void synpred149_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:46: ( classParent )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:46: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred149_Delphi7161);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred149_Delphi

	// $ANTLR start synpred151_Delphi
	public final void synpred151_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred151_Delphi7404);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred151_Delphi

	// $ANTLR start synpred152_Delphi
	public final void synpred152_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:33: ( 'class' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:33: 'class'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred152_Delphi7438); if (state.failed) return;

		}

	}
	// $ANTLR end synpred152_Delphi

	// $ANTLR start synpred155_Delphi
	public final void synpred155_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: ( visibility )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred155_Delphi7578);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred155_Delphi

	// $ANTLR start synpred156_Delphi
	public final void synpred156_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred156_Delphi7611);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred156_Delphi

	// $ANTLR start synpred157_Delphi
	public final void synpred157_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: ( simpleRecord )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: simpleRecord
		{
		pushFollow(FOLLOW_simpleRecord_in_synpred157_Delphi7699);
		simpleRecord();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred157_Delphi

	// $ANTLR start synpred158_Delphi
	public final void synpred158_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:42: ( recordField )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred158_Delphi7788);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred158_Delphi

	// $ANTLR start synpred161_Delphi
	public final void synpred161_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: ( visibility )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred161_Delphi7938);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred161_Delphi

	// $ANTLR start synpred162_Delphi
	public final void synpred162_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred162_Delphi7976);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred162_Delphi

	// $ANTLR start synpred163_Delphi
	public final void synpred163_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: ( classProperty )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred163_Delphi8009);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred163_Delphi

	// $ANTLR start synpred166_Delphi
	public final void synpred166_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: ( recordField )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred166_Delphi8108);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred166_Delphi

	// $ANTLR start synpred180_Delphi
	public final void synpred180_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( classMethod )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred180_Delphi8646);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred180_Delphi

	// $ANTLR start synpred181_Delphi
	public final void synpred181_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred181_Delphi8734);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred181_Delphi

	// $ANTLR start synpred186_Delphi
	public final void synpred186_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )?
		int alt315=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt315=1;
				}
				break;
			case CLASS:
				{
				int LA315_2 = input.LA(2);
				if ( (synpred181_Delphi()) ) {
					alt315=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA315_3 = input.LA(2);
				if ( (synpred181_Delphi()) ) {
					alt315=1;
				}
				}
				break;
		}
		switch (alt315) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred186_Delphi8734);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:51: ( 'class' )?
		int alt316=2;
		int LA316_0 = input.LA(1);
		if ( (LA316_0==CLASS) ) {
			alt316=1;
		}
		switch (alt316) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred186_Delphi8739); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred186_Delphi8743);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred186_Delphi8745);
		ident();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:78: ( genericDefinition )?
		int alt317=2;
		int LA317_0 = input.LA(1);
		if ( (LA317_0==LT) ) {
			alt317=1;
		}
		switch (alt317) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:79: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred186_Delphi8748);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:99: ( formalParameterSection )?
		int alt318=2;
		int LA318_0 = input.LA(1);
		if ( (LA318_0==LPAREN) ) {
			alt318=1;
		}
		switch (alt318) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred186_Delphi8753);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred186_Delphi8757); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:129: ( methodDirective )*
		loop319:
		while (true) {
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==ABSTRACT||LA319_0==ASSEMBLER||LA319_0==CDECL||LA319_0==DEPRECATED||LA319_0==DISPID||LA319_0==DYNAMIC||(LA319_0 >= EXPERIMENTAL && LA319_0 <= EXPORT)||LA319_0==FAR||LA319_0==FINAL||LA319_0==INLINE||(LA319_0 >= LIBRARY && LA319_0 <= LOCAL)||LA319_0==MESSAGE||LA319_0==NEAR||(LA319_0 >= OVERLOAD && LA319_0 <= OVERRIDE)||(LA319_0 >= PASCAL && LA319_0 <= PLATFORM)||(LA319_0 >= REGISTER && LA319_0 <= REINTRODUCE)||LA319_0==SAFECALL||(LA319_0 >= STATIC && LA319_0 <= STDCALL)||LA319_0==VIRTUAL) ) {
				alt319=1;
			}

			switch (alt319) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:130: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred186_Delphi8760);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop319;
			}
		}

		}

	}
	// $ANTLR end synpred186_Delphi

	// $ANTLR start synpred187_Delphi
	public final void synpred187_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred187_Delphi8868);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred187_Delphi

	// $ANTLR start synpred191_Delphi
	public final void synpred191_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:131: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi8894);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred191_Delphi

	// $ANTLR start synpred193_Delphi
	public final void synpred193_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )?
		int alt320=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt320=1;
				}
				break;
			case CLASS:
				{
				int LA320_2 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt320=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA320_3 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt320=1;
				}
				}
				break;
		}
		switch (alt320) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred193_Delphi8868);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:51: ( 'class' )?
		int alt321=2;
		int LA321_0 = input.LA(1);
		if ( (LA321_0==CLASS) ) {
			alt321=1;
		}
		switch (alt321) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred193_Delphi8873); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred193_Delphi8877); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred193_Delphi8879);
		ident();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:79: ( genericDefinition )?
		int alt322=2;
		int LA322_0 = input.LA(1);
		if ( (LA322_0==LT) ) {
			alt322=1;
		}
		switch (alt322) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred193_Delphi8882);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:100: ( formalParameterSection )?
		int alt323=2;
		int LA323_0 = input.LA(1);
		if ( (LA323_0==LPAREN) ) {
			alt323=1;
		}
		switch (alt323) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred193_Delphi8887);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred193_Delphi8891); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:130: ( customAttribute )?
		int alt324=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA324_1 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case PACKED:
				{
				int LA324_2 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA324_3 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case SET:
				{
				int LA324_4 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case FILE:
				{
				int LA324_5 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case CLASS:
				{
				int LA324_6 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA324_7 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA324_8 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case RECORD:
				{
				int LA324_9 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA324_10 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case POINTER:
				{
				int LA324_11 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case STRING:
				{
				int LA324_12 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TYPE:
				{
				int LA324_13 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA324_14 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA324_15 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA324_16 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA324_17 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA324_18 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA324_19 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case 200:
				{
				int LA324_20 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case WRITE:
				{
				int LA324_21 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA324_22 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case AT2:
				{
				int LA324_23 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case 201:
				{
				int LA324_24 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case NOT:
				{
				int LA324_25 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case PLUS:
				{
				int LA324_26 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case MINUS:
				{
				int LA324_27 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA324_28 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA324_29 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TkAsmHexNum:
				{
				int LA324_30 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case TRUE:
				{
				int LA324_31 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case FALSE:
				{
				int LA324_32 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case NIL:
				{
				int LA324_33 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case ControlString:
				{
				int LA324_34 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA324_35 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA324_36 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case DOT:
				{
				int LA324_37 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case LT:
				{
				int LA324_38 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
				{
				int LA324_39 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA324_40 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA324_41 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA324_42 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case SEMI:
				{
				int LA324_43 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt324=1;
				}
				}
				break;
		}
		switch (alt324) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred193_Delphi8894);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred193_Delphi8898);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred193_Delphi8900); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:162: ( methodDirective )*
		loop325:
		while (true) {
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==ABSTRACT||LA325_0==ASSEMBLER||LA325_0==CDECL||LA325_0==DEPRECATED||LA325_0==DISPID||LA325_0==DYNAMIC||(LA325_0 >= EXPERIMENTAL && LA325_0 <= EXPORT)||LA325_0==FAR||LA325_0==FINAL||LA325_0==INLINE||(LA325_0 >= LIBRARY && LA325_0 <= LOCAL)||LA325_0==MESSAGE||LA325_0==NEAR||(LA325_0 >= OVERLOAD && LA325_0 <= OVERRIDE)||(LA325_0 >= PASCAL && LA325_0 <= PLATFORM)||(LA325_0 >= REGISTER && LA325_0 <= REINTRODUCE)||LA325_0==SAFECALL||(LA325_0 >= STATIC && LA325_0 <= STDCALL)||LA325_0==VIRTUAL) ) {
				alt325=1;
			}

			switch (alt325) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:163: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred193_Delphi8903);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop325;
			}
		}

		}

	}
	// $ANTLR end synpred193_Delphi

	// $ANTLR start synpred194_Delphi
	public final void synpred194_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred194_Delphi9020);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred194_Delphi

	// $ANTLR start synpred198_Delphi
	public final void synpred198_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:131: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred198_Delphi9046);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred198_Delphi

	// $ANTLR start synpred199_Delphi
	public final void synpred199_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred199_Delphi9181);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred199_Delphi

	// $ANTLR start synpred201_Delphi
	public final void synpred201_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred201_Delphi9301);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred201_Delphi

	// $ANTLR start synpred208_Delphi
	public final void synpred208_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:52: ( ';' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:52: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred208_Delphi9561); if (state.failed) return;

		}

	}
	// $ANTLR end synpred208_Delphi

	// $ANTLR start synpred212_Delphi
	public final void synpred212_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: ( 'default' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: 'default' expression
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred212_Delphi9712); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred212_Delphi9714);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred212_Delphi

	// $ANTLR start synpred213_Delphi
	public final void synpred213_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: ( 'default' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: 'default'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred213_Delphi9747); if (state.failed) return;

		}

	}
	// $ANTLR end synpred213_Delphi

	// $ANTLR start synpred216_Delphi
	public final void synpred216_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: ( 'default' expression ';' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'default' expression ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred216_Delphi9912); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred216_Delphi9914);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred216_Delphi9916); if (state.failed) return;

		}

	}
	// $ANTLR end synpred216_Delphi

	// $ANTLR start synpred217_Delphi
	public final void synpred217_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: ( 'default' ';' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: 'default' ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred217_Delphi9949); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred217_Delphi9951); if (state.failed) return;

		}

	}
	// $ANTLR end synpred217_Delphi

	// $ANTLR start synpred230_Delphi
	public final void synpred230_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:81: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:81: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred230_Delphi10534);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred230_Delphi

	// $ANTLR start synpred231_Delphi
	public final void synpred231_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:113: ( functionDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:113: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred231_Delphi10543);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred231_Delphi

	// $ANTLR start synpred234_Delphi
	public final void synpred234_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:80: ( functionDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:80: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred234_Delphi10590);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred234_Delphi

	// $ANTLR start synpred235_Delphi
	public final void synpred235_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:55: ( methodDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:55: methodDirective
		{
		pushFollow(FOLLOW_methodDirective_in_synpred235_Delphi10652);
		methodDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred235_Delphi

	// $ANTLR start synpred236_Delphi
	public final void synpred236_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:74: ( methodBody )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:74: methodBody
		{
		pushFollow(FOLLOW_methodBody_in_synpred236_Delphi10657);
		methodBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred236_Delphi

	// $ANTLR start synpred237_Delphi
	public final void synpred237_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred237_Delphi10717);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred237_Delphi

	// $ANTLR start synpred240_Delphi
	public final void synpred240_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )?
		int alt332=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt332=1;
				}
				break;
			case CLASS:
				{
				int LA332_2 = input.LA(2);
				if ( (synpred237_Delphi()) ) {
					alt332=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA332_3 = input.LA(2);
				if ( (synpred237_Delphi()) ) {
					alt332=1;
				}
				}
				break;
		}
		switch (alt332) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred240_Delphi10717);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:51: ( 'class' )?
		int alt333=2;
		int LA333_0 = input.LA(1);
		if ( (LA333_0==CLASS) ) {
			alt333=1;
		}
		switch (alt333) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred240_Delphi10722); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred240_Delphi10727);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred240_Delphi10729);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:84: ( formalParameterSection )?
		int alt334=2;
		int LA334_0 = input.LA(1);
		if ( (LA334_0==LPAREN) ) {
			alt334=1;
		}
		switch (alt334) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred240_Delphi10732);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred240_Delphi

	// $ANTLR start synpred241_Delphi
	public final void synpred241_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred241_Delphi10830);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred241_Delphi

	// $ANTLR start synpred244_Delphi
	public final void synpred244_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:116: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:116: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred244_Delphi10852);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred244_Delphi

	// $ANTLR start synpred246_Delphi
	public final void synpred246_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )?
		int alt336=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt336=1;
				}
				break;
			case CLASS:
				{
				int LA336_2 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt336=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA336_3 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt336=1;
				}
				}
				break;
		}
		switch (alt336) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred246_Delphi10830);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:51: ( 'class' )?
		int alt337=2;
		int LA337_0 = input.LA(1);
		if ( (LA337_0==CLASS) ) {
			alt337=1;
		}
		switch (alt337) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred246_Delphi10835); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred246_Delphi10839); if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred246_Delphi10841);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:84: ( formalParameterSection )?
		int alt338=2;
		int LA338_0 = input.LA(1);
		if ( (LA338_0==LPAREN) ) {
			alt338=1;
		}
		switch (alt338) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred246_Delphi10844);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:110: ( ':' ( customAttribute )? typeDecl )?
		int alt340=2;
		int LA340_0 = input.LA(1);
		if ( (LA340_0==COLON) ) {
			alt340=1;
		}
		switch (alt340) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:111: ':' ( customAttribute )? typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred246_Delphi10849); if (state.failed) return;

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:115: ( customAttribute )?
				int alt339=2;
				switch ( input.LA(1) ) {
					case LBRACK:
						{
						int LA339_1 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case PACKED:
						{
						int LA339_2 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case ARRAY:
						{
						int LA339_3 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case SET:
						{
						int LA339_4 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case FILE:
						{
						int LA339_5 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case CLASS:
						{
						int LA339_6 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case DISPINTERFACE:
					case INTERFACE:
						{
						int LA339_7 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case OBJECT:
						{
						int LA339_8 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case RECORD:
						{
						int LA339_9 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case POINTER2:
						{
						int LA339_10 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case POINTER:
						{
						int LA339_11 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case STRING:
						{
						int LA339_12 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TYPE:
						{
						int LA339_13 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case ANSISTRING:
						{
						int LA339_14 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case FUNCTION:
						{
						int LA339_15 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case PROCEDURE:
						{
						int LA339_16 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case REFERENCE:
						{
						int LA339_17 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case VARIANT:
						{
						int LA339_18 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TkIdentifier:
						{
						int LA339_19 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case 200:
						{
						int LA339_20 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case ADD:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case READ:
					case READONLY:
					case REGISTER:
					case REMOVE:
					case STORED:
					case STRICT:
					case WRITE:
						{
						int LA339_21 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case LPAREN:
						{
						int LA339_22 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case AT2:
						{
						int LA339_23 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case 201:
						{
						int LA339_24 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case NOT:
						{
						int LA339_25 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case PLUS:
						{
						int LA339_26 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case MINUS:
						{
						int LA339_27 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TkHexNum:
					case TkIntNum:
						{
						int LA339_28 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TkRealNum:
						{
						int LA339_29 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TkAsmHexNum:
						{
						int LA339_30 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case TRUE:
						{
						int LA339_31 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case FALSE:
						{
						int LA339_32 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case NIL:
						{
						int LA339_33 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case ControlString:
						{
						int LA339_34 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case QuotedString:
						{
						int LA339_35 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case INHERITED:
						{
						int LA339_36 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case DOT:
						{
						int LA339_37 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case LT:
						{
						int LA339_38 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case AND:
					case AS:
					case DIV:
					case MOD:
					case OR:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case XOR:
						{
						int LA339_39 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case EQUAL:
						{
						int LA339_40 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case GE:
					case GT:
					case IN:
					case IS:
					case LE:
					case NOT_EQUAL:
						{
						int LA339_41 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case DOTDOT:
						{
						int LA339_42 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
					case EOF:
						{
						int LA339_43 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt339=1;
						}
						}
						break;
				}
				switch (alt339) {
					case 1 :
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:116: customAttribute
						{
						pushFollow(FOLLOW_customAttribute_in_synpred246_Delphi10852);
						customAttribute();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_typeDecl_in_synpred246_Delphi10856);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred246_Delphi

	// $ANTLR start synpred247_Delphi
	public final void synpred247_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred247_Delphi10965);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred247_Delphi

	// $ANTLR start synpred249_Delphi
	public final void synpred249_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:113: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:113: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred249_Delphi10984);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred249_Delphi

	// $ANTLR start synpred257_Delphi
	public final void synpred257_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:53: ( functionDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:53: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred257_Delphi11325);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred257_Delphi

	// $ANTLR start synpred258_Delphi
	public final void synpred258_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:74: ( procBody )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:74: procBody
		{
		pushFollow(FOLLOW_procBody_in_synpred258_Delphi11330);
		procBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred258_Delphi

	// $ANTLR start synpred259_Delphi
	public final void synpred259_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred259_Delphi11396);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred259_Delphi

	// $ANTLR start synpred261_Delphi
	public final void synpred261_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )?
		int alt343=2;
		int LA343_0 = input.LA(1);
		if ( (LA343_0==LBRACK) ) {
			alt343=1;
		}
		else if ( (LA343_0==PROCEDURE) ) {
			int LA343_2 = input.LA(2);
			if ( (synpred259_Delphi()) ) {
				alt343=1;
			}
		}
		switch (alt343) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred261_Delphi11396);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,PROCEDURE,FOLLOW_PROCEDURE_in_synpred261_Delphi11400); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred261_Delphi11402);
		ident();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:69: ( formalParameterSection )?
		int alt344=2;
		int LA344_0 = input.LA(1);
		if ( (LA344_0==LPAREN) ) {
			alt344=1;
		}
		switch (alt344) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:70: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred261_Delphi11405);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred261_Delphi

	// $ANTLR start synpred262_Delphi
	public final void synpred262_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred262_Delphi11505);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred262_Delphi

	// $ANTLR start synpred266_Delphi
	public final void synpred266_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:33: ( customAttribute )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred266_Delphi11747);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred266_Delphi

	// $ANTLR start synpred272_Delphi
	public final void synpred272_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:47: ( functionDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:47: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred272_Delphi12059);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred272_Delphi

	// $ANTLR start synpred274_Delphi
	public final void synpred274_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:44: ( 'name' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:44: 'name' expression
		{
		match(input,NAME,FOLLOW_NAME_in_synpred274_Delphi12100); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred274_Delphi12102);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred274_Delphi

	// $ANTLR start synpred275_Delphi
	public final void synpred275_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:64: ( 'index' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:64: 'index' expression
		{
		match(input,INDEX,FOLLOW_INDEX_in_synpred275_Delphi12106); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred275_Delphi12108);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred275_Delphi

	// $ANTLR start synpred276_Delphi
	public final void synpred276_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:86: ( functionDirective )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:86: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred276_Delphi12113);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred276_Delphi

	// $ANTLR start synpred278_Delphi
	public final void synpred278_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:33: ( customAttributeDecl )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:33: customAttributeDecl
		{
		pushFollow(FOLLOW_customAttributeDecl_in_synpred278_Delphi12251);
		customAttributeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred278_Delphi

	// $ANTLR start synpred279_Delphi
	public final void synpred279_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:67: ( expressionList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:67: expressionList
		{
		pushFollow(FOLLOW_expressionList_in_synpred279_Delphi12307);
		expressionList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred279_Delphi

	// $ANTLR start synpred281_Delphi
	public final void synpred281_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: ( anonymousExpression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: anonymousExpression
		{
		pushFollow(FOLLOW_anonymousExpression_in_synpred281_Delphi12399);
		anonymousExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred281_Delphi

	// $ANTLR start synpred282_Delphi
	public final void synpred282_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:50: ( relOp simpleExpression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:50: relOp simpleExpression
		{
		pushFollow(FOLLOW_relOp_in_synpred282_Delphi12443);
		relOp();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred282_Delphi12445);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred282_Delphi

	// $ANTLR start synpred283_Delphi
	public final void synpred283_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:76: ( '=' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:76: '=' expression
		{
		match(input,EQUAL,FOLLOW_EQUAL_in_synpred283_Delphi12450); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred283_Delphi12452);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred283_Delphi

	// $ANTLR start synpred284_Delphi
	public final void synpred284_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:45: ( formalParameterSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred284_Delphi12506);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred284_Delphi

	// $ANTLR start synpred287_Delphi
	public final void synpred287_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:40: ( operator factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:40: operator factor
		{
		pushFollow(FOLLOW_operator_in_synpred287_Delphi12606);
		operator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred287_Delphi12608);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred287_Delphi

	// $ANTLR start synpred288_Delphi
	public final void synpred288_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: ( '@' factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '@' factor
		{
		match(input,AT2,FOLLOW_AT2_in_synpred288_Delphi12669); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred288_Delphi12671);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_Delphi

	// $ANTLR start synpred289_Delphi
	public final void synpred289_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: ( '@@' factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: '@@' factor
		{
		match(input,201,FOLLOW_201_in_synpred289_Delphi12704); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred289_Delphi12706);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred289_Delphi

	// $ANTLR start synpred290_Delphi
	public final void synpred290_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: ( 'not' factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: 'not' factor
		{
		match(input,NOT,FOLLOW_NOT_in_synpred290_Delphi12746); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred290_Delphi12748);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred290_Delphi

	// $ANTLR start synpred291_Delphi
	public final void synpred291_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: ( '+' factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: '+' factor
		{
		match(input,PLUS,FOLLOW_PLUS_in_synpred291_Delphi12781); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred291_Delphi12783);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred291_Delphi

	// $ANTLR start synpred292_Delphi
	public final void synpred292_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: ( '-' factor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: '-' factor
		{
		match(input,MINUS,FOLLOW_MINUS_in_synpred292_Delphi12816); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred292_Delphi12818);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_Delphi

	// $ANTLR start synpred293_Delphi
	public final void synpred293_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: ( '^' ident )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: '^' ident
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred293_Delphi12851); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred293_Delphi12853);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_Delphi

	// $ANTLR start synpred294_Delphi
	public final void synpred294_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: ( intNum )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: intNum
		{
		pushFollow(FOLLOW_intNum_in_synpred294_Delphi12897);
		intNum();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred294_Delphi

	// $ANTLR start synpred295_Delphi
	public final void synpred295_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: ( realNum )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: realNum
		{
		pushFollow(FOLLOW_realNum_in_synpred295_Delphi12930);
		realNum();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_Delphi

	// $ANTLR start synpred296_Delphi
	public final void synpred296_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: ( TkAsmHexNum )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: TkAsmHexNum
		{
		match(input,TkAsmHexNum,FOLLOW_TkAsmHexNum_in_synpred296_Delphi12963); if (state.failed) return;

		}

	}
	// $ANTLR end synpred296_Delphi

	// $ANTLR start synpred297_Delphi
	public final void synpred297_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ( 'true' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: 'true'
		{
		match(input,TRUE,FOLLOW_TRUE_in_synpred297_Delphi13006); if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_Delphi

	// $ANTLR start synpred298_Delphi
	public final void synpred298_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: ( 'false' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: 'false'
		{
		match(input,FALSE,FOLLOW_FALSE_in_synpred298_Delphi13039); if (state.failed) return;

		}

	}
	// $ANTLR end synpred298_Delphi

	// $ANTLR start synpred299_Delphi
	public final void synpred299_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: ( 'nil' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: 'nil'
		{
		match(input,NIL,FOLLOW_NIL_in_synpred299_Delphi13072); if (state.failed) return;

		}

	}
	// $ANTLR end synpred299_Delphi

	// $ANTLR start synpred300_Delphi
	public final void synpred300_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:52: ( '^' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:52: '^'
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred300_Delphi13112); if (state.failed) return;

		}

	}
	// $ANTLR end synpred300_Delphi

	// $ANTLR start synpred301_Delphi
	public final void synpred301_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:59: ( '.' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:59: '.' expression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred301_Delphi13117); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred301_Delphi13119);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_Delphi

	// $ANTLR start synpred302_Delphi
	public final void synpred302_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: ( '(' expression ')' ( '^' )? ( '.' expression )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '(' expression ')' ( '^' )? ( '.' expression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred302_Delphi13105); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred302_Delphi13107);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred302_Delphi13109); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:51: ( '^' )?
		int alt350=2;
		int LA350_0 = input.LA(1);
		if ( (LA350_0==POINTER2) ) {
			alt350=1;
		}
		switch (alt350) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:52: '^'
				{
				match(input,POINTER2,FOLLOW_POINTER2_in_synpred302_Delphi13112); if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:58: ( '.' expression )?
		int alt351=2;
		int LA351_0 = input.LA(1);
		if ( (LA351_0==DOT) ) {
			alt351=1;
		}
		switch (alt351) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:59: '.' expression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred302_Delphi13117); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred302_Delphi13119);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred302_Delphi

	// $ANTLR start synpred303_Delphi
	public final void synpred303_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: ( stringFactor )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: stringFactor
		{
		pushFollow(FOLLOW_stringFactor_in_synpred303_Delphi13162);
		stringFactor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_Delphi

	// $ANTLR start synpred304_Delphi
	public final void synpred304_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: ( setSection )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: setSection
		{
		pushFollow(FOLLOW_setSection_in_synpred304_Delphi13195);
		setSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred304_Delphi

	// $ANTLR start synpred305_Delphi
	public final void synpred305_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ( designator )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred305_Delphi13228);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred305_Delphi

	// $ANTLR start synpred306_Delphi
	public final void synpred306_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:47: ( QuotedString ControlString )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:47: QuotedString ControlString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred306_Delphi13323); if (state.failed) return;

		match(input,ControlString,FOLLOW_ControlString_in_synpred306_Delphi13325); if (state.failed) return;

		}

	}
	// $ANTLR end synpred306_Delphi

	// $ANTLR start synpred307_Delphi
	public final void synpred307_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:77: ( QuotedString )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:77: QuotedString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred307_Delphi13330); if (state.failed) return;

		}

	}
	// $ANTLR end synpred307_Delphi

	// $ANTLR start synpred309_Delphi
	public final void synpred309_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:46: ( ControlString QuotedString )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:46: ControlString QuotedString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred309_Delphi13368); if (state.failed) return;

		match(input,QuotedString,FOLLOW_QuotedString_in_synpred309_Delphi13370); if (state.failed) return;

		}

	}
	// $ANTLR end synpred309_Delphi

	// $ANTLR start synpred310_Delphi
	public final void synpred310_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:76: ( ControlString )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:76: ControlString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred310_Delphi13375); if (state.failed) return;

		}

	}
	// $ANTLR end synpred310_Delphi

	// $ANTLR start synpred313_Delphi
	public final void synpred313_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:37: ( expression ( ( ',' | '..' ) expression )* )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:37: expression ( ( ',' | '..' ) expression )*
		{
		pushFollow(FOLLOW_expression_in_synpred313_Delphi13435);
		expression();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:48: ( ( ',' | '..' ) expression )*
		loop354:
		while (true) {
			int alt354=2;
			int LA354_0 = input.LA(1);
			if ( (LA354_0==COMMA||LA354_0==DOTDOT) ) {
				alt354=1;
			}

			switch (alt354) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( ',' | '..' ) expression
				{
				if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				pushFollow(FOLLOW_expression_in_synpred313_Delphi13446);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop354;
			}
		}

		}

	}
	// $ANTLR end synpred313_Delphi

	// $ANTLR start synpred314_Delphi
	public final void synpred314_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:33: ( 'inherited' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:33: 'inherited'
		{
		match(input,INHERITED,FOLLOW_INHERITED_in_synpred314_Delphi13509); if (state.failed) return;

		}

	}
	// $ANTLR end synpred314_Delphi

	// $ANTLR start synpred315_Delphi
	public final void synpred315_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:50: ( namespacedQualifiedIdent )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:50: namespacedQualifiedIdent
		{
		pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred315_Delphi13516);
		namespacedQualifiedIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred315_Delphi

	// $ANTLR start synpred316_Delphi
	public final void synpred316_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:49: ( ( namespacedQualifiedIdent | typeId ) )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:49: ( namespacedQualifiedIdent | typeId )
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:49: ( namespacedQualifiedIdent | typeId )
		int alt355=2;
		switch ( input.LA(1) ) {
		case TkIdentifier:
			{
			int LA355_1 = input.LA(2);
			if ( (synpred315_Delphi()) ) {
				alt355=1;
			}
			else if ( (true) ) {
				alt355=2;
			}

			}
			break;
		case 200:
			{
			int LA355_2 = input.LA(2);
			if ( (LA355_2==TkIdentifier) ) {
				int LA355_6 = input.LA(3);
				if ( (synpred315_Delphi()) ) {
					alt355=1;
				}
				else if ( (true) ) {
					alt355=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 355, 2, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

			}
			break;
		case ADD:
		case ANSISTRING:
		case AT:
		case BREAK:
		case CONTAINS:
		case CONTINUE:
		case DEFAULT:
		case EXIT:
		case EXPORT:
		case FINAL:
		case IMPLEMENTS:
		case INDEX:
		case LOCAL:
		case MESSAGE:
		case NAME:
		case OBJECT:
		case OPERATOR:
		case OUT:
		case POINTER:
		case READ:
		case READONLY:
		case REFERENCE:
		case REGISTER:
		case REMOVE:
		case STORED:
		case STRICT:
		case STRING:
		case VARIANT:
		case WRITE:
			{
			int LA355_3 = input.LA(2);
			if ( (synpred315_Delphi()) ) {
				alt355=1;
			}
			else if ( (true) ) {
				alt355=2;
			}

			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 355, 0, input);
			throw nvae;
		}
		switch (alt355) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:50: namespacedQualifiedIdent
				{
				pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred316_Delphi13516);
				namespacedQualifiedIdent();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:77: typeId
				{
				pushFollow(FOLLOW_typeId_in_synpred316_Delphi13520);
				typeId();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred316_Delphi

	// $ANTLR start synpred317_Delphi
	public final void synpred317_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:89: ( designatorItem )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:89: designatorItem
		{
		pushFollow(FOLLOW_designatorItem_in_synpred317_Delphi13527);
		designatorItem();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred317_Delphi

	// $ANTLR start synpred327_Delphi
	public final void synpred327_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:37: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
		{
		pushFollow(FOLLOW_expression_in_synpred327_Delphi13761);
		expression();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:48: ( colonConstruct )?
		int alt358=2;
		int LA358_0 = input.LA(1);
		if ( (LA358_0==COLON) ) {
			alt358=1;
		}
		switch (alt358) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:49: colonConstruct
				{
				pushFollow(FOLLOW_colonConstruct_in_synpred327_Delphi13764);
				colonConstruct();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:66: ( ',' expression ( colonConstruct )? )*
		loop360:
		while (true) {
			int alt360=2;
			int LA360_0 = input.LA(1);
			if ( (LA360_0==COMMA) ) {
				alt360=1;
			}

			switch (alt360) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:67: ',' expression ( colonConstruct )?
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred327_Delphi13769); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred327_Delphi13771);
				expression();
				state._fsp--;
				if (state.failed) return;

				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:82: ( colonConstruct )?
				int alt359=2;
				int LA359_0 = input.LA(1);
				if ( (LA359_0==COLON) ) {
					alt359=1;
				}
				switch (alt359) {
					case 1 :
						// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:83: colonConstruct
						{
						pushFollow(FOLLOW_colonConstruct_in_synpred327_Delphi13774);
						colonConstruct();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				}
				break;

			default :
				break loop360;
			}
		}

		}

	}
	// $ANTLR end synpred327_Delphi

	// $ANTLR start synpred358_Delphi
	public final void synpred358_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: ( label ':' statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: label ':' statement
		{
		pushFollow(FOLLOW_label_in_synpred358_Delphi15028);
		label();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred358_Delphi15030); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred358_Delphi15032);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred358_Delphi

	// $ANTLR start synpred359_Delphi
	public final void synpred359_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:66: ( 'else' statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:66: 'else' statement
		{
		match(input,ELSE,FOLLOW_ELSE_in_synpred359_Delphi15128); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred359_Delphi15130);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred359_Delphi

	// $ANTLR start synpred366_Delphi
	public final void synpred366_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:42: ( statementList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:42: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred366_Delphi15397);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred366_Delphi

	// $ANTLR start synpred367_Delphi
	public final void synpred367_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: ( 'for' designator ':=' expression 'to' expression 'do' statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: 'for' designator ':=' expression 'to' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred367_Delphi15513); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred367_Delphi15515);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred367_Delphi15517); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred367_Delphi15519);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,TO,FOLLOW_TO_in_synpred367_Delphi15521); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred367_Delphi15523);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred367_Delphi15525); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred367_Delphi15527);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred367_Delphi

	// $ANTLR start synpred368_Delphi
	public final void synpred368_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: ( 'for' designator ':=' expression 'downto' expression 'do' statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: 'for' designator ':=' expression 'downto' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred368_Delphi15560); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred368_Delphi15562);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred368_Delphi15564); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred368_Delphi15566);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DOWNTO,FOLLOW_DOWNTO_in_synpred368_Delphi15568); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred368_Delphi15570);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred368_Delphi15572); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred368_Delphi15574);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred368_Delphi

	// $ANTLR start synpred369_Delphi
	public final void synpred369_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: ( designator 'as' designator )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: designator 'as' designator
		{
		pushFollow(FOLLOW_designator_in_synpred369_Delphi15732);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,AS,FOLLOW_AS_in_synpred369_Delphi15734); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred369_Delphi15736);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred369_Delphi

	// $ANTLR start synpred371_Delphi
	public final void synpred371_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:41: ( statementList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:41: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred371_Delphi15834);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred371_Delphi

	// $ANTLR start synpred372_Delphi
	public final void synpred372_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:33: ( statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:33: statement
		{
		pushFollow(FOLLOW_statement_in_synpred372_Delphi15904);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred372_Delphi

	// $ANTLR start synpred373_Delphi
	public final void synpred373_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:51: ( statement )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:51: statement
		{
		pushFollow(FOLLOW_statement_in_synpred373_Delphi15912);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred373_Delphi

	// $ANTLR start synpred374_Delphi
	public final void synpred374_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:46: ( ';' ( statement )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:46: ';' ( statement )?
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred374_Delphi15909); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:50: ( statement )?
		int alt362=2;
		int LA362_0 = input.LA(1);
		if ( (LA362_0==ADD||LA362_0==ANSISTRING||LA362_0==ASM||(LA362_0 >= ASSIGN && LA362_0 <= AT2)||(LA362_0 >= BEGIN && LA362_0 <= CASE)||(LA362_0 >= CONTAINS && LA362_0 <= CONTINUE)||LA362_0==DEFAULT||LA362_0==DOT||LA362_0==EXIT||LA362_0==EXPORT||LA362_0==FINAL||LA362_0==FOR||LA362_0==GOTO||LA362_0==IF||LA362_0==IMPLEMENTS||(LA362_0 >= INDEX && LA362_0 <= INHERITED)||LA362_0==LBRACK||(LA362_0 >= LOCAL && LA362_0 <= MESSAGE)||LA362_0==NAME||LA362_0==OBJECT||LA362_0==OPERATOR||LA362_0==OUT||(LA362_0 >= POINTER && LA362_0 <= POINTER2)||LA362_0==RAISE||(LA362_0 >= READ && LA362_0 <= READONLY)||(LA362_0 >= REFERENCE && LA362_0 <= REGISTER)||(LA362_0 >= REMOVE && LA362_0 <= REPEAT)||(LA362_0 >= STORED && LA362_0 <= STRING)||LA362_0==TRY||(LA362_0 >= TkHexNum && LA362_0 <= TkIntNum)||LA362_0==VARIANT||(LA362_0 >= WHILE && LA362_0 <= WRITE)||LA362_0==200) ) {
			alt362=1;
		}
		else if ( (LA362_0==EOF) ) {
			int LA362_2 = input.LA(2);
			if ( (synpred373_Delphi()) ) {
				alt362=1;
			}
		}
		switch (alt362) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:51: statement
				{
				pushFollow(FOLLOW_statement_in_synpred374_Delphi15912);
				statement();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred374_Delphi

	// $ANTLR start synpred375_Delphi
	public final void synpred375_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: ( designator ':=' expression )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: designator ':=' expression
		{
		pushFollow(FOLLOW_designator_in_synpred375_Delphi15966);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred375_Delphi15968); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred375_Delphi15970);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred375_Delphi

	// $ANTLR start synpred376_Delphi
	public final void synpred376_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: ( designator )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred376_Delphi16003);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred376_Delphi

	// $ANTLR start synpred378_Delphi
	public final void synpred378_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:40: ( '(' expression ')' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:40: '(' expression ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred378_Delphi16127); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred378_Delphi16129);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred378_Delphi16131); if (state.failed) return;

		}

	}
	// $ANTLR end synpred378_Delphi

	// $ANTLR start synpred382_Delphi
	public final void synpred382_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred382_Delphi16252); if (state.failed) return;

		pushFollow(FOLLOW_recordConstExpression_in_synpred382_Delphi16254);
		recordConstExpression();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:58: ( ';' recordConstExpression )*
		loop364:
		while (true) {
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==SEMI) ) {
				alt364=1;
			}

			switch (alt364) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:59: ';' recordConstExpression
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred382_Delphi16257); if (state.failed) return;

				pushFollow(FOLLOW_recordConstExpression_in_synpred382_Delphi16259);
				recordConstExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop364;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred382_Delphi16263); if (state.failed) return;

		}

	}
	// $ANTLR end synpred382_Delphi

	// $ANTLR start synpred384_Delphi
	public final void synpred384_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: ( '(' constExpression ( ',' constExpression )* ')' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: '(' constExpression ( ',' constExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred384_Delphi16297); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred384_Delphi16299);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:52: ( ',' constExpression )*
		loop365:
		while (true) {
			int alt365=2;
			int LA365_0 = input.LA(1);
			if ( (LA365_0==COMMA) ) {
				alt365=1;
			}

			switch (alt365) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:53: ',' constExpression
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred384_Delphi16302); if (state.failed) return;

				pushFollow(FOLLOW_constExpression_in_synpred384_Delphi16304);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop365;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred384_Delphi16308); if (state.failed) return;

		}

	}
	// $ANTLR end synpred384_Delphi

	// $ANTLR start synpred385_Delphi
	public final void synpred385_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:39: ( statementList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred385_Delphi16448);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred385_Delphi

	// $ANTLR start synpred386_Delphi
	public final void synpred386_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: 'try' ( statementList )? 'except' handlerList 'end'
		{
		match(input,TRY,FOLLOW_TRY_in_synpred386_Delphi16445); if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:38: ( statementList )?
		int alt366=2;
		int LA366_0 = input.LA(1);
		if ( (LA366_0==ADD||LA366_0==ANSISTRING||LA366_0==ASM||(LA366_0 >= ASSIGN && LA366_0 <= AT2)||(LA366_0 >= BEGIN && LA366_0 <= CASE)||(LA366_0 >= CONTAINS && LA366_0 <= CONTINUE)||LA366_0==DEFAULT||LA366_0==DOT||LA366_0==EXIT||LA366_0==EXPORT||LA366_0==FINAL||LA366_0==FOR||LA366_0==GOTO||LA366_0==IF||LA366_0==IMPLEMENTS||(LA366_0 >= INDEX && LA366_0 <= INHERITED)||LA366_0==LBRACK||(LA366_0 >= LOCAL && LA366_0 <= MESSAGE)||LA366_0==NAME||LA366_0==OBJECT||LA366_0==OPERATOR||LA366_0==OUT||(LA366_0 >= POINTER && LA366_0 <= POINTER2)||LA366_0==RAISE||(LA366_0 >= READ && LA366_0 <= READONLY)||(LA366_0 >= REFERENCE && LA366_0 <= REGISTER)||(LA366_0 >= REMOVE && LA366_0 <= REPEAT)||LA366_0==SEMI||(LA366_0 >= STORED && LA366_0 <= STRING)||LA366_0==TRY||(LA366_0 >= TkHexNum && LA366_0 <= TkIntNum)||LA366_0==VARIANT||(LA366_0 >= WHILE && LA366_0 <= WRITE)||LA366_0==200) ) {
			alt366=1;
		}
		else if ( (LA366_0==EXCEPT) ) {
			int LA366_2 = input.LA(2);
			if ( (synpred385_Delphi()) ) {
				alt366=1;
			}
		}
		switch (alt366) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:39: statementList
				{
				pushFollow(FOLLOW_statementList_in_synpred386_Delphi16448);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,EXCEPT,FOLLOW_EXCEPT_in_synpred386_Delphi16452); if (state.failed) return;

		pushFollow(FOLLOW_handlerList_in_synpred386_Delphi16454);
		handlerList();
		state._fsp--;
		if (state.failed) return;

		match(input,END,FOLLOW_END_in_synpred386_Delphi16456); if (state.failed) return;

		}

	}
	// $ANTLR end synpred386_Delphi

	// $ANTLR start synpred387_Delphi
	public final void synpred387_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:39: ( statementList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred387_Delphi16492);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred387_Delphi

	// $ANTLR start synpred388_Delphi
	public final void synpred388_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:66: ( statementList )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:66: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred388_Delphi16499);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred388_Delphi

	// $ANTLR start synpred391_Delphi
	public final void synpred391_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( ( handler )* ( 'else' statementList )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( handler )* ( 'else' statementList )?
		{
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( handler )*
		loop367:
		while (true) {
			int alt367=2;
			int LA367_0 = input.LA(1);
			if ( (LA367_0==ON) ) {
				alt367=1;
			}

			switch (alt367) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:33: handler
				{
				pushFollow(FOLLOW_handler_in_synpred391_Delphi16558);
				handler();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop367;
			}
		}

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:43: ( 'else' statementList )?
		int alt368=2;
		int LA368_0 = input.LA(1);
		if ( (LA368_0==ELSE) ) {
			alt368=1;
		}
		switch (alt368) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:44: 'else' statementList
				{
				match(input,ELSE,FOLLOW_ELSE_in_synpred391_Delphi16563); if (state.failed) return;

				pushFollow(FOLLOW_statementList_in_synpred391_Delphi16565);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred391_Delphi

	// $ANTLR start synpred394_Delphi
	public final void synpred394_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( statement ( ';' )? )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: statement ( ';' )?
		{
		pushFollow(FOLLOW_statement_in_synpred394_Delphi16775);
		statement();
		state._fsp--;
		if (state.failed) return;

		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:42: ( ';' )?
		int alt369=2;
		int LA369_0 = input.LA(1);
		if ( (LA369_0==SEMI) ) {
			alt369=1;
		}
		switch (alt369) {
			case 1 :
				// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:43: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred394_Delphi16778); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred394_Delphi

	// $ANTLR start synpred395_Delphi
	public final void synpred395_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:41: ( designator )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:41: designator
		{
		pushFollow(FOLLOW_designator_in_synpred395_Delphi16867);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred395_Delphi

	// $ANTLR start synpred396_Delphi
	public final void synpred396_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:55: ( AT designator )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:55: AT designator
		{
		match(input,AT,FOLLOW_AT_in_synpred396_Delphi16872); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred396_Delphi16874);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred396_Delphi

	// $ANTLR start synpred414_Delphi
	public final void synpred414_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:44: ( ';' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:44: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred414_Delphi17782); if (state.failed) return;

		}

	}
	// $ANTLR end synpred414_Delphi

	// $ANTLR start synpred438_Delphi
	public final void synpred438_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: ( 'external' ';' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: 'external' ';'
		{
		match(input,EXTERNAL,FOLLOW_EXTERNAL_in_synpred438_Delphi18987); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred438_Delphi18989); if (state.failed) return;

		}

	}
	// $ANTLR end synpred438_Delphi

	// $ANTLR start synpred477_Delphi
	public final void synpred477_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:33: ( namespaceName '.' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:33: namespaceName '.'
		{
		pushFollow(FOLLOW_namespaceName_in_synpred477_Delphi20023);
		namespaceName();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred477_Delphi20025); if (state.failed) return;

		}

	}
	// $ANTLR end synpred477_Delphi

	// $ANTLR start synpred478_Delphi
	public final void synpred478_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:39: ( '.' ident )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:39: '.' ident
		{
		match(input,DOT,FOLLOW_DOT_in_synpred478_Delphi20084); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred478_Delphi20086);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred478_Delphi

	// $ANTLR start synpred479_Delphi
	public final void synpred479_Delphi_fragment() throws RecognitionException {
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:34: ( ident '.' )
		// org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:34: ident '.'
		{
		pushFollow(FOLLOW_ident_in_synpred479_Delphi20141);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred479_Delphi20143); if (state.failed) return;

		}

	}
	// $ANTLR end synpred479_Delphi

	// Delegated rules

	public final boolean synpred31_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred32_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred36_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred358_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred358_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred391_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred391_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred394_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred394_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred314_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred314_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred166_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred166_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred262_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred262_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred261_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred261_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred299_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred299_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred129_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred129_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred310_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred310_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred317_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred317_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred296_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred296_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred298_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred298_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred315_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred315_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred316_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred316_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred313_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred313_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred123_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred123_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred127_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred127_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred162_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred162_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred258_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred258_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred79_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred79_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred396_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred396_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred68_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred68_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred216_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred216_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred385_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred385_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred387_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred387_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred40_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred42_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred198_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred198_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred382_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred382_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred327_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred327_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred61_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred61_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred477_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred477_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred157_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred157_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred84_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred84_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred305_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred305_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred306_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred306_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred158_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred158_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred309_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred309_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred302_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred302_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred414_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred414_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred128_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred128_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred161_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred161_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred266_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred266_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred113_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred113_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred259_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred259_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred244_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred244_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred237_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred237_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred65_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred65_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred386_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred386_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred375_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred375_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred368_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred368_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred194_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred194_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred371_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred371_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred50_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred372_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred372_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred187_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred187_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred186_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred186_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred240_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred240_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred208_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred208_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred201_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred201_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred149_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred149_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred148_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred148_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred94_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred94_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred90_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred90_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred92_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred92_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred93_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred93_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred95_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred95_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred281_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred281_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred143_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred143_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred282_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred282_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred284_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred284_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred142_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred142_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred276_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred276_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred151_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred151_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred249_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred249_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred247_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred247_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred86_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred86_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred88_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred88_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred114_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred114_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred191_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred191_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred101_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred101_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred378_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred378_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred234_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred234_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred236_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred236_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred180_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred180_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred241_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred241_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred367_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred367_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred46_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred376_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred376_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred193_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred193_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred230_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred230_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred369_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred369_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred48_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred374_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred374_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred199_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred199_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred213_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred213_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred212_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred212_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred478_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred478_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred479_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred479_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred81_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred81_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred304_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred304_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred155_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred155_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred156_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred156_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred272_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred272_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred137_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred137_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred290_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred290_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred287_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred287_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred133_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred133_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred294_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred294_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred122_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred122_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred126_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred126_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred152_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred152_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred279_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred279_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred78_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred78_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred438_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred438_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred163_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred163_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred85_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred85_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred257_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred257_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred100_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred100_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred395_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred395_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred235_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred235_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred217_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred217_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred181_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred181_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred246_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred246_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred359_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred359_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred388_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred388_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred384_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred384_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred231_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred231_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred366_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred366_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred373_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred373_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA26 dfa26 = new DFA26(this);
	protected DFA30 dfa30 = new DFA30(this);
	protected DFA33 dfa33 = new DFA33(this);
	protected DFA46 dfa46 = new DFA46(this);
	protected DFA53 dfa53 = new DFA53(this);
	protected DFA57 dfa57 = new DFA57(this);
	protected DFA65 dfa65 = new DFA65(this);
	protected DFA66 dfa66 = new DFA66(this);
	protected DFA68 dfa68 = new DFA68(this);
	protected DFA74 dfa74 = new DFA74(this);
	protected DFA88 dfa88 = new DFA88(this);
	protected DFA102 dfa102 = new DFA102(this);
	protected DFA110 dfa110 = new DFA110(this);
	protected DFA164 dfa164 = new DFA164(this);
	protected DFA166 dfa166 = new DFA166(this);
	protected DFA168 dfa168 = new DFA168(this);
	protected DFA185 dfa185 = new DFA185(this);
	protected DFA187 dfa187 = new DFA187(this);
	protected DFA200 dfa200 = new DFA200(this);
	protected DFA210 dfa210 = new DFA210(this);
	protected DFA216 dfa216 = new DFA216(this);
	protected DFA227 dfa227 = new DFA227(this);
	protected DFA257 dfa257 = new DFA257(this);
	protected DFA290 dfa290 = new DFA290(this);
	static final String DFA26_eotS =
		"\145\uffff";
	static final String DFA26_eofS =
		"\1\1\144\uffff";
	static final String DFA26_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5"+
		"\uffff\1\0\3\uffff";
	static final String DFA26_maxS =
		"\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA26_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA26_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14"+
		"\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
	static final String[] DFA26_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2"+
			"\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1"+
			"\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1"+
			"\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
	static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
	static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
	static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
	static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
	static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
	static final short[][] DFA26_transition;

	static {
		int numStates = DFA26_transitionS.length;
		DFA26_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
		}
	}

	protected class DFA26 extends DFA {

		public DFA26(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 150:41: ( constDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA26_10 = input.LA(1);
						 
						int index26_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA26_17 = input.LA(1);
						 
						int index26_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA26_24 = input.LA(1);
						 
						int index26_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA26_25 = input.LA(1);
						 
						int index26_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA26_26 = input.LA(1);
						 
						int index26_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA26_29 = input.LA(1);
						 
						int index26_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA26_30 = input.LA(1);
						 
						int index26_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA26_32 = input.LA(1);
						 
						int index26_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA26_38 = input.LA(1);
						 
						int index26_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA26_41 = input.LA(1);
						 
						int index26_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA26_43 = input.LA(1);
						 
						int index26_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA26_53 = input.LA(1);
						 
						int index26_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_53);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA26_77 = input.LA(1);
						 
						int index26_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_77);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA26_78 = input.LA(1);
						 
						int index26_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_78);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA26_79 = input.LA(1);
						 
						int index26_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_79);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA26_91 = input.LA(1);
						 
						int index26_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_91);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA26_97 = input.LA(1);
						 
						int index26_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 26, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA30_eotS =
		"\145\uffff";
	static final String DFA30_eofS =
		"\1\1\144\uffff";
	static final String DFA30_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5"+
		"\uffff\1\0\3\uffff";
	static final String DFA30_maxS =
		"\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA30_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA30_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14"+
		"\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
	static final String[] DFA30_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2"+
			"\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1"+
			"\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1"+
			"\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
	static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
	static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
	static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
	static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
	static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
	static final short[][] DFA30_transition;

	static {
		int numStates = DFA30_transitionS.length;
		DFA30_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
		}
	}

	protected class DFA30 extends DFA {

		public DFA30(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 157:55: ( typeDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA30_10 = input.LA(1);
						 
						int index30_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA30_17 = input.LA(1);
						 
						int index30_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA30_24 = input.LA(1);
						 
						int index30_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA30_25 = input.LA(1);
						 
						int index30_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA30_26 = input.LA(1);
						 
						int index30_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA30_29 = input.LA(1);
						 
						int index30_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA30_30 = input.LA(1);
						 
						int index30_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA30_32 = input.LA(1);
						 
						int index30_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA30_38 = input.LA(1);
						 
						int index30_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA30_41 = input.LA(1);
						 
						int index30_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA30_43 = input.LA(1);
						 
						int index30_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA30_53 = input.LA(1);
						 
						int index30_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_53);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA30_77 = input.LA(1);
						 
						int index30_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_77);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA30_78 = input.LA(1);
						 
						int index30_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_78);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA30_79 = input.LA(1);
						 
						int index30_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_79);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA30_91 = input.LA(1);
						 
						int index30_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_91);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA30_97 = input.LA(1);
						 
						int index30_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 30, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA33_eotS =
		"\145\uffff";
	static final String DFA33_eofS =
		"\1\1\144\uffff";
	static final String DFA33_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5"+
		"\uffff\1\0\3\uffff";
	static final String DFA33_maxS =
		"\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA33_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA33_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14"+
		"\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2"+
			"\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1"+
			"\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1"+
			"\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 161:54: ( varDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA33_10 = input.LA(1);
						 
						int index33_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA33_17 = input.LA(1);
						 
						int index33_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA33_24 = input.LA(1);
						 
						int index33_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA33_25 = input.LA(1);
						 
						int index33_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA33_26 = input.LA(1);
						 
						int index33_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA33_29 = input.LA(1);
						 
						int index33_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA33_30 = input.LA(1);
						 
						int index33_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA33_32 = input.LA(1);
						 
						int index33_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA33_38 = input.LA(1);
						 
						int index33_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA33_41 = input.LA(1);
						 
						int index33_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA33_43 = input.LA(1);
						 
						int index33_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA33_53 = input.LA(1);
						 
						int index33_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_53);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA33_77 = input.LA(1);
						 
						int index33_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_77);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA33_78 = input.LA(1);
						 
						int index33_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_78);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA33_79 = input.LA(1);
						 
						int index33_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_79);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA33_91 = input.LA(1);
						 
						int index33_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_91);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA33_97 = input.LA(1);
						 
						int index33_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 33, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA46_eotS =
		"\165\uffff";
	static final String DFA46_eofS =
		"\1\25\164\uffff";
	static final String DFA46_minS =
		"\1\4\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\36\uffff\1\0\3\uffff\1\0\6\uffff"+
		"\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff"+
		"\1\0\6\uffff\1\0\20\uffff";
	static final String DFA46_maxS =
		"\1\u00c9\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\36\uffff\1\0\3\uffff\1\0"+
		"\6\uffff\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\6\uffff\1\0\20\uffff";
	static final String DFA46_acceptS =
		"\1\uffff\1\1\23\uffff\1\7\132\uffff\1\6\1\2\1\3\1\4\1\5";
	static final String DFA46_specialS =
		"\5\uffff\1\0\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
		"\1\13\1\14\1\15\36\uffff\1\16\3\uffff\1\17\6\uffff\1\20\13\uffff\1\21"+
		"\1\uffff\1\22\1\23\1\24\2\uffff\1\25\1\26\1\uffff\1\27\5\uffff\1\30\2"+
		"\uffff\1\31\6\uffff\1\32\20\uffff}>";
	static final String[] DFA46_transitionS = {
			"\1\25\1\uffff\1\144\1\25\1\15\1\1\3\25\2\uffff\1\144\2\25\1\uffff\1\25"+
			"\1\144\2\25\1\5\2\25\1\uffff\2\25\2\144\1\25\1\uffff\1\121\3\25\1\1\5"+
			"\25\5\uffff\4\25\1\144\1\25\1\132\4\25\1\1\1\144\2\25\2\uffff\1\16\1"+
			"\25\1\uffff\1\25\4\uffff\1\25\1\122\1\25\1\135\3\25\1\1\3\25\2\uffff"+
			"\2\25\1\124\2\25\1\144\2\25\1\76\5\25\1\7\2\25\1\67\1\25\1\144\1\25\2"+
			"\uffff\1\1\3\25\1\12\1\11\1\25\1\17\1\uffff\5\25\1\uffff\1\25\2\uffff"+
			"\1\112\1\115\1\1\1\20\1\24\1\uffff\1\144\2\uffff\4\25\1\uffff\1\25\1"+
			"\1\4\25\1\uffff\1\25\1\116\1\63\1\13\4\25\1\uffff\1\14\2\uffff\1\25\14"+
			"\uffff\1\25\1\22\1\25\3\uffff\1\25\6\uffff\2\25\2\uffff\2\25\1\21\3\uffff"+
			"\1\114\1\25\1\uffff\1\25\1\23\1\25",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
	static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
	static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
	static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
	static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
	static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
	static final short[][] DFA46_transition;

	static {
		int numStates = DFA46_transitionS.length;
		DFA46_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
		}
	}

	protected class DFA46 extends DFA {

		public DFA46(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}
		@Override
		public String getDescription() {
			return "180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA46_5 = input.LA(1);
						 
						int index46_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 1;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_5);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA46_7 = input.LA(1);
						 
						int index46_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 1;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_7);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA46_9 = input.LA(1);
						 
						int index46_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 113;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA46_10 = input.LA(1);
						 
						int index46_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 113;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_10);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA46_11 = input.LA(1);
						 
						int index46_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 114;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_11);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA46_12 = input.LA(1);
						 
						int index46_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 114;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_12);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA46_13 = input.LA(1);
						 
						int index46_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 114;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_13);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA46_14 = input.LA(1);
						 
						int index46_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 115;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_14);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA46_15 = input.LA(1);
						 
						int index46_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 115;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_15);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA46_16 = input.LA(1);
						 
						int index46_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 115;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_16);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA46_17 = input.LA(1);
						 
						int index46_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred65_Delphi()) ) {s = 116;}
						else if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_17);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA46_18 = input.LA(1);
						 
						int index46_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_18);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA46_19 = input.LA(1);
						 
						int index46_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA46_20 = input.LA(1);
						 
						int index46_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA46_51 = input.LA(1);
						 
						int index46_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_51);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA46_55 = input.LA(1);
						 
						int index46_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_55);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA46_62 = input.LA(1);
						 
						int index46_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_62);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA46_74 = input.LA(1);
						 
						int index46_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_74);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA46_76 = input.LA(1);
						 
						int index46_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_76);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA46_77 = input.LA(1);
						 
						int index46_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_77);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA46_78 = input.LA(1);
						 
						int index46_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_78);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA46_81 = input.LA(1);
						 
						int index46_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_81);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA46_82 = input.LA(1);
						 
						int index46_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_82);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA46_84 = input.LA(1);
						 
						int index46_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_84);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA46_90 = input.LA(1);
						 
						int index46_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_90);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA46_93 = input.LA(1);
						 
						int index46_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_93);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA46_100 = input.LA(1);
						 
						int index46_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred68_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index46_100);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 46, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA53_eotS =
		"\14\uffff";
	static final String DFA53_eofS =
		"\1\uffff\1\6\1\uffff\1\6\3\uffff\2\6\1\uffff\2\6";
	static final String DFA53_minS =
		"\1\6\1\7\1\u00ae\1\7\1\uffff\1\6\1\uffff\2\7\1\u00ae\2\7";
	static final String DFA53_maxS =
		"\1\u00c9\1\u00c7\1\u00ae\1\u00c7\1\uffff\1\u00c8\1\uffff\2\u00c7\1\u00ae"+
		"\2\u00c7";
	static final String DFA53_acceptS =
		"\4\uffff\1\2\1\uffff\1\1\5\uffff";
	static final String DFA53_specialS =
		"\14\uffff}>";
	static final String[] DFA53_transitionS = {
			"\1\3\1\4\1\3\1\uffff\1\4\4\uffff\1\3\1\4\3\uffff\1\3\10\uffff\2\3\1\4"+
			"\1\uffff\1\3\4\uffff\1\4\1\uffff\2\4\10\uffff\1\4\1\uffff\1\3\1\uffff"+
			"\1\3\2\uffff\1\4\2\uffff\1\3\4\uffff\2\4\1\uffff\1\4\5\uffff\1\3\1\4"+
			"\1\3\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\1\3\2\4\1\3\2\4"+
			"\1\3\1\uffff\1\4\1\uffff\2\4\1\3\2\uffff\1\3\1\4\1\3\6\uffff\1\4\1\3"+
			"\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff\2\3\1\uffff\2\3\1\uffff\1\3\11\uffff"+
			"\4\4\2\uffff\3\3\3\uffff\1\4\4\uffff\1\4\14\uffff\1\4\1\1\1\4\3\uffff"+
			"\1\4\14\uffff\1\3\3\uffff\1\3\2\uffff\1\4\1\2\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
			"\1\7",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
			"",
			"\1\12\1\uffff\1\12\6\uffff\1\12\4\uffff\1\12\10\uffff\2\12\2\uffff\1"+
			"\12\22\uffff\1\12\1\uffff\1\12\5\uffff\1\12\15\uffff\1\12\1\uffff\1\12"+
			"\13\uffff\1\12\2\uffff\1\12\2\uffff\1\12\5\uffff\1\12\2\uffff\1\12\1"+
			"\uffff\1\12\7\uffff\1\12\15\uffff\2\12\1\uffff\2\12\1\uffff\1\12\17\uffff"+
			"\3\12\26\uffff\1\10\21\uffff\1\12\3\uffff\1\12\3\uffff\1\11",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
			"\1\13",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4"
	};

	static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
	static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
	static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
	static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
	static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
	static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
	static final short[][] DFA53_transition;

	static {
		int numStates = DFA53_transitionS.length;
		DFA53_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
		}
	}

	protected class DFA53 extends DFA {

		public DFA53(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}
		@Override
		public String getDescription() {
			return "200:1: arrayIndex : ( typeId | expression '..' expression );";
		}
	}

	static final String DFA57_eotS =
		"\145\uffff";
	static final String DFA57_eofS =
		"\1\2\144\uffff";
	static final String DFA57_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA57_maxS =
		"\1\u00c9\1\0\143\uffff";
	static final String DFA57_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA57_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA57_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\2\2\1\1\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2"+
			"\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
	static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
	static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
	static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
	static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
	static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
	static final short[][] DFA57_transition;

	static {
		int numStates = DFA57_transitionS.length;
		DFA57_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
		}
	}

	protected class DFA57 extends DFA {

		public DFA57(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}
		@Override
		public String getDescription() {
			return "215:41: ( '[' expression ']' )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA57_1 = input.LA(1);
						 
						int index57_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred81_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index57_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 57, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA65_eotS =
		"\162\uffff";
	static final String DFA65_eofS =
		"\1\64\161\uffff";
	static final String DFA65_minS =
		"\1\4\157\0\2\uffff";
	static final String DFA65_maxS =
		"\1\u00c9\157\0\2\uffff";
	static final String DFA65_acceptS =
		"\160\uffff\1\1\1\2";
	static final String DFA65_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
		"\1\151\1\152\1\153\1\154\1\155\1\156\2\uffff}>";
	static final String[] DFA65_transitionS = {
			"\1\63\1\uffff\1\144\1\47\1\16\1\3\1\47\1\111\1\127\2\uffff\1\144\1\27"+
			"\1\74\1\uffff\1\110\1\144\1\103\1\56\1\6\1\145\1\65\1\uffff\1\100\1\75"+
			"\2\144\1\42\1\uffff\1\121\1\57\1\75\1\120\1\7\1\47\1\155\1\45\1\52\1"+
			"\157\5\uffff\1\147\1\102\1\50\1\152\1\144\1\60\1\132\1\107\1\140\1\40"+
			"\1\134\1\5\1\144\1\150\1\153\2\uffff\1\17\1\66\1\uffff\1\51\4\uffff\1"+
			"\143\1\122\1\66\1\135\1\44\1\142\1\126\1\7\1\66\1\106\1\1\2\uffff\1\66"+
			"\1\62\1\124\1\26\1\46\1\144\1\33\1\47\1\76\1\136\1\41\1\123\1\31\1\66"+
			"\1\10\1\53\1\154\1\67\1\47\1\144\1\125\2\uffff\1\2\1\130\1\61\1\32\1"+
			"\13\1\12\1\71\1\20\1\uffff\1\77\1\70\1\72\1\73\1\43\1\uffff\1\105\2\uffff"+
			"\1\112\1\115\1\11\1\21\1\25\1\uffff\1\144\2\uffff\1\113\1\100\1\104\1"+
			"\131\1\uffff\1\54\1\4\4\47\1\uffff\1\133\1\116\1\55\1\14\1\146\1\101"+
			"\1\156\1\37\1\uffff\1\15\2\uffff\1\36\14\uffff\1\34\1\23\1\34\3\uffff"+
			"\1\35\6\uffff\1\141\1\151\2\uffff\1\101\1\137\1\22\3\uffff\1\114\1\117"+
			"\1\uffff\1\47\1\24\1\30",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
	static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
	static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
	static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
	static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
	static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
	static final short[][] DFA65_transition;

	static {
		int numStates = DFA65_transitionS.length;
		DFA65_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
		}
	}

	protected class DFA65 extends DFA {

		public DFA65(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 65;
			this.eot = DFA65_eot;
			this.eof = DFA65_eof;
			this.min = DFA65_min;
			this.max = DFA65_max;
			this.accept = DFA65_accept;
			this.special = DFA65_special;
			this.transition = DFA65_transition;
		}
		@Override
		public String getDescription() {
			return "230:73: ( customAttribute )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA65_1 = input.LA(1);
						 
						int index65_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA65_2 = input.LA(1);
						 
						int index65_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA65_3 = input.LA(1);
						 
						int index65_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA65_4 = input.LA(1);
						 
						int index65_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA65_5 = input.LA(1);
						 
						int index65_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA65_6 = input.LA(1);
						 
						int index65_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA65_7 = input.LA(1);
						 
						int index65_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA65_8 = input.LA(1);
						 
						int index65_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA65_9 = input.LA(1);
						 
						int index65_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA65_10 = input.LA(1);
						 
						int index65_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA65_11 = input.LA(1);
						 
						int index65_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA65_12 = input.LA(1);
						 
						int index65_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA65_13 = input.LA(1);
						 
						int index65_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA65_14 = input.LA(1);
						 
						int index65_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA65_15 = input.LA(1);
						 
						int index65_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA65_16 = input.LA(1);
						 
						int index65_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA65_17 = input.LA(1);
						 
						int index65_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA65_18 = input.LA(1);
						 
						int index65_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA65_19 = input.LA(1);
						 
						int index65_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA65_20 = input.LA(1);
						 
						int index65_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA65_21 = input.LA(1);
						 
						int index65_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA65_22 = input.LA(1);
						 
						int index65_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA65_23 = input.LA(1);
						 
						int index65_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA65_24 = input.LA(1);
						 
						int index65_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA65_25 = input.LA(1);
						 
						int index65_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA65_26 = input.LA(1);
						 
						int index65_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA65_27 = input.LA(1);
						 
						int index65_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA65_28 = input.LA(1);
						 
						int index65_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA65_29 = input.LA(1);
						 
						int index65_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA65_30 = input.LA(1);
						 
						int index65_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA65_31 = input.LA(1);
						 
						int index65_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA65_32 = input.LA(1);
						 
						int index65_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA65_33 = input.LA(1);
						 
						int index65_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA65_34 = input.LA(1);
						 
						int index65_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA65_35 = input.LA(1);
						 
						int index65_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA65_36 = input.LA(1);
						 
						int index65_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA65_37 = input.LA(1);
						 
						int index65_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA65_38 = input.LA(1);
						 
						int index65_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA65_39 = input.LA(1);
						 
						int index65_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA65_40 = input.LA(1);
						 
						int index65_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA65_41 = input.LA(1);
						 
						int index65_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA65_42 = input.LA(1);
						 
						int index65_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA65_43 = input.LA(1);
						 
						int index65_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA65_44 = input.LA(1);
						 
						int index65_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA65_45 = input.LA(1);
						 
						int index65_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA65_46 = input.LA(1);
						 
						int index65_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA65_47 = input.LA(1);
						 
						int index65_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA65_48 = input.LA(1);
						 
						int index65_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA65_49 = input.LA(1);
						 
						int index65_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA65_50 = input.LA(1);
						 
						int index65_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA65_51 = input.LA(1);
						 
						int index65_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA65_52 = input.LA(1);
						 
						int index65_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA65_53 = input.LA(1);
						 
						int index65_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA65_54 = input.LA(1);
						 
						int index65_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA65_55 = input.LA(1);
						 
						int index65_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA65_56 = input.LA(1);
						 
						int index65_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA65_57 = input.LA(1);
						 
						int index65_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA65_58 = input.LA(1);
						 
						int index65_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA65_59 = input.LA(1);
						 
						int index65_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA65_60 = input.LA(1);
						 
						int index65_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA65_61 = input.LA(1);
						 
						int index65_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA65_62 = input.LA(1);
						 
						int index65_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA65_63 = input.LA(1);
						 
						int index65_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA65_64 = input.LA(1);
						 
						int index65_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA65_65 = input.LA(1);
						 
						int index65_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA65_66 = input.LA(1);
						 
						int index65_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA65_67 = input.LA(1);
						 
						int index65_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA65_68 = input.LA(1);
						 
						int index65_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA65_69 = input.LA(1);
						 
						int index65_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA65_70 = input.LA(1);
						 
						int index65_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA65_71 = input.LA(1);
						 
						int index65_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA65_72 = input.LA(1);
						 
						int index65_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA65_73 = input.LA(1);
						 
						int index65_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA65_74 = input.LA(1);
						 
						int index65_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA65_75 = input.LA(1);
						 
						int index65_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA65_76 = input.LA(1);
						 
						int index65_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA65_77 = input.LA(1);
						 
						int index65_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA65_78 = input.LA(1);
						 
						int index65_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA65_79 = input.LA(1);
						 
						int index65_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA65_80 = input.LA(1);
						 
						int index65_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA65_81 = input.LA(1);
						 
						int index65_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA65_82 = input.LA(1);
						 
						int index65_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA65_83 = input.LA(1);
						 
						int index65_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA65_84 = input.LA(1);
						 
						int index65_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA65_85 = input.LA(1);
						 
						int index65_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA65_86 = input.LA(1);
						 
						int index65_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA65_87 = input.LA(1);
						 
						int index65_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA65_88 = input.LA(1);
						 
						int index65_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA65_89 = input.LA(1);
						 
						int index65_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA65_90 = input.LA(1);
						 
						int index65_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA65_91 = input.LA(1);
						 
						int index65_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA65_92 = input.LA(1);
						 
						int index65_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA65_93 = input.LA(1);
						 
						int index65_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA65_94 = input.LA(1);
						 
						int index65_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA65_95 = input.LA(1);
						 
						int index65_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA65_96 = input.LA(1);
						 
						int index65_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA65_97 = input.LA(1);
						 
						int index65_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA65_98 = input.LA(1);
						 
						int index65_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_98);
						if ( s>=0 ) return s;
						break;

					case 98 : 
						int LA65_99 = input.LA(1);
						 
						int index65_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_99);
						if ( s>=0 ) return s;
						break;

					case 99 : 
						int LA65_100 = input.LA(1);
						 
						int index65_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_100);
						if ( s>=0 ) return s;
						break;

					case 100 : 
						int LA65_101 = input.LA(1);
						 
						int index65_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_101);
						if ( s>=0 ) return s;
						break;

					case 101 : 
						int LA65_102 = input.LA(1);
						 
						int index65_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_102);
						if ( s>=0 ) return s;
						break;

					case 102 : 
						int LA65_103 = input.LA(1);
						 
						int index65_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_103);
						if ( s>=0 ) return s;
						break;

					case 103 : 
						int LA65_104 = input.LA(1);
						 
						int index65_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_104);
						if ( s>=0 ) return s;
						break;

					case 104 : 
						int LA65_105 = input.LA(1);
						 
						int index65_105 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_105);
						if ( s>=0 ) return s;
						break;

					case 105 : 
						int LA65_106 = input.LA(1);
						 
						int index65_106 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_106);
						if ( s>=0 ) return s;
						break;

					case 106 : 
						int LA65_107 = input.LA(1);
						 
						int index65_107 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_107);
						if ( s>=0 ) return s;
						break;

					case 107 : 
						int LA65_108 = input.LA(1);
						 
						int index65_108 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_108);
						if ( s>=0 ) return s;
						break;

					case 108 : 
						int LA65_109 = input.LA(1);
						 
						int index65_109 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_109);
						if ( s>=0 ) return s;
						break;

					case 109 : 
						int LA65_110 = input.LA(1);
						 
						int index65_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_110);
						if ( s>=0 ) return s;
						break;

					case 110 : 
						int LA65_111 = input.LA(1);
						 
						int index65_111 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred90_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index65_111);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 65, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA66_eotS =
		"\145\uffff";
	static final String DFA66_eofS =
		"\1\2\144\uffff";
	static final String DFA66_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA66_maxS =
		"\1\u00c9\1\0\143\uffff";
	static final String DFA66_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA66_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA66_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
	static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
	static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
	static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
	static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
	static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
	static final short[][] DFA66_transition;

	static {
		int numStates = DFA66_transitionS.length;
		DFA66_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
		}
	}

	protected class DFA66 extends DFA {

		public DFA66(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}
		@Override
		public String getDescription() {
			return "231:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA66_1 = input.LA(1);
						 
						int index66_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index66_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 66, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA68_eotS =
		"\146\uffff";
	static final String DFA68_eofS =
		"\1\5\145\uffff";
	static final String DFA68_minS =
		"\1\4\4\0\40\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff\3\0"+
		"\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\6\uffff\1\0\15\uffff";
	static final String DFA68_maxS =
		"\1\u00c9\4\0\40\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff"+
		"\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\6\uffff\1\0\15\uffff";
	static final String DFA68_acceptS =
		"\5\uffff\1\2\136\uffff\1\1\1\3";
	static final String DFA68_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\40\uffff\1\4\3\uffff\1\5\7\uffff\1\6\14\uffff"+
		"\1\7\1\uffff\1\10\1\11\1\12\2\uffff\1\13\1\14\1\uffff\1\15\5\uffff\1\16"+
		"\2\uffff\1\17\6\uffff\1\20\15\uffff}>";
	static final String[] DFA68_transitionS = {
			"\1\5\1\uffff\1\130\1\5\1\130\1\uffff\3\5\2\uffff\1\130\2\5\1\uffff\1"+
			"\5\1\130\5\5\1\uffff\2\5\2\130\1\5\1\uffff\1\105\3\5\1\uffff\5\5\5\uffff"+
			"\4\5\1\130\1\5\1\116\4\5\1\uffff\1\130\2\5\2\uffff\2\5\1\uffff\1\5\4"+
			"\uffff\1\5\1\106\1\5\1\121\3\5\1\uffff\3\5\2\uffff\2\5\1\110\1\4\1\5"+
			"\1\130\2\5\1\61\5\5\1\130\2\5\1\51\1\5\1\130\1\5\3\uffff\3\5\1\130\3"+
			"\5\1\uffff\5\5\1\uffff\1\5\2\uffff\1\76\1\101\1\uffff\1\130\1\3\1\uffff"+
			"\1\130\2\uffff\4\5\1\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\102\1\45\1\130"+
			"\4\5\1\uffff\1\5\2\uffff\1\5\14\uffff\1\5\1\1\1\5\3\uffff\1\5\6\uffff"+
			"\2\5\2\uffff\2\5\1\130\3\uffff\1\100\1\5\1\uffff\1\5\1\2\1\5",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
	static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
	static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
	static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
	static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
	static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
	static final short[][] DFA68_transition;

	static {
		int numStates = DFA68_transitionS.length;
		DFA68_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
		}
	}

	protected class DFA68 extends DFA {

		public DFA68(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 68;
			this.eot = DFA68_eot;
			this.eof = DFA68_eof;
			this.min = DFA68_min;
			this.max = DFA68_max;
			this.accept = DFA68_accept;
			this.special = DFA68_special;
			this.transition = DFA68_transition;
		}
		@Override
		public String getDescription() {
			return "235:1: simpleType : ( ident | subRangeType | enumType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA68_1 = input.LA(1);
						 
						int index68_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA68_2 = input.LA(1);
						 
						int index68_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA68_3 = input.LA(1);
						 
						int index68_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA68_4 = input.LA(1);
						 
						int index68_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 5;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index68_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA68_37 = input.LA(1);
						 
						int index68_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA68_41 = input.LA(1);
						 
						int index68_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_41);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA68_49 = input.LA(1);
						 
						int index68_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_49);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA68_62 = input.LA(1);
						 
						int index68_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_62);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA68_64 = input.LA(1);
						 
						int index68_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_64);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA68_65 = input.LA(1);
						 
						int index68_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_65);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA68_66 = input.LA(1);
						 
						int index68_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_66);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA68_69 = input.LA(1);
						 
						int index68_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_69);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA68_70 = input.LA(1);
						 
						int index68_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_70);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA68_72 = input.LA(1);
						 
						int index68_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_72);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA68_78 = input.LA(1);
						 
						int index68_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_78);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA68_81 = input.LA(1);
						 
						int index68_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_81);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA68_88 = input.LA(1);
						 
						int index68_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (synpred94_Delphi()) ) {s = 5;}
						 
						input.seek(index68_88);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 68, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA74_eotS =
		"\22\uffff";
	static final String DFA74_eofS =
		"\22\uffff";
	static final String DFA74_minS =
		"\1\132\1\6\1\30\1\u00ae\1\30\1\6\1\0\2\uffff\1\30\1\0\1\31\1\u00ae\1\31"+
		"\1\uffff\2\0\1\31";
	static final String DFA74_maxS =
		"\1\132\1\u00c8\1\u008d\1\u00ae\1\u008d\1\u00c8\1\0\2\uffff\1\u008d\1\0"+
		"\1\132\1\u00ae\1\132\1\uffff\2\0\1\132";
	static final String DFA74_acceptS =
		"\7\uffff\1\2\1\3\5\uffff\1\1\3\uffff";
	static final String DFA74_specialS =
		"\6\uffff\1\1\3\uffff\1\2\4\uffff\1\3\1\0\1\uffff}>";
	static final String[] DFA74_transitionS = {
			"\1\1",
			"\1\4\1\uffff\1\4\6\uffff\1\4\4\uffff\1\4\10\uffff\2\4\2\uffff\1\4\22"+
			"\uffff\1\4\1\uffff\1\4\5\uffff\1\4\15\uffff\1\4\1\uffff\1\4\13\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff\1\4\7\uffff"+
			"\1\4\15\uffff\2\4\1\uffff\2\4\1\uffff\1\4\17\uffff\3\4\26\uffff\1\2\21"+
			"\uffff\1\4\3\uffff\1\4\3\uffff\1\3",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\6\25\uffff\1\7\62\uffff\1\10",
			"\1\11",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\12\25\uffff\1\7\62\uffff\1\10",
			"\1\15\1\uffff\1\15\6\uffff\1\15\4\uffff\1\15\10\uffff\2\15\2\uffff\1"+
			"\15\22\uffff\1\15\1\uffff\1\15\5\uffff\1\15\15\uffff\1\15\1\uffff\1\15"+
			"\13\uffff\1\15\2\uffff\1\15\2\uffff\1\15\5\uffff\1\15\2\uffff\1\15\1"+
			"\uffff\1\15\7\uffff\1\15\15\uffff\2\15\1\uffff\2\15\1\uffff\1\15\17\uffff"+
			"\3\15\26\uffff\1\13\21\uffff\1\15\3\uffff\1\15\3\uffff\1\14",
			"\1\uffff",
			"",
			"",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\17\25\uffff\1\7\62\uffff\1\10",
			"\1\uffff",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7",
			"\1\21",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7"
	};

	static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
	static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
	static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
	static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
	static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
	static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
	static final short[][] DFA74_transition;

	static {
		int numStates = DFA74_transitionS.length;
		DFA74_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
		}
	}

	protected class DFA74 extends DFA {

		public DFA74(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 74;
			this.eot = DFA74_eot;
			this.eof = DFA74_eof;
			this.min = DFA74_min;
			this.max = DFA74_max;
			this.accept = DFA74_accept;
			this.special = DFA74_special;
			this.transition = DFA74_transition;
		}
		@Override
		public String getDescription() {
			return "250:1: genericDefinition : ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA74_16 = input.LA(1);
						 
						int index74_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						 
						input.seek(index74_16);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA74_6 = input.LA(1);
						 
						int index74_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_6);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA74_10 = input.LA(1);
						 
						int index74_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_10);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA74_15 = input.LA(1);
						 
						int index74_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_15);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 74, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA88_eotS =
		"\u00b1\uffff";
	static final String DFA88_eofS =
		"\1\2\u00b0\uffff";
	static final String DFA88_minS =
		"\1\4\1\6\1\uffff\1\7\1\u00ae\1\7\3\6\1\0\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae"+
		"\2\7\1\u00ae\1\7\1\uffff\2\0\1\7\1\0\1\6\1\7\3\6\1\7\2\6\1\0\1\7\2\0\1"+
		"\7\1\u00ae\1\7\1\0\1\7\1\u00ae\1\7\1\30\1\u00ae\1\30\1\7\1\u00ae\2\7\1"+
		"\u00ae\2\7\1\u00ae\1\7\1\0\3\6\1\7\1\6\2\7\1\6\1\7\1\30\2\6\1\7\1\0\1"+
		"\7\1\0\1\6\1\7\3\6\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0"+
		"\1\31\1\u00ae\1\31\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae\1\7\1\0\1\7\1\u00ae"+
		"\1\7\1\30\1\u00ae\1\30\1\7\1\u00ae\1\7\1\6\1\7\1\6\4\7\1\31\1\6\1\7\3"+
		"\6\1\7\1\6\2\7\1\6\1\7\1\30\2\6\1\7\1\0\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae"+
		"\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0\1\31\1\u00ae\1\31\1\7\1\u00ae\1\7\1\0"+
		"\1\6\1\7\1\6\1\7\1\6\4\7\1\31\1\6\1\7\1\0\1\7\1\u00ae\1\7\1\0\1\6\1\7";
	static final String DFA88_maxS =
		"\2\u00c9\1\uffff\1\u00c7\1\u00ae\1\u00c7\1\u00c8\2\u00c9\1\0\1\u00c7\1"+
		"\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1\uffff\2\0"+
		"\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c8\1\u00c9\1\u00c7\1\u00c8\1\u00c9\1"+
		"\0\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\1\u008d"+
		"\1\u00ae\1\u008d\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c9\1\u00c8\1\u00c9\1\u00c7\1\u00c9\2\u00c7\1\u00c8\1\u00c7\1"+
		"\u008d\2\u00c9\1\u00c7\1\0\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c8\1\u00c9"+
		"\1\u00c7\1\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1"+
		"\0\1\132\1\u00ae\1\132\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c7\1\u00ae\1\u00c7\1\u008d\1\u00ae\1\u008d\1\u00c7\1\u00ae\1"+
		"\u00c7\1\u00c9\1\u00c7\1\u00c9\4\u00c7\1\132\1\u00c9\1\u00c7\1\u00c9\1"+
		"\u00c8\1\u00c9\1\u00c7\1\u00c9\2\u00c7\1\u00c8\1\u00c7\1\u008d\2\u00c9"+
		"\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae"+
		"\2\u00c7\1\u00ae\1\u00c7\1\0\1\132\1\u00ae\1\132\1\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c7\1\u00c9\4\u00c7\1\132\1\u00c9\1\u00c7"+
		"\1\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7";
	static final String DFA88_acceptS =
		"\2\uffff\1\2\22\uffff\1\1\u009b\uffff";
	static final String DFA88_specialS =
		"\11\uffff\1\16\1\uffff\1\20\12\uffff\1\21\1\22\1\uffff\1\17\10\uffff\1"+
		"\0\1\uffff\1\1\1\23\3\uffff\1\24\17\uffff\1\4\15\uffff\1\5\1\uffff\1\7"+
		"\6\uffff\1\26\11\uffff\1\25\6\uffff\1\10\1\11\3\uffff\1\13\40\uffff\1"+
		"\27\3\uffff\1\15\1\12\11\uffff\1\6\6\uffff\1\14\14\uffff\1\2\3\uffff\1"+
		"\3\2\uffff}>";
	static final String[] DFA88_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\5\1\2\1\5\1\uffff\1\2\4\uffff\1\5\1\2\3\uffff\1\5\3\uffff\2\2\3\uffff"+
			"\2\5\1\2\1\uffff\1\5\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\5"+
			"\1\uffff\1\5\2\uffff\1\2\2\uffff\1\5\4\uffff\2\2\1\uffff\1\2\5\uffff"+
			"\1\5\1\2\1\5\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\5\2\2"+
			"\1\5\2\2\1\5\1\uffff\1\2\1\uffff\2\2\1\5\2\uffff\1\5\1\2\1\5\6\uffff"+
			"\1\2\1\5\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\5\1\uffff\2\5\1\uffff"+
			"\1\5\4\uffff\1\2\4\uffff\4\2\2\uffff\3\5\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\5\3\uffff\1\5\2\uffff\1\2\1\4\1\2",
			"",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\11\4\uffff\4\2\64\uffff\1\2",
			"\1\12",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\13\4\uffff\4\2\64\uffff\1\2",
			"\1\16\1\uffff\1\16\6\uffff\1\16\4\uffff\1\16\10\uffff\2\16\2\uffff\1"+
			"\16\22\uffff\1\16\1\uffff\1\16\5\uffff\1\16\15\uffff\1\16\1\uffff\1\16"+
			"\13\uffff\1\16\2\uffff\1\16\2\uffff\1\16\5\uffff\1\16\2\uffff\1\16\1"+
			"\uffff\1\16\7\uffff\1\16\15\uffff\2\16\1\uffff\2\16\1\uffff\1\16\17\uffff"+
			"\3\16\26\uffff\1\14\21\uffff\1\16\3\uffff\1\16\3\uffff\1\15",
			"\1\21\1\2\1\21\1\uffff\1\2\4\uffff\1\21\1\2\3\uffff\1\21\3\uffff\2\2"+
			"\3\uffff\2\21\1\2\1\uffff\1\21\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\21\1\uffff\1\21\2\uffff\1\2\2\uffff\1\21\15\uffff\1\21\1\uffff"+
			"\1\21\1\2\5\uffff\1\2\4\uffff\1\21\2\2\1\21\2\2\1\21\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\21\2\uffff\1\21\1\2\1\21\6\uffff\1\2\1\21\1\2\7\uffff"+
			"\1\2\4\uffff\2\21\1\uffff\2\21\1\uffff\1\21\4\uffff\1\2\4\uffff\4\2\2"+
			"\uffff\3\21\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\17\1\2\3\uffff\1\2"+
			"\14\uffff\1\21\3\uffff\1\21\2\uffff\1\2\1\20\1\2",
			"\1\24\1\2\1\24\1\uffff\1\2\4\uffff\1\24\1\2\3\uffff\1\24\3\uffff\2\2"+
			"\3\uffff\2\24\1\2\1\uffff\1\24\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\24\1\uffff\1\24\2\uffff\1\2\2\uffff\1\24\4\uffff\2\2\1\uffff"+
			"\1\2\5\uffff\1\24\1\2\1\24\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1"+
			"\uffff\1\24\2\2\1\24\2\2\1\24\1\uffff\1\2\1\uffff\2\2\1\24\2\uffff\1"+
			"\24\1\2\1\24\6\uffff\1\2\1\24\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\24"+
			"\1\uffff\2\24\1\uffff\1\24\4\uffff\1\2\4\uffff\4\2\2\uffff\3\24\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\22\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff"+
			"\1\24\2\uffff\1\2\1\23\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\27\4\uffff\4\2\64\uffff\1\2",
			"\1\30",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\31\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\37",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\42\4\uffff\4\2\64\uffff\1\2",
			"\1\43",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\44\4\uffff\4\2\64\uffff\1\2",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\45\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\50\1\2\1\50\1\uffff\1\2\4\uffff\1\50\1\2\3\uffff\1\50\3\uffff\2\2"+
			"\3\uffff\2\50\1\2\1\uffff\1\50\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\50\1\uffff\1\50\2\uffff\1\2\2\uffff\1\50\4\uffff\2\2\1\uffff"+
			"\1\2\5\uffff\1\50\1\2\1\50\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1"+
			"\uffff\1\50\2\2\1\50\2\2\1\50\1\uffff\1\2\1\uffff\2\2\1\50\2\uffff\1"+
			"\50\1\2\1\50\6\uffff\1\2\1\50\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\50"+
			"\1\uffff\2\50\1\uffff\1\50\4\uffff\1\2\4\uffff\4\2\2\uffff\3\50\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\46\1\2\3\uffff\1\2\14\uffff\1\50\3\uffff"+
			"\1\50\2\uffff\1\2\1\47\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\51\4\uffff\4\2\64\uffff\1\2",
			"\1\54\1\uffff\1\54\6\uffff\1\54\4\uffff\1\54\10\uffff\2\54\2\uffff\1"+
			"\54\22\uffff\1\54\1\uffff\1\54\5\uffff\1\54\15\uffff\1\54\1\uffff\1\54"+
			"\13\uffff\1\54\2\uffff\1\54\2\uffff\1\54\5\uffff\1\54\2\uffff\1\54\1"+
			"\uffff\1\54\7\uffff\1\54\15\uffff\2\54\1\uffff\2\54\1\uffff\1\54\17\uffff"+
			"\3\54\26\uffff\1\52\21\uffff\1\54\3\uffff\1\54\3\uffff\1\53",
			"\1\57\1\uffff\1\57\6\uffff\1\57\4\uffff\1\57\10\uffff\2\57\2\uffff\1"+
			"\57\22\uffff\1\57\1\uffff\1\57\5\uffff\1\57\15\uffff\1\57\1\uffff\1\57"+
			"\13\uffff\1\57\2\uffff\1\57\2\uffff\1\57\5\uffff\1\57\2\uffff\1\57\1"+
			"\uffff\1\57\7\uffff\1\57\15\uffff\2\57\1\uffff\2\57\1\uffff\1\57\17\uffff"+
			"\3\57\26\uffff\1\55\21\uffff\1\57\3\uffff\1\57\3\uffff\1\56",
			"\1\62\1\2\1\62\1\uffff\1\2\4\uffff\1\62\1\2\3\uffff\1\62\2\uffff\1\25"+
			"\2\2\2\uffff\1\25\2\62\1\2\1\uffff\1\62\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\62\1\uffff\1\62\2\uffff\1\2\2\uffff\1\62\4\uffff\2\2\1"+
			"\uffff\1\2\5\uffff\1\62\1\2\1\62\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\1\2\1\uffff\1\62\2\2\1\62\2\2\1\62\1\uffff\1\2\1\uffff\2\2\1\62\2\uffff"+
			"\1\62\1\2\1\62\6\uffff\1\2\1\62\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2"+
			"\62\1\25\2\62\1\uffff\1\62\4\uffff\1\2\4\uffff\4\2\2\uffff\3\62\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\60\1\2\3\uffff\1\2\14\uffff\1\62\3\uffff"+
			"\1\62\2\uffff\1\2\1\61\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\65\1\uffff\1\65\6\uffff\1\65\4\uffff\1\65\10\uffff\2\65\2\uffff\1"+
			"\65\22\uffff\1\65\1\uffff\1\65\5\uffff\1\65\15\uffff\1\65\1\uffff\1\65"+
			"\13\uffff\1\65\2\uffff\1\65\2\uffff\1\65\5\uffff\1\65\2\uffff\1\65\1"+
			"\uffff\1\65\7\uffff\1\65\15\uffff\2\65\1\uffff\2\65\1\uffff\1\65\17\uffff"+
			"\3\65\26\uffff\1\63\21\uffff\1\65\3\uffff\1\65\3\uffff\1\64",
			"\1\70\1\2\1\70\1\uffff\1\2\4\uffff\1\70\1\2\3\uffff\1\70\3\uffff\2\2"+
			"\3\uffff\2\70\1\2\1\uffff\1\70\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\70\1\uffff\1\70\2\uffff\1\2\2\uffff\1\70\15\uffff\1\70\1\uffff"+
			"\1\70\1\2\5\uffff\1\2\4\uffff\1\70\2\2\1\70\2\2\1\70\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\70\2\uffff\1\70\1\2\1\70\6\uffff\1\2\1\70\1\2\7\uffff"+
			"\1\2\4\uffff\2\70\1\uffff\2\70\1\uffff\1\70\4\uffff\1\2\4\uffff\4\2\2"+
			"\uffff\3\70\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\66\1\2\3\uffff\1\2"+
			"\14\uffff\1\70\3\uffff\1\70\2\uffff\1\2\1\67\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\71\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\75",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\100",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\103",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\106",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\107\4\uffff\4\2\64\uffff\1\2",
			"\1\110",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\111\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\117",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\120\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3"+
			"\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff"+
			"\1\123\22\uffff\1\123\1\uffff\1\123\5\uffff\1\123\15\uffff\1\123\1\uffff"+
			"\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff\1\123\2\uffff"+
			"\1\123\1\uffff\1\123\7\uffff\1\123\15\uffff\2\123\1\uffff\2\123\1\uffff"+
			"\1\123\17\uffff\3\123\26\uffff\1\121\21\uffff\1\123\3\uffff\1\123\3\uffff"+
			"\1\122",
			"\1\126\1\2\1\126\1\uffff\1\2\4\uffff\1\126\1\2\3\uffff\1\126\3\uffff"+
			"\2\2\3\uffff\2\126\1\2\1\uffff\1\126\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\126\1\uffff\1\126\2\uffff\1\2\2\uffff\1\126\15\uffff\1"+
			"\126\1\uffff\1\126\1\2\5\uffff\1\2\4\uffff\1\126\2\2\1\126\2\2\1\126"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\1\126\2\uffff\1\126\1\2\1\126\6\uffff"+
			"\1\2\1\126\1\2\7\uffff\1\2\4\uffff\2\126\1\uffff\2\126\1\uffff\1\126"+
			"\4\uffff\1\2\4\uffff\4\2\2\uffff\3\126\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\1\2\1\124\1\2\3\uffff\1\2\14\uffff\1\126\3\uffff\1\126\2\uffff\1\2\1"+
			"\125\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\131\1\2\1\131\1\uffff\1\2\4\uffff\1\131\1\2\3\uffff\1\131\3\uffff"+
			"\2\2\3\uffff\2\131\1\2\1\uffff\1\131\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\131\1\uffff\1\131\2\uffff\1\2\2\uffff\1\131\4\uffff\2"+
			"\2\1\uffff\1\2\5\uffff\1\131\1\2\1\131\1\2\3\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\1\2\1\uffff\1\131\2\2\1\131\2\2\1\131\1\uffff\1\2\1\uffff\2\2"+
			"\1\131\2\uffff\1\131\1\2\1\131\6\uffff\1\2\1\131\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\4\uffff\2\131\1\uffff\2\131\1\uffff\1\131\4\uffff\1\2\4\uffff\4"+
			"\2\2\uffff\3\131\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\127\1\2\3\uffff"+
			"\1\2\14\uffff\1\131\3\uffff\1\131\2\uffff\1\2\1\130\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\132\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\135\1\uffff\1\135\6\uffff\1\135\4\uffff\1\135\10\uffff\2\135\2\uffff"+
			"\1\135\22\uffff\1\135\1\uffff\1\135\5\uffff\1\135\15\uffff\1\135\1\uffff"+
			"\1\135\13\uffff\1\135\2\uffff\1\135\2\uffff\1\135\5\uffff\1\135\2\uffff"+
			"\1\135\1\uffff\1\135\7\uffff\1\135\15\uffff\2\135\1\uffff\2\135\1\uffff"+
			"\1\135\17\uffff\3\135\26\uffff\1\133\21\uffff\1\135\3\uffff\1\135\3\uffff"+
			"\1\134",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2\12"+
			"\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\140\1\2\1\140\1\uffff\1\2\4\uffff\1\140\1\2\3\uffff\1\140\2\uffff"+
			"\1\25\2\2\2\uffff\1\25\2\140\1\2\1\uffff\1\140\4\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\1\uffff\1\140\1\uffff\1\140\2\uffff\1\2\2\uffff\1\140"+
			"\4\uffff\2\2\1\uffff\1\2\5\uffff\1\140\1\2\1\140\1\2\3\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\140\2\2\1\140\2\2\1\140\1\uffff\1\2\1\uffff"+
			"\2\2\1\140\2\uffff\1\140\1\2\1\140\6\uffff\1\2\1\140\1\2\1\uffff\1\2"+
			"\5\uffff\1\2\4\uffff\2\140\1\25\2\140\1\uffff\1\140\4\uffff\1\2\4\uffff"+
			"\4\2\2\uffff\3\140\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\136\1\2\3\uffff"+
			"\1\2\14\uffff\1\140\3\uffff\1\140\2\uffff\1\2\1\137\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\141\4\uffff\4\2\2"+
			"\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\142\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\145\1\2\1\145\1\uffff\1\2\4\uffff\1\145\1\2\3\uffff\1\145\3\uffff"+
			"\2\2\3\uffff\2\145\1\2\1\uffff\1\145\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\145\1\uffff\1\145\2\uffff\1\2\2\uffff\1\145\4\uffff\2"+
			"\2\1\uffff\1\2\5\uffff\1\145\1\2\1\145\1\2\3\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\1\2\1\uffff\1\145\2\2\1\145\2\2\1\145\1\uffff\1\2\1\uffff\2\2"+
			"\1\145\2\uffff\1\145\1\2\1\145\6\uffff\1\2\1\145\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\4\uffff\2\145\1\uffff\2\145\1\uffff\1\145\4\uffff\1\2\4\uffff\4"+
			"\2\2\uffff\3\145\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\143\1\2\3\uffff"+
			"\1\2\14\uffff\1\145\3\uffff\1\145\2\uffff\1\2\1\144\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\146\4\uffff\4\2\64\uffff\1\2",
			"\1\151\1\uffff\1\151\6\uffff\1\151\4\uffff\1\151\10\uffff\2\151\2\uffff"+
			"\1\151\22\uffff\1\151\1\uffff\1\151\5\uffff\1\151\15\uffff\1\151\1\uffff"+
			"\1\151\13\uffff\1\151\2\uffff\1\151\2\uffff\1\151\5\uffff\1\151\2\uffff"+
			"\1\151\1\uffff\1\151\7\uffff\1\151\15\uffff\2\151\1\uffff\2\151\1\uffff"+
			"\1\151\17\uffff\3\151\26\uffff\1\147\21\uffff\1\151\3\uffff\1\151\3\uffff"+
			"\1\150",
			"\1\154\1\uffff\1\154\6\uffff\1\154\4\uffff\1\154\10\uffff\2\154\2\uffff"+
			"\1\154\22\uffff\1\154\1\uffff\1\154\5\uffff\1\154\15\uffff\1\154\1\uffff"+
			"\1\154\13\uffff\1\154\2\uffff\1\154\2\uffff\1\154\5\uffff\1\154\2\uffff"+
			"\1\154\1\uffff\1\154\7\uffff\1\154\15\uffff\2\154\1\uffff\2\154\1\uffff"+
			"\1\154\17\uffff\3\154\26\uffff\1\152\21\uffff\1\154\3\uffff\1\154\3\uffff"+
			"\1\153",
			"\1\157\1\2\1\157\1\uffff\1\2\4\uffff\1\157\1\2\3\uffff\1\157\2\uffff"+
			"\1\25\2\2\2\uffff\1\25\2\157\1\2\1\uffff\1\157\4\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\1\uffff\1\157\1\uffff\1\157\2\uffff\1\2\2\uffff\1\157"+
			"\4\uffff\2\2\1\uffff\1\2\5\uffff\1\157\1\2\1\157\1\2\3\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\157\2\2\1\157\2\2\1\157\1\uffff\1\2\1\uffff"+
			"\2\2\1\157\2\uffff\1\157\1\2\1\157\6\uffff\1\2\1\157\1\2\1\uffff\1\2"+
			"\5\uffff\1\2\4\uffff\2\157\1\25\2\157\1\uffff\1\157\4\uffff\1\2\4\uffff"+
			"\4\2\2\uffff\3\157\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\155\1\2\3\uffff"+
			"\1\2\14\uffff\1\157\3\uffff\1\157\2\uffff\1\2\1\156\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\161",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\164",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\165",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\1\167",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\171",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\175",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0080",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\u0083",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0086",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u0087\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u008a\1\2\1\u008a\1\uffff\1\2\4\uffff\1\u008a\1\2\3\uffff\1\u008a"+
			"\3\uffff\2\2\3\uffff\2\u008a\1\2\1\uffff\1\u008a\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u008a\1\uffff\1\u008a\2\uffff\1\2\2\uffff"+
			"\1\u008a\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u008a\1\2\1\u008a\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u008a\2\2\1\u008a\2\2\1\u008a"+
			"\1\uffff\1\2\1\uffff\2\2\1\u008a\2\uffff\1\u008a\1\2\1\u008a\6\uffff"+
			"\1\2\1\u008a\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u008a\1\uffff\2\u008a"+
			"\1\uffff\1\u008a\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u008a\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u0088\1\2\3\uffff\1\2\14\uffff\1\u008a\3"+
			"\uffff\1\u008a\2\uffff\1\2\1\u0089\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1"+
			"\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2\12"+
			"\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u008b\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u008c\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\u008f\1\uffff\1\u008f\6\uffff\1\u008f\4\uffff\1\u008f\10\uffff\2"+
			"\u008f\2\uffff\1\u008f\22\uffff\1\u008f\1\uffff\1\u008f\5\uffff\1\u008f"+
			"\15\uffff\1\u008f\1\uffff\1\u008f\13\uffff\1\u008f\2\uffff\1\u008f\2"+
			"\uffff\1\u008f\5\uffff\1\u008f\2\uffff\1\u008f\1\uffff\1\u008f\7\uffff"+
			"\1\u008f\15\uffff\2\u008f\1\uffff\2\u008f\1\uffff\1\u008f\17\uffff\3"+
			"\u008f\26\uffff\1\u008d\21\uffff\1\u008f\3\uffff\1\u008f\3\uffff\1\u008e",
			"\1\u0092\1\2\1\u0092\1\uffff\1\2\4\uffff\1\u0092\1\2\3\uffff\1\u0092"+
			"\3\uffff\2\2\3\uffff\2\u0092\1\2\1\uffff\1\u0092\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u0092\1\uffff\1\u0092\2\uffff\1\2\2\uffff"+
			"\1\u0092\15\uffff\1\u0092\1\uffff\1\u0092\1\2\5\uffff\1\2\4\uffff\1\u0092"+
			"\2\2\1\u0092\2\2\1\u0092\1\uffff\1\2\1\uffff\1\2\1\uffff\1\u0092\2\uffff"+
			"\1\u0092\1\2\1\u0092\6\uffff\1\2\1\u0092\1\2\7\uffff\1\2\4\uffff\2\u0092"+
			"\1\uffff\2\u0092\1\uffff\1\u0092\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u0092"+
			"\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\u0090\1\2\3\uffff\1\2\14\uffff"+
			"\1\u0092\3\uffff\1\u0092\2\uffff\1\2\1\u0091\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u0095\1\2\1\u0095\1\uffff\1\2\4\uffff\1\u0095\1\2\3\uffff\1\u0095"+
			"\3\uffff\2\2\3\uffff\2\u0095\1\2\1\uffff\1\u0095\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u0095\1\uffff\1\u0095\2\uffff\1\2\2\uffff"+
			"\1\u0095\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u0095\1\2\1\u0095\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u0095\2\2\1\u0095\2\2\1\u0095"+
			"\1\uffff\1\2\1\uffff\2\2\1\u0095\2\uffff\1\u0095\1\2\1\u0095\6\uffff"+
			"\1\2\1\u0095\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u0095\1\uffff\2\u0095"+
			"\1\uffff\1\u0095\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u0095\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u0093\1\2\3\uffff\1\2\14\uffff\1\u0095\3"+
			"\uffff\1\u0095\2\uffff\1\2\1\u0094\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\u0096\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0099\1\uffff\1\u0099\6\uffff\1\u0099\4\uffff\1\u0099\10\uffff\2"+
			"\u0099\2\uffff\1\u0099\22\uffff\1\u0099\1\uffff\1\u0099\5\uffff\1\u0099"+
			"\15\uffff\1\u0099\1\uffff\1\u0099\13\uffff\1\u0099\2\uffff\1\u0099\2"+
			"\uffff\1\u0099\5\uffff\1\u0099\2\uffff\1\u0099\1\uffff\1\u0099\7\uffff"+
			"\1\u0099\15\uffff\2\u0099\1\uffff\2\u0099\1\uffff\1\u0099\17\uffff\3"+
			"\u0099\26\uffff\1\u0097\21\uffff\1\u0099\3\uffff\1\u0099\3\uffff\1\u0098",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\u009c\1\2\1\u009c\1\uffff\1\2\4\uffff\1\u009c\1\2\3\uffff\1\u009c"+
			"\2\uffff\1\25\2\2\2\uffff\1\25\2\u009c\1\2\1\uffff\1\u009c\4\uffff\1"+
			"\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\u009c\1\uffff\1\u009c\2\uffff\1"+
			"\2\2\uffff\1\u009c\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u009c\1\2\1\u009c"+
			"\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u009c\2\2\1\u009c"+
			"\2\2\1\u009c\1\uffff\1\2\1\uffff\2\2\1\u009c\2\uffff\1\u009c\1\2\1\u009c"+
			"\6\uffff\1\2\1\u009c\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u009c\1\25"+
			"\2\u009c\1\uffff\1\u009c\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u009c\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\u009a\1\2\3\uffff\1\2\14\uffff\1\u009c"+
			"\3\uffff\1\u009c\2\uffff\1\2\1\u009b\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u009d\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u009f",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00a1",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\u00a4",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00a5",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\uffff",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\1\u00a7",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u00a9",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\76\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\160\5\uffff\4\2\3"+
			"\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3"+
			"\2\2\uffff\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u00aa\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00ad\1\2\1\u00ad\1\uffff\1\2\4\uffff\1\u00ad\1\2\3\uffff\1\u00ad"+
			"\3\uffff\2\2\3\uffff\2\u00ad\1\2\1\uffff\1\u00ad\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u00ad\1\uffff\1\u00ad\2\uffff\1\2\2\uffff"+
			"\1\u00ad\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u00ad\1\2\1\u00ad\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u00ad\2\2\1\u00ad\2\2\1\u00ad"+
			"\1\uffff\1\2\1\uffff\2\2\1\u00ad\2\uffff\1\u00ad\1\2\1\u00ad\6\uffff"+
			"\1\2\1\u00ad\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u00ad\1\uffff\2\u00ad"+
			"\1\uffff\1\u00ad\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u00ad\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u00ab\1\2\3\uffff\1\2\14\uffff\1\u00ad\3"+
			"\uffff\1\u00ad\2\uffff\1\2\1\u00ac\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u00ae\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u00b0",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\176\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\u00a0\5\uffff\4\2"+
			"\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff"+
			"\3\2\2\uffff\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2"
	};

	static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
	static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
	static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
	static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
	static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
	static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
	static final short[][] DFA88_transition;

	static {
		int numStates = DFA88_transitionS.length;
		DFA88_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
		}
	}

	protected class DFA88 extends DFA {

		public DFA88(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}
		@Override
		public String getDescription() {
			return "283:40: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA88_34 = input.LA(1);
						 
						int index88_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_34);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA88_36 = input.LA(1);
						 
						int index88_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_36);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA88_170 = input.LA(1);
						 
						int index88_170 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_170);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA88_174 = input.LA(1);
						 
						int index88_174 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_174);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA88_57 = input.LA(1);
						 
						int index88_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_57);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA88_71 = input.LA(1);
						 
						int index88_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_71);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA88_150 = input.LA(1);
						 
						int index88_150 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_150);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA88_73 = input.LA(1);
						 
						int index88_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_73);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA88_97 = input.LA(1);
						 
						int index88_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_97);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA88_98 = input.LA(1);
						 
						int index88_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_98);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA88_140 = input.LA(1);
						 
						int index88_140 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_140);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA88_102 = input.LA(1);
						 
						int index88_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_102);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA88_157 = input.LA(1);
						 
						int index88_157 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_157);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA88_139 = input.LA(1);
						 
						int index88_139 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_139);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA88_9 = input.LA(1);
						 
						int index88_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_9);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA88_25 = input.LA(1);
						 
						int index88_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_25);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA88_11 = input.LA(1);
						 
						int index88_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_11);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA88_22 = input.LA(1);
						 
						int index88_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_22);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA88_23 = input.LA(1);
						 
						int index88_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA88_37 = input.LA(1);
						 
						int index88_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_37);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA88_41 = input.LA(1);
						 
						int index88_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_41);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA88_90 = input.LA(1);
						 
						int index88_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_90);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA88_80 = input.LA(1);
						 
						int index88_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_80);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA88_135 = input.LA(1);
						 
						int index88_135 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred123_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_135);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 88, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA102_eotS =
		"\u00b1\uffff";
	static final String DFA102_eofS =
		"\1\2\u00b0\uffff";
	static final String DFA102_minS =
		"\1\4\1\6\1\uffff\1\7\1\u00ae\1\7\3\6\1\0\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae"+
		"\2\7\1\u00ae\1\7\1\uffff\2\0\1\7\1\0\1\6\1\7\3\6\1\7\2\6\1\0\1\7\2\0\1"+
		"\7\1\u00ae\1\7\1\0\1\7\1\u00ae\1\7\1\30\1\u00ae\1\30\1\7\1\u00ae\2\7\1"+
		"\u00ae\2\7\1\u00ae\1\7\1\0\3\6\1\7\1\6\2\7\1\6\1\7\1\30\2\6\1\7\1\0\1"+
		"\7\1\0\1\6\1\7\3\6\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0"+
		"\1\31\1\u00ae\1\31\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae\1\7\1\0\1\7\1\u00ae"+
		"\1\7\1\30\1\u00ae\1\30\1\7\1\u00ae\1\7\1\6\1\7\1\6\4\7\1\31\1\6\1\7\3"+
		"\6\1\7\1\6\2\7\1\6\1\7\1\30\2\6\1\7\1\0\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae"+
		"\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0\1\31\1\u00ae\1\31\1\7\1\u00ae\1\7\1\0"+
		"\1\6\1\7\1\6\1\7\1\6\4\7\1\31\1\6\1\7\1\0\1\7\1\u00ae\1\7\1\0\1\6\1\7";
	static final String DFA102_maxS =
		"\2\u00c9\1\uffff\1\u00c7\1\u00ae\1\u00c7\1\u00c8\2\u00c9\1\0\1\u00c7\1"+
		"\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1\uffff\2\0"+
		"\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c8\1\u00c9\1\u00c7\1\u00c8\1\u00c9\1"+
		"\0\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\1\u008d"+
		"\1\u00ae\1\u008d\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c9\1\u00c8\1\u00c9\1\u00c7\1\u00c9\2\u00c7\1\u00c8\1\u00c7\1"+
		"\u008d\2\u00c9\1\u00c7\1\0\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c8\1\u00c9"+
		"\1\u00c7\1\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1"+
		"\0\1\132\1\u00ae\1\132\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c7\1\u00ae\1\u00c7\1\u008d\1\u00ae\1\u008d\1\u00c7\1\u00ae\1"+
		"\u00c7\1\u00c9\1\u00c7\1\u00c9\4\u00c7\1\132\1\u00c9\1\u00c7\1\u00c9\1"+
		"\u00c8\1\u00c9\1\u00c7\1\u00c9\2\u00c7\1\u00c8\1\u00c7\1\u008d\2\u00c9"+
		"\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae"+
		"\2\u00c7\1\u00ae\1\u00c7\1\0\1\132\1\u00ae\1\132\1\u00c7\1\u00ae\1\u00c7"+
		"\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c7\1\u00c9\4\u00c7\1\132\1\u00c9\1\u00c7"+
		"\1\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7";
	static final String DFA102_acceptS =
		"\2\uffff\1\2\22\uffff\1\1\u009b\uffff";
	static final String DFA102_specialS =
		"\11\uffff\1\2\1\uffff\1\4\12\uffff\1\1\1\5\1\uffff\1\0\10\uffff\1\13\1"+
		"\uffff\1\14\1\6\3\uffff\1\7\17\uffff\1\12\15\uffff\1\15\1\uffff\1\16\6"+
		"\uffff\1\11\11\uffff\1\10\6\uffff\1\21\1\22\3\uffff\1\24\40\uffff\1\3"+
		"\3\uffff\1\25\1\23\11\uffff\1\17\6\uffff\1\26\14\uffff\1\20\3\uffff\1"+
		"\27\2\uffff}>";
	static final String[] DFA102_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\5\1\2\1\5\1\uffff\1\2\4\uffff\1\5\1\2\3\uffff\1\5\3\uffff\2\2\3\uffff"+
			"\2\5\1\2\1\uffff\1\5\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\5"+
			"\1\uffff\1\5\2\uffff\1\2\2\uffff\1\5\4\uffff\2\2\1\uffff\1\2\5\uffff"+
			"\1\5\1\2\1\5\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\5\2\2"+
			"\1\5\2\2\1\5\1\uffff\1\2\1\uffff\2\2\1\5\2\uffff\1\5\1\2\1\5\6\uffff"+
			"\1\2\1\5\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\5\1\uffff\2\5\1\uffff"+
			"\1\5\4\uffff\1\2\4\uffff\4\2\2\uffff\3\5\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\5\3\uffff\1\5\2\uffff\1\2\1\4\1\2",
			"",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\11\4\uffff\4\2\64\uffff\1\2",
			"\1\12",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\13\4\uffff\4\2\64\uffff\1\2",
			"\1\16\1\uffff\1\16\6\uffff\1\16\4\uffff\1\16\10\uffff\2\16\2\uffff\1"+
			"\16\22\uffff\1\16\1\uffff\1\16\5\uffff\1\16\15\uffff\1\16\1\uffff\1\16"+
			"\13\uffff\1\16\2\uffff\1\16\2\uffff\1\16\5\uffff\1\16\2\uffff\1\16\1"+
			"\uffff\1\16\7\uffff\1\16\15\uffff\2\16\1\uffff\2\16\1\uffff\1\16\17\uffff"+
			"\3\16\26\uffff\1\14\21\uffff\1\16\3\uffff\1\16\3\uffff\1\15",
			"\1\21\1\2\1\21\1\uffff\1\2\4\uffff\1\21\1\2\3\uffff\1\21\3\uffff\2\2"+
			"\3\uffff\2\21\1\2\1\uffff\1\21\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\21\1\uffff\1\21\2\uffff\1\2\2\uffff\1\21\15\uffff\1\21\1\uffff"+
			"\1\21\1\2\5\uffff\1\2\4\uffff\1\21\2\2\1\21\2\2\1\21\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\21\2\uffff\1\21\1\2\1\21\6\uffff\1\2\1\21\1\2\7\uffff"+
			"\1\2\4\uffff\2\21\1\uffff\2\21\1\uffff\1\21\4\uffff\1\2\4\uffff\4\2\2"+
			"\uffff\3\21\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\17\1\2\3\uffff\1\2"+
			"\14\uffff\1\21\3\uffff\1\21\2\uffff\1\2\1\20\1\2",
			"\1\24\1\2\1\24\1\uffff\1\2\4\uffff\1\24\1\2\3\uffff\1\24\3\uffff\2\2"+
			"\3\uffff\2\24\1\2\1\uffff\1\24\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\24\1\uffff\1\24\2\uffff\1\2\2\uffff\1\24\4\uffff\2\2\1\uffff"+
			"\1\2\5\uffff\1\24\1\2\1\24\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1"+
			"\uffff\1\24\2\2\1\24\2\2\1\24\1\uffff\1\2\1\uffff\2\2\1\24\2\uffff\1"+
			"\24\1\2\1\24\6\uffff\1\2\1\24\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\24"+
			"\1\uffff\2\24\1\uffff\1\24\4\uffff\1\2\4\uffff\4\2\2\uffff\3\24\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\22\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff"+
			"\1\24\2\uffff\1\2\1\23\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\27\4\uffff\4\2\64\uffff\1\2",
			"\1\30",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\31\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\37",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\42\4\uffff\4\2\64\uffff\1\2",
			"\1\43",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\44\4\uffff\4\2\64\uffff\1\2",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\45\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\50\1\2\1\50\1\uffff\1\2\4\uffff\1\50\1\2\3\uffff\1\50\3\uffff\2\2"+
			"\3\uffff\2\50\1\2\1\uffff\1\50\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\50\1\uffff\1\50\2\uffff\1\2\2\uffff\1\50\4\uffff\2\2\1\uffff"+
			"\1\2\5\uffff\1\50\1\2\1\50\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1"+
			"\uffff\1\50\2\2\1\50\2\2\1\50\1\uffff\1\2\1\uffff\2\2\1\50\2\uffff\1"+
			"\50\1\2\1\50\6\uffff\1\2\1\50\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\50"+
			"\1\uffff\2\50\1\uffff\1\50\4\uffff\1\2\4\uffff\4\2\2\uffff\3\50\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\46\1\2\3\uffff\1\2\14\uffff\1\50\3\uffff"+
			"\1\50\2\uffff\1\2\1\47\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\51\4\uffff\4\2\64\uffff\1\2",
			"\1\54\1\uffff\1\54\6\uffff\1\54\4\uffff\1\54\10\uffff\2\54\2\uffff\1"+
			"\54\22\uffff\1\54\1\uffff\1\54\5\uffff\1\54\15\uffff\1\54\1\uffff\1\54"+
			"\13\uffff\1\54\2\uffff\1\54\2\uffff\1\54\5\uffff\1\54\2\uffff\1\54\1"+
			"\uffff\1\54\7\uffff\1\54\15\uffff\2\54\1\uffff\2\54\1\uffff\1\54\17\uffff"+
			"\3\54\26\uffff\1\52\21\uffff\1\54\3\uffff\1\54\3\uffff\1\53",
			"\1\57\1\uffff\1\57\6\uffff\1\57\4\uffff\1\57\10\uffff\2\57\2\uffff\1"+
			"\57\22\uffff\1\57\1\uffff\1\57\5\uffff\1\57\15\uffff\1\57\1\uffff\1\57"+
			"\13\uffff\1\57\2\uffff\1\57\2\uffff\1\57\5\uffff\1\57\2\uffff\1\57\1"+
			"\uffff\1\57\7\uffff\1\57\15\uffff\2\57\1\uffff\2\57\1\uffff\1\57\17\uffff"+
			"\3\57\26\uffff\1\55\21\uffff\1\57\3\uffff\1\57\3\uffff\1\56",
			"\1\62\1\2\1\62\1\uffff\1\2\4\uffff\1\62\1\2\3\uffff\1\62\2\uffff\1\25"+
			"\2\2\2\uffff\1\25\2\62\1\2\1\uffff\1\62\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\62\1\uffff\1\62\2\uffff\1\2\2\uffff\1\62\4\uffff\2\2\1"+
			"\uffff\1\2\5\uffff\1\62\1\2\1\62\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\1\2\1\uffff\1\62\2\2\1\62\2\2\1\62\1\uffff\1\2\1\uffff\2\2\1\62\2\uffff"+
			"\1\62\1\2\1\62\6\uffff\1\2\1\62\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2"+
			"\62\1\25\2\62\1\uffff\1\62\4\uffff\1\2\4\uffff\4\2\2\uffff\3\62\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\60\1\2\3\uffff\1\2\14\uffff\1\62\3\uffff"+
			"\1\62\2\uffff\1\2\1\61\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\36\1\32\14\uffff\1\2\1\uffff"+
			"\1\34\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\65\1\uffff\1\65\6\uffff\1\65\4\uffff\1\65\10\uffff\2\65\2\uffff\1"+
			"\65\22\uffff\1\65\1\uffff\1\65\5\uffff\1\65\15\uffff\1\65\1\uffff\1\65"+
			"\13\uffff\1\65\2\uffff\1\65\2\uffff\1\65\5\uffff\1\65\2\uffff\1\65\1"+
			"\uffff\1\65\7\uffff\1\65\15\uffff\2\65\1\uffff\2\65\1\uffff\1\65\17\uffff"+
			"\3\65\26\uffff\1\63\21\uffff\1\65\3\uffff\1\65\3\uffff\1\64",
			"\1\70\1\2\1\70\1\uffff\1\2\4\uffff\1\70\1\2\3\uffff\1\70\3\uffff\2\2"+
			"\3\uffff\2\70\1\2\1\uffff\1\70\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1"+
			"\uffff\1\70\1\uffff\1\70\2\uffff\1\2\2\uffff\1\70\15\uffff\1\70\1\uffff"+
			"\1\70\1\2\5\uffff\1\2\4\uffff\1\70\2\2\1\70\2\2\1\70\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\70\2\uffff\1\70\1\2\1\70\6\uffff\1\2\1\70\1\2\7\uffff"+
			"\1\2\4\uffff\2\70\1\uffff\2\70\1\uffff\1\70\4\uffff\1\2\4\uffff\4\2\2"+
			"\uffff\3\70\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\66\1\2\3\uffff\1\2"+
			"\14\uffff\1\70\3\uffff\1\70\2\uffff\1\2\1\67\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\71\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\75",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\100",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\103",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\106",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\107\4\uffff\4\2\64\uffff\1\2",
			"\1\110",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\111\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\117",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\120\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3"+
			"\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff"+
			"\1\123\22\uffff\1\123\1\uffff\1\123\5\uffff\1\123\15\uffff\1\123\1\uffff"+
			"\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff\1\123\2\uffff"+
			"\1\123\1\uffff\1\123\7\uffff\1\123\15\uffff\2\123\1\uffff\2\123\1\uffff"+
			"\1\123\17\uffff\3\123\26\uffff\1\121\21\uffff\1\123\3\uffff\1\123\3\uffff"+
			"\1\122",
			"\1\126\1\2\1\126\1\uffff\1\2\4\uffff\1\126\1\2\3\uffff\1\126\3\uffff"+
			"\2\2\3\uffff\2\126\1\2\1\uffff\1\126\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\126\1\uffff\1\126\2\uffff\1\2\2\uffff\1\126\15\uffff\1"+
			"\126\1\uffff\1\126\1\2\5\uffff\1\2\4\uffff\1\126\2\2\1\126\2\2\1\126"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\1\126\2\uffff\1\126\1\2\1\126\6\uffff"+
			"\1\2\1\126\1\2\7\uffff\1\2\4\uffff\2\126\1\uffff\2\126\1\uffff\1\126"+
			"\4\uffff\1\2\4\uffff\4\2\2\uffff\3\126\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\1\2\1\124\1\2\3\uffff\1\2\14\uffff\1\126\3\uffff\1\126\2\uffff\1\2\1"+
			"\125\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\72\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\131\1\2\1\131\1\uffff\1\2\4\uffff\1\131\1\2\3\uffff\1\131\3\uffff"+
			"\2\2\3\uffff\2\131\1\2\1\uffff\1\131\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\131\1\uffff\1\131\2\uffff\1\2\2\uffff\1\131\4\uffff\2"+
			"\2\1\uffff\1\2\5\uffff\1\131\1\2\1\131\1\2\3\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\1\2\1\uffff\1\131\2\2\1\131\2\2\1\131\1\uffff\1\2\1\uffff\2\2"+
			"\1\131\2\uffff\1\131\1\2\1\131\6\uffff\1\2\1\131\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\4\uffff\2\131\1\uffff\2\131\1\uffff\1\131\4\uffff\1\2\4\uffff\4"+
			"\2\2\uffff\3\131\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\127\1\2\3\uffff"+
			"\1\2\14\uffff\1\131\3\uffff\1\131\2\uffff\1\2\1\130\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\132\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\34\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\1\2\1\35\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\135\1\uffff\1\135\6\uffff\1\135\4\uffff\1\135\10\uffff\2\135\2\uffff"+
			"\1\135\22\uffff\1\135\1\uffff\1\135\5\uffff\1\135\15\uffff\1\135\1\uffff"+
			"\1\135\13\uffff\1\135\2\uffff\1\135\2\uffff\1\135\5\uffff\1\135\2\uffff"+
			"\1\135\1\uffff\1\135\7\uffff\1\135\15\uffff\2\135\1\uffff\2\135\1\uffff"+
			"\1\135\17\uffff\3\135\26\uffff\1\133\21\uffff\1\135\3\uffff\1\135\3\uffff"+
			"\1\134",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2\12"+
			"\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\140\1\2\1\140\1\uffff\1\2\4\uffff\1\140\1\2\3\uffff\1\140\2\uffff"+
			"\1\25\2\2\2\uffff\1\25\2\140\1\2\1\uffff\1\140\4\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\1\uffff\1\140\1\uffff\1\140\2\uffff\1\2\2\uffff\1\140"+
			"\4\uffff\2\2\1\uffff\1\2\5\uffff\1\140\1\2\1\140\1\2\3\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\140\2\2\1\140\2\2\1\140\1\uffff\1\2\1\uffff"+
			"\2\2\1\140\2\uffff\1\140\1\2\1\140\6\uffff\1\2\1\140\1\2\1\uffff\1\2"+
			"\5\uffff\1\2\4\uffff\2\140\1\25\2\140\1\uffff\1\140\4\uffff\1\2\4\uffff"+
			"\4\2\2\uffff\3\140\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\136\1\2\3\uffff"+
			"\1\2\14\uffff\1\140\3\uffff\1\140\2\uffff\1\2\1\137\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\141\4\uffff\4\2\2"+
			"\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\105\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\40\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\41\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\142\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\145\1\2\1\145\1\uffff\1\2\4\uffff\1\145\1\2\3\uffff\1\145\3\uffff"+
			"\2\2\3\uffff\2\145\1\2\1\uffff\1\145\4\uffff\1\2\1\uffff\1\2\11\uffff"+
			"\1\2\1\uffff\1\145\1\uffff\1\145\2\uffff\1\2\2\uffff\1\145\4\uffff\2"+
			"\2\1\uffff\1\2\5\uffff\1\145\1\2\1\145\1\2\3\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\1\2\1\uffff\1\145\2\2\1\145\2\2\1\145\1\uffff\1\2\1\uffff\2\2"+
			"\1\145\2\uffff\1\145\1\2\1\145\6\uffff\1\2\1\145\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\4\uffff\2\145\1\uffff\2\145\1\uffff\1\145\4\uffff\1\2\4\uffff\4"+
			"\2\2\uffff\3\145\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\143\1\2\3\uffff"+
			"\1\2\14\uffff\1\145\3\uffff\1\145\2\uffff\1\2\1\144\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\146\4\uffff\4\2\64\uffff\1\2",
			"\1\151\1\uffff\1\151\6\uffff\1\151\4\uffff\1\151\10\uffff\2\151\2\uffff"+
			"\1\151\22\uffff\1\151\1\uffff\1\151\5\uffff\1\151\15\uffff\1\151\1\uffff"+
			"\1\151\13\uffff\1\151\2\uffff\1\151\2\uffff\1\151\5\uffff\1\151\2\uffff"+
			"\1\151\1\uffff\1\151\7\uffff\1\151\15\uffff\2\151\1\uffff\2\151\1\uffff"+
			"\1\151\17\uffff\3\151\26\uffff\1\147\21\uffff\1\151\3\uffff\1\151\3\uffff"+
			"\1\150",
			"\1\154\1\uffff\1\154\6\uffff\1\154\4\uffff\1\154\10\uffff\2\154\2\uffff"+
			"\1\154\22\uffff\1\154\1\uffff\1\154\5\uffff\1\154\15\uffff\1\154\1\uffff"+
			"\1\154\13\uffff\1\154\2\uffff\1\154\2\uffff\1\154\5\uffff\1\154\2\uffff"+
			"\1\154\1\uffff\1\154\7\uffff\1\154\15\uffff\2\154\1\uffff\2\154\1\uffff"+
			"\1\154\17\uffff\3\154\26\uffff\1\152\21\uffff\1\154\3\uffff\1\154\3\uffff"+
			"\1\153",
			"\1\157\1\2\1\157\1\uffff\1\2\4\uffff\1\157\1\2\3\uffff\1\157\2\uffff"+
			"\1\25\2\2\2\uffff\1\25\2\157\1\2\1\uffff\1\157\4\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\1\uffff\1\157\1\uffff\1\157\2\uffff\1\2\2\uffff\1\157"+
			"\4\uffff\2\2\1\uffff\1\2\5\uffff\1\157\1\2\1\157\1\2\3\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\157\2\2\1\157\2\2\1\157\1\uffff\1\2\1\uffff"+
			"\2\2\1\157\2\uffff\1\157\1\2\1\157\6\uffff\1\2\1\157\1\2\1\uffff\1\2"+
			"\5\uffff\1\2\4\uffff\2\157\1\25\2\157\1\uffff\1\157\4\uffff\1\2\4\uffff"+
			"\4\2\2\uffff\3\157\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\155\1\2\3\uffff"+
			"\1\2\14\uffff\1\157\3\uffff\1\157\2\uffff\1\2\1\156\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\116\1\112\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\113\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1"+
			"\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\161",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\164",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\165",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\1\167",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\171",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\175",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0080",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\u0083",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0086",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u0087\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u008a\1\2\1\u008a\1\uffff\1\2\4\uffff\1\u008a\1\2\3\uffff\1\u008a"+
			"\3\uffff\2\2\3\uffff\2\u008a\1\2\1\uffff\1\u008a\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u008a\1\uffff\1\u008a\2\uffff\1\2\2\uffff"+
			"\1\u008a\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u008a\1\2\1\u008a\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u008a\2\2\1\u008a\2\2\1\u008a"+
			"\1\uffff\1\2\1\uffff\2\2\1\u008a\2\uffff\1\u008a\1\2\1\u008a\6\uffff"+
			"\1\2\1\u008a\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u008a\1\uffff\2\u008a"+
			"\1\uffff\1\u008a\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u008a\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u0088\1\2\3\uffff\1\2\14\uffff\1\u008a\3"+
			"\uffff\1\u008a\2\uffff\1\2\1\u0089\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1"+
			"\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\163\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\73\11\uffff\1\2\17\uffff\1\2\1\uffff\1\160\6\uffff\1\2\5\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\74\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\76\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\21\uffff\1\77\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2\12"+
			"\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\101\16\uffff\1\2\33\uffff\1\166\25\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u008b\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\104\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\170\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u008c\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\u008f\1\uffff\1\u008f\6\uffff\1\u008f\4\uffff\1\u008f\10\uffff\2"+
			"\u008f\2\uffff\1\u008f\22\uffff\1\u008f\1\uffff\1\u008f\5\uffff\1\u008f"+
			"\15\uffff\1\u008f\1\uffff\1\u008f\13\uffff\1\u008f\2\uffff\1\u008f\2"+
			"\uffff\1\u008f\5\uffff\1\u008f\2\uffff\1\u008f\1\uffff\1\u008f\7\uffff"+
			"\1\u008f\15\uffff\2\u008f\1\uffff\2\u008f\1\uffff\1\u008f\17\uffff\3"+
			"\u008f\26\uffff\1\u008d\21\uffff\1\u008f\3\uffff\1\u008f\3\uffff\1\u008e",
			"\1\u0092\1\2\1\u0092\1\uffff\1\2\4\uffff\1\u0092\1\2\3\uffff\1\u0092"+
			"\3\uffff\2\2\3\uffff\2\u0092\1\2\1\uffff\1\u0092\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u0092\1\uffff\1\u0092\2\uffff\1\2\2\uffff"+
			"\1\u0092\15\uffff\1\u0092\1\uffff\1\u0092\1\2\5\uffff\1\2\4\uffff\1\u0092"+
			"\2\2\1\u0092\2\2\1\u0092\1\uffff\1\2\1\uffff\1\2\1\uffff\1\u0092\2\uffff"+
			"\1\u0092\1\2\1\u0092\6\uffff\1\2\1\u0092\1\2\7\uffff\1\2\4\uffff\2\u0092"+
			"\1\uffff\2\u0092\1\uffff\1\u0092\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u0092"+
			"\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\u0090\1\2\3\uffff\1\2\14\uffff"+
			"\1\u0092\3\uffff\1\u0092\2\uffff\1\2\1\u0091\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\112\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\172\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1\2"+
			"\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u0095\1\2\1\u0095\1\uffff\1\2\4\uffff\1\u0095\1\2\3\uffff\1\u0095"+
			"\3\uffff\2\2\3\uffff\2\u0095\1\2\1\uffff\1\u0095\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u0095\1\uffff\1\u0095\2\uffff\1\2\2\uffff"+
			"\1\u0095\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u0095\1\2\1\u0095\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u0095\2\2\1\u0095\2\2\1\u0095"+
			"\1\uffff\1\2\1\uffff\2\2\1\u0095\2\uffff\1\u0095\1\2\1\u0095\6\uffff"+
			"\1\2\1\u0095\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u0095\1\uffff\2\u0095"+
			"\1\uffff\1\u0095\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u0095\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u0093\1\2\3\uffff\1\2\14\uffff\1\u0095\3"+
			"\uffff\1\u0095\2\uffff\1\2\1\u0094\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\u0096\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\114\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\1\2\1\115\1\uffff"+
			"\2\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u0099\1\uffff\1\u0099\6\uffff\1\u0099\4\uffff\1\u0099\10\uffff\2"+
			"\u0099\2\uffff\1\u0099\22\uffff\1\u0099\1\uffff\1\u0099\5\uffff\1\u0099"+
			"\15\uffff\1\u0099\1\uffff\1\u0099\13\uffff\1\u0099\2\uffff\1\u0099\2"+
			"\uffff\1\u0099\5\uffff\1\u0099\2\uffff\1\u0099\1\uffff\1\u0099\7\uffff"+
			"\1\u0099\15\uffff\2\u0099\1\uffff\2\u0099\1\uffff\1\u0099\17\uffff\3"+
			"\u0099\26\uffff\1\u0097\21\uffff\1\u0099\3\uffff\1\u0099\3\uffff\1\u0098",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\1\u0081\16\uffff\1\2\33\uffff\1\u0082\25\uffff\1\2\62\uffff\1\2",
			"\1\u009c\1\2\1\u009c\1\uffff\1\2\4\uffff\1\u009c\1\2\3\uffff\1\u009c"+
			"\2\uffff\1\25\2\2\2\uffff\1\25\2\u009c\1\2\1\uffff\1\u009c\4\uffff\1"+
			"\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\u009c\1\uffff\1\u009c\2\uffff\1"+
			"\2\2\uffff\1\u009c\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u009c\1\2\1\u009c"+
			"\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u009c\2\2\1\u009c"+
			"\2\2\1\u009c\1\uffff\1\2\1\uffff\2\2\1\u009c\2\uffff\1\u009c\1\2\1\u009c"+
			"\6\uffff\1\2\1\u009c\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u009c\1\25"+
			"\2\u009c\1\uffff\1\u009c\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u009c\3\uffff"+
			"\1\2\4\uffff\1\2\14\uffff\1\2\1\u009a\1\2\3\uffff\1\2\14\uffff\1\u009c"+
			"\3\uffff\1\u009c\2\uffff\1\2\1\u009b\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u009d\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u0085\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u009f",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00a1",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\u00a4",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00a5",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\uffff",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\1\u00a7",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\u00a9",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\76\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\160\5\uffff\4\2\3"+
			"\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3"+
			"\2\2\uffff\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\162\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u009e\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\1\u00aa\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2"+
			"\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u00ad\1\2\1\u00ad\1\uffff\1\2\4\uffff\1\u00ad\1\2\3\uffff\1\u00ad"+
			"\3\uffff\2\2\3\uffff\2\u00ad\1\2\1\uffff\1\u00ad\4\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\1\uffff\1\u00ad\1\uffff\1\u00ad\2\uffff\1\2\2\uffff"+
			"\1\u00ad\4\uffff\2\2\1\uffff\1\2\5\uffff\1\u00ad\1\2\1\u00ad\1\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\u00ad\2\2\1\u00ad\2\2\1\u00ad"+
			"\1\uffff\1\2\1\uffff\2\2\1\u00ad\2\uffff\1\u00ad\1\2\1\u00ad\6\uffff"+
			"\1\2\1\u00ad\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\u00ad\1\uffff\2\u00ad"+
			"\1\uffff\1\u00ad\4\uffff\1\2\4\uffff\4\2\2\uffff\3\u00ad\3\uffff\1\2"+
			"\4\uffff\1\2\14\uffff\1\2\1\u00ab\1\2\3\uffff\1\2\14\uffff\1\u00ad\3"+
			"\uffff\1\u00ad\2\uffff\1\2\1\u00ac\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\u00a3\16\uffff\1\2\5\uffff\2\2\1\uffff\2"+
			"\2\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\4\2\64\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\173\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a0\6\uffff\1\2\5\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\174\1\uffff\2\2\5\uffff\1"+
			"\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\176\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\21\uffff\1\177\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2"+
			"\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff"+
			"\1\2",
			"\1\u0081\16\uffff\1\2\33\uffff\1\u00a6\25\uffff\1\2",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff"+
			"\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\u00ae\4\uffff\4\2"+
			"\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u0084\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00a8\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\u00b0",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
			"\1\uffff",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\176\3\uffff\3"+
			"\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\u00a0\5\uffff\4\2"+
			"\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff"+
			"\3\2\2\uffff\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff"+
			"\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\u00a2\14\uffff\1\2\1\uffff"+
			"\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\u00af\6\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2"
	};

	static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
	static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
	static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
	static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
	static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
	static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
	static final short[][] DFA102_transition;

	static {
		int numStates = DFA102_transitionS.length;
		DFA102_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
		}
	}

	protected class DFA102 extends DFA {

		public DFA102(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 102;
			this.eot = DFA102_eot;
			this.eof = DFA102_eof;
			this.min = DFA102_min;
			this.max = DFA102_max;
			this.accept = DFA102_accept;
			this.special = DFA102_special;
			this.transition = DFA102_transition;
		}
		@Override
		public String getDescription() {
			return "307:45: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA102_25 = input.LA(1);
						 
						int index102_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_25);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA102_22 = input.LA(1);
						 
						int index102_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_22);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA102_9 = input.LA(1);
						 
						int index102_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA102_135 = input.LA(1);
						 
						int index102_135 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_135);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA102_11 = input.LA(1);
						 
						int index102_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_11);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA102_23 = input.LA(1);
						 
						int index102_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_23);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA102_37 = input.LA(1);
						 
						int index102_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_37);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA102_41 = input.LA(1);
						 
						int index102_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA102_90 = input.LA(1);
						 
						int index102_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_90);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA102_80 = input.LA(1);
						 
						int index102_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_80);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA102_57 = input.LA(1);
						 
						int index102_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_57);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA102_34 = input.LA(1);
						 
						int index102_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_34);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA102_36 = input.LA(1);
						 
						int index102_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_36);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA102_71 = input.LA(1);
						 
						int index102_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_71);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA102_73 = input.LA(1);
						 
						int index102_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_73);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA102_150 = input.LA(1);
						 
						int index102_150 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_150);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA102_170 = input.LA(1);
						 
						int index102_170 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_170);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA102_97 = input.LA(1);
						 
						int index102_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_97);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA102_98 = input.LA(1);
						 
						int index102_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_98);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA102_140 = input.LA(1);
						 
						int index102_140 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_140);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA102_102 = input.LA(1);
						 
						int index102_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_102);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA102_139 = input.LA(1);
						 
						int index102_139 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_139);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA102_157 = input.LA(1);
						 
						int index102_157 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_157);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA102_174 = input.LA(1);
						 
						int index102_174 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred149_Delphi()) ) {s = 21;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index102_174);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 102, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA110_eotS =
		"\26\uffff";
	static final String DFA110_eofS =
		"\26\uffff";
	static final String DFA110_minS =
		"\1\6\1\30\1\uffff\1\6\1\30\1\u00ae\1\30\1\6\3\0\1\30\1\0\1\30\1\u00ae"+
		"\1\30\1\uffff\2\0\1\30\2\0";
	static final String DFA110_maxS =
		"\1\u00c8\1\167\1\uffff\1\u00c8\1\31\1\u00ae\1\31\1\u00c8\3\0\1\31\1\0"+
		"\1\31\1\u00ae\1\31\1\uffff\2\0\1\31\2\0";
	static final String DFA110_acceptS =
		"\2\uffff\1\2\15\uffff\1\1\5\uffff";
	static final String DFA110_specialS =
		"\10\uffff\1\0\1\1\1\2\1\uffff\1\3\4\uffff\1\4\1\5\1\uffff\1\6\1\7}>";
	static final String[] DFA110_transitionS = {
			"\1\6\1\uffff\1\6\6\uffff\1\6\1\uffff\1\2\2\uffff\1\6\2\uffff\1\2\3\uffff"+
			"\2\2\2\6\2\uffff\1\6\1\uffff\1\2\15\uffff\1\2\2\uffff\1\6\1\uffff\1\6"+
			"\5\uffff\1\6\4\uffff\1\2\10\uffff\1\6\1\uffff\1\6\6\uffff\1\2\4\uffff"+
			"\1\6\2\uffff\1\6\2\uffff\1\6\5\uffff\1\6\2\uffff\1\3\1\uffff\1\6\7\uffff"+
			"\1\6\1\uffff\2\2\1\uffff\4\2\5\uffff\2\6\1\uffff\2\6\1\uffff\1\6\3\uffff"+
			"\1\2\13\uffff\1\6\1\1\1\6\1\uffff\1\2\3\uffff\1\2\20\uffff\1\4\17\uffff"+
			"\1\2\1\uffff\1\6\3\uffff\1\6\3\uffff\1\5",
			"\1\10\1\7\131\uffff\1\2\3\uffff\1\2",
			"",
			"\1\2\1\uffff\1\2\6\uffff\1\2\4\uffff\1\2\3\uffff\1\11\1\7\3\uffff\2"+
			"\2\2\uffff\1\2\22\uffff\1\2\1\uffff\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff"+
			"\1\2\13\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\1\2\15\uffff\2\2\1\uffff\2\2\1\uffff\1\2\17\uffff\3\2\26"+
			"\uffff\1\2\21\uffff\1\2\3\uffff\1\2\3\uffff\1\2",
			"\1\12\1\7",
			"\1\13",
			"\1\14\1\7",
			"\1\17\1\uffff\1\17\6\uffff\1\17\4\uffff\1\17\10\uffff\2\17\2\uffff\1"+
			"\17\22\uffff\1\17\1\uffff\1\17\5\uffff\1\17\15\uffff\1\17\1\uffff\1\17"+
			"\13\uffff\1\17\2\uffff\1\17\2\uffff\1\17\5\uffff\1\17\2\uffff\1\17\1"+
			"\uffff\1\17\7\uffff\1\17\15\uffff\2\17\1\uffff\2\17\1\uffff\1\17\17\uffff"+
			"\3\17\26\uffff\1\15\21\uffff\1\17\3\uffff\1\17\3\uffff\1\16",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\21\1\7",
			"\1\uffff",
			"\1\22\1\7",
			"\1\23",
			"\1\24\1\7",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\25\1\7",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
	static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
	static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
	static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
	static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
	static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
	static final short[][] DFA110_transition;

	static {
		int numStates = DFA110_transitionS.length;
		DFA110_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
		}
	}

	protected class DFA110 extends DFA {

		public DFA110(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 110;
			this.eot = DFA110_eot;
			this.eof = DFA110_eof;
			this.min = DFA110_min;
			this.max = DFA110_max;
			this.accept = DFA110_accept;
			this.special = DFA110_special;
			this.transition = DFA110_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 327:41: ( recordField )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA110_8 = input.LA(1);
						 
						int index110_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA110_9 = input.LA(1);
						 
						int index110_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_9);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA110_10 = input.LA(1);
						 
						int index110_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_10);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA110_12 = input.LA(1);
						 
						int index110_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_12);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA110_17 = input.LA(1);
						 
						int index110_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_17);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA110_18 = input.LA(1);
						 
						int index110_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_18);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA110_20 = input.LA(1);
						 
						int index110_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_20);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA110_21 = input.LA(1);
						 
						int index110_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred158_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index110_21);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 110, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA164_eotS =
		"\145\uffff";
	static final String DFA164_eofS =
		"\1\1\144\uffff";
	static final String DFA164_minS =
		"\1\4\40\uffff\23\0\61\uffff";
	static final String DFA164_maxS =
		"\1\u00c9\40\uffff\23\0\61\uffff";
	static final String DFA164_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA164_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA164_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1"+
			"\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1"+
			"\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
	static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
	static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
	static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
	static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
	static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
	static final short[][] DFA164_transition;

	static {
		int numStates = DFA164_transitionS.length;
		DFA164_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
		}
	}

	protected class DFA164 extends DFA {

		public DFA164(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 164;
			this.eot = DFA164_eot;
			this.eof = DFA164_eof;
			this.min = DFA164_min;
			this.max = DFA164_max;
			this.accept = DFA164_accept;
			this.special = DFA164_special;
			this.transition = DFA164_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 406:112: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA164_33 = input.LA(1);
						 
						int index164_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA164_34 = input.LA(1);
						 
						int index164_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA164_35 = input.LA(1);
						 
						int index164_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA164_36 = input.LA(1);
						 
						int index164_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA164_37 = input.LA(1);
						 
						int index164_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA164_38 = input.LA(1);
						 
						int index164_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA164_39 = input.LA(1);
						 
						int index164_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA164_40 = input.LA(1);
						 
						int index164_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA164_41 = input.LA(1);
						 
						int index164_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA164_42 = input.LA(1);
						 
						int index164_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA164_43 = input.LA(1);
						 
						int index164_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA164_44 = input.LA(1);
						 
						int index164_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA164_45 = input.LA(1);
						 
						int index164_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA164_46 = input.LA(1);
						 
						int index164_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA164_47 = input.LA(1);
						 
						int index164_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA164_48 = input.LA(1);
						 
						int index164_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA164_49 = input.LA(1);
						 
						int index164_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA164_50 = input.LA(1);
						 
						int index164_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA164_51 = input.LA(1);
						 
						int index164_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred231_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index164_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 164, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA166_eotS =
		"\145\uffff";
	static final String DFA166_eofS =
		"\1\1\144\uffff";
	static final String DFA166_minS =
		"\1\4\40\uffff\23\0\61\uffff";
	static final String DFA166_maxS =
		"\1\u00c9\40\uffff\23\0\61\uffff";
	static final String DFA166_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA166_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA166_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1"+
			"\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1"+
			"\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
	static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
	static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
	static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
	static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
	static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
	static final short[][] DFA166_transition;

	static {
		int numStates = DFA166_transitionS.length;
		DFA166_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
		}
	}

	protected class DFA166 extends DFA {

		public DFA166(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 166;
			this.eot = DFA166_eot;
			this.eof = DFA166_eof;
			this.min = DFA166_min;
			this.max = DFA166_max;
			this.accept = DFA166_accept;
			this.special = DFA166_special;
			this.transition = DFA166_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 407:79: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA166_33 = input.LA(1);
						 
						int index166_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA166_34 = input.LA(1);
						 
						int index166_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA166_35 = input.LA(1);
						 
						int index166_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA166_36 = input.LA(1);
						 
						int index166_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA166_37 = input.LA(1);
						 
						int index166_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA166_38 = input.LA(1);
						 
						int index166_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA166_39 = input.LA(1);
						 
						int index166_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA166_40 = input.LA(1);
						 
						int index166_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA166_41 = input.LA(1);
						 
						int index166_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA166_42 = input.LA(1);
						 
						int index166_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA166_43 = input.LA(1);
						 
						int index166_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA166_44 = input.LA(1);
						 
						int index166_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA166_45 = input.LA(1);
						 
						int index166_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA166_46 = input.LA(1);
						 
						int index166_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA166_47 = input.LA(1);
						 
						int index166_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA166_48 = input.LA(1);
						 
						int index166_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA166_49 = input.LA(1);
						 
						int index166_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA166_50 = input.LA(1);
						 
						int index166_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA166_51 = input.LA(1);
						 
						int index166_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred234_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 166, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA168_eotS =
		"\154\uffff";
	static final String DFA168_eofS =
		"\1\1\153\uffff";
	static final String DFA168_minS =
		"\1\4\33\uffff\1\0\4\uffff\20\0\60\uffff\1\0\3\uffff\1\0\6\uffff";
	static final String DFA168_maxS =
		"\1\u00c9\33\uffff\1\0\4\uffff\20\0\60\uffff\1\0\3\uffff\1\0\6\uffff";
	static final String DFA168_acceptS =
		"\1\uffff\1\2\142\uffff\1\1\7\uffff";
	static final String DFA168_specialS =
		"\34\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\60\uffff\1\21\3\uffff\1\22\6\uffff}>";
	static final String[] DFA168_transitionS = {
			"\1\1\1\144\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\1\55\1\1\1\34\1\uffff\5\1\2\uffff\1\144\2\uffff\5\1"+
			"\1\56\1\51\3\1\1\52\1\uffff\1\145\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\6\1\1\42\1\uffff\3\1\2\uffff\1\1\1\60\1\53\2\1\1\141\3\1\1\54\12\1\1"+
			"\41\1\144\2\uffff\1\45\1\57\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\1\1\1\46\1\144\1\1\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1"+
			"\144\1\50\7\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\2\1\2\uffff\3\1\1\144\2\uffff\2\1\1\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
	static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
	static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
	static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
	static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
	static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
	static final short[][] DFA168_transition;

	static {
		int numStates = DFA168_transitionS.length;
		DFA168_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
		}
	}

	protected class DFA168 extends DFA {

		public DFA168(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 168;
			this.eot = DFA168_eot;
			this.eof = DFA168_eof;
			this.min = DFA168_min;
			this.max = DFA168_max;
			this.accept = DFA168_accept;
			this.special = DFA168_special;
			this.transition = DFA168_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 409:54: ( methodDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA168_28 = input.LA(1);
						 
						int index168_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_28);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA168_33 = input.LA(1);
						 
						int index168_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_33);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA168_34 = input.LA(1);
						 
						int index168_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_34);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA168_35 = input.LA(1);
						 
						int index168_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_35);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA168_36 = input.LA(1);
						 
						int index168_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_36);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA168_37 = input.LA(1);
						 
						int index168_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_37);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA168_38 = input.LA(1);
						 
						int index168_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_38);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA168_39 = input.LA(1);
						 
						int index168_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_39);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA168_40 = input.LA(1);
						 
						int index168_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_40);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA168_41 = input.LA(1);
						 
						int index168_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA168_42 = input.LA(1);
						 
						int index168_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_42);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA168_43 = input.LA(1);
						 
						int index168_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA168_44 = input.LA(1);
						 
						int index168_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_44);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA168_45 = input.LA(1);
						 
						int index168_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_45);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA168_46 = input.LA(1);
						 
						int index168_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_46);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA168_47 = input.LA(1);
						 
						int index168_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_47);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA168_48 = input.LA(1);
						 
						int index168_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_48);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA168_97 = input.LA(1);
						 
						int index168_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_97);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA168_101 = input.LA(1);
						 
						int index168_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 168, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA185_eotS =
		"\134\uffff";
	static final String DFA185_eofS =
		"\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\4\uffff\1\7\27\uffff\1\7\4\uffff"+
		"\1\7\5\uffff\1\7\53\uffff";
	static final String DFA185_minS =
		"\1\50\1\6\1\30\1\u00ae\1\30\1\6\2\uffff\2\30\1\u00ae\1\30\1\6\1\30\4\6"+
		"\1\30\1\31\1\u00ae\2\31\1\u00ae\2\31\1\u00ae\2\31\1\u00ae\4\31\1\30\1"+
		"\u00ae\2\30\2\6\1\31\1\6\1\30\1\31\1\6\2\31\1\6\1\30\1\31\1\6\1\30\1\31"+
		"\1\u00ae\2\31\1\u00ae\2\31\1\u00ae\2\31\1\u00ae\5\31\1\u00ae\5\31\1\6"+
		"\4\31\1\6\2\31\1\u00ae\2\31\1\u00ae\6\31";
	static final String DFA185_maxS =
		"\1\50\1\u00c8\1\u008d\1\u00ae\1\u008d\1\u00c8\2\uffff\2\u008d\1\u00ae"+
		"\1\u008d\1\u00c8\1\u008d\4\u00c8\1\u008d\1\132\1\u00ae\2\132\1\u00ae\1"+
		"\132\1\104\1\u00ae\1\104\1\u008d\1\u00ae\5\u008d\1\u00ae\2\u008d\2\u00c8"+
		"\1\132\1\u00c8\1\u008d\1\132\1\u00c8\2\104\1\u00c8\2\u008d\1\u00c8\1\u008d"+
		"\1\132\1\u00ae\1\132\1\104\1\u00ae\2\104\1\u00ae\1\104\1\u008d\1\u00ae"+
		"\5\u008d\1\u00ae\4\u008d\1\132\1\u00c8\3\104\1\u008d\1\u00c8\1\u008d\1"+
		"\104\1\u00ae\1\104\1\u008d\1\u00ae\4\u008d\1\104\1\u008d";
	static final String DFA185_acceptS =
		"\6\uffff\1\1\1\2\124\uffff";
	static final String DFA185_specialS =
		"\134\uffff}>";
	static final String[] DFA185_transitionS = {
			"\1\1",
			"\1\4\1\uffff\1\4\6\uffff\1\4\4\uffff\1\4\10\uffff\2\4\2\uffff\1\4\22"+
			"\uffff\1\4\1\uffff\1\4\5\uffff\1\4\15\uffff\1\4\1\uffff\1\4\13\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff\1\4\7\uffff"+
			"\1\4\15\uffff\2\4\1\uffff\2\4\1\uffff\1\4\17\uffff\3\4\26\uffff\1\2\21"+
			"\uffff\1\4\3\uffff\1\4\3\uffff\1\3",
			"\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
			"\1\10",
			"\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
			"\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\2\13\2\uffff\1"+
			"\13\22\uffff\1\13\1\uffff\1\13\5\uffff\1\13\15\uffff\1\13\1\uffff\1\13"+
			"\13\uffff\1\13\2\uffff\1\13\2\uffff\1\13\5\uffff\1\13\2\uffff\1\13\1"+
			"\uffff\1\13\7\uffff\1\13\15\uffff\2\13\1\uffff\2\13\1\uffff\1\13\17\uffff"+
			"\3\13\26\uffff\1\11\21\uffff\1\13\3\uffff\1\13\3\uffff\1\12",
			"",
			"",
			"\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\22",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\25\1\uffff\1\25\6\uffff\1\25\4\uffff\1\25\10\uffff\2\25\2\uffff\1"+
			"\25\22\uffff\1\25\1\uffff\1\25\5\uffff\1\25\15\uffff\1\25\1\uffff\1\25"+
			"\13\uffff\1\25\2\uffff\1\25\2\uffff\1\25\5\uffff\1\25\2\uffff\1\25\1"+
			"\uffff\1\25\7\uffff\1\25\15\uffff\2\25\1\uffff\2\25\1\uffff\1\25\17\uffff"+
			"\3\25\26\uffff\1\23\21\uffff\1\25\3\uffff\1\25\3\uffff\1\24",
			"\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
			"\1\30\1\uffff\1\30\6\uffff\1\30\4\uffff\1\30\10\uffff\2\30\2\uffff\1"+
			"\30\22\uffff\1\30\1\uffff\1\30\5\uffff\1\30\15\uffff\1\30\1\uffff\1\30"+
			"\13\uffff\1\30\2\uffff\1\30\2\uffff\1\30\5\uffff\1\30\2\uffff\1\30\1"+
			"\uffff\1\30\7\uffff\1\30\15\uffff\2\30\1\uffff\2\30\1\uffff\1\30\17\uffff"+
			"\3\30\26\uffff\1\26\21\uffff\1\30\3\uffff\1\30\3\uffff\1\27",
			"\1\33\1\uffff\1\33\6\uffff\1\33\4\uffff\1\33\10\uffff\2\33\2\uffff\1"+
			"\33\22\uffff\1\33\1\uffff\1\33\5\uffff\1\33\15\uffff\1\33\1\uffff\1\33"+
			"\13\uffff\1\33\2\uffff\1\33\2\uffff\1\33\5\uffff\1\33\2\uffff\1\33\1"+
			"\uffff\1\33\7\uffff\1\33\15\uffff\2\33\1\uffff\2\33\1\uffff\1\33\17\uffff"+
			"\3\33\26\uffff\1\31\21\uffff\1\33\3\uffff\1\33\3\uffff\1\32",
			"\1\36\1\uffff\1\36\6\uffff\1\36\4\uffff\1\36\2\uffff\1\40\4\uffff\1"+
			"\41\2\36\2\uffff\1\36\22\uffff\1\36\1\uffff\1\36\5\uffff\1\36\15\uffff"+
			"\1\36\1\uffff\1\36\13\uffff\1\36\2\uffff\1\36\2\uffff\1\36\5\uffff\1"+
			"\36\2\uffff\1\36\1\uffff\1\36\7\uffff\1\36\15\uffff\2\36\1\37\2\36\1"+
			"\uffff\1\36\17\uffff\3\36\26\uffff\1\34\21\uffff\1\36\3\uffff\1\36\3"+
			"\uffff\1\35",
			"\1\44\1\uffff\1\44\6\uffff\1\44\4\uffff\1\44\10\uffff\2\44\2\uffff\1"+
			"\44\22\uffff\1\44\1\uffff\1\44\5\uffff\1\44\15\uffff\1\44\1\uffff\1\44"+
			"\13\uffff\1\44\2\uffff\1\44\2\uffff\1\44\5\uffff\1\44\2\uffff\1\44\1"+
			"\uffff\1\44\7\uffff\1\44\15\uffff\2\44\1\uffff\2\44\1\uffff\1\44\17\uffff"+
			"\3\44\26\uffff\1\42\21\uffff\1\44\3\uffff\1\44\3\uffff\1\43",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\50",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\53",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\54\52\uffff\1\55",
			"\1\56",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\61",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\63",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
			"\1\66\1\uffff\1\66\6\uffff\1\66\4\uffff\1\66\10\uffff\2\66\2\uffff\1"+
			"\66\22\uffff\1\66\1\uffff\1\66\5\uffff\1\66\15\uffff\1\66\1\uffff\1\66"+
			"\13\uffff\1\66\2\uffff\1\66\2\uffff\1\66\5\uffff\1\66\2\uffff\1\66\1"+
			"\uffff\1\66\7\uffff\1\66\15\uffff\2\66\1\uffff\2\66\1\uffff\1\66\17\uffff"+
			"\3\66\26\uffff\1\64\21\uffff\1\66\3\uffff\1\66\3\uffff\1\65",
			"\1\71\1\uffff\1\71\6\uffff\1\71\4\uffff\1\71\10\uffff\2\71\2\uffff\1"+
			"\71\22\uffff\1\71\1\uffff\1\71\5\uffff\1\71\15\uffff\1\71\1\uffff\1\71"+
			"\13\uffff\1\71\2\uffff\1\71\2\uffff\1\71\5\uffff\1\71\2\uffff\1\71\1"+
			"\uffff\1\71\7\uffff\1\71\15\uffff\2\71\1\uffff\2\71\1\uffff\1\71\17\uffff"+
			"\3\71\26\uffff\1\67\21\uffff\1\71\3\uffff\1\71\3\uffff\1\70",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\66\1\uffff\1\66\6\uffff\1\66\4\uffff\1\66\10\uffff\2\66\2\uffff\1"+
			"\66\22\uffff\1\66\1\uffff\1\66\5\uffff\1\66\15\uffff\1\66\1\uffff\1\66"+
			"\13\uffff\1\66\2\uffff\1\66\2\uffff\1\66\5\uffff\1\66\2\uffff\1\66\1"+
			"\uffff\1\66\7\uffff\1\66\15\uffff\2\66\1\uffff\2\66\1\uffff\1\66\17\uffff"+
			"\3\66\26\uffff\1\64\21\uffff\1\66\3\uffff\1\66\3\uffff\1\65",
			"\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\74\1\uffff\1\74\6\uffff\1\74\4\uffff\1\74\10\uffff\2\74\2\uffff\1"+
			"\74\22\uffff\1\74\1\uffff\1\74\5\uffff\1\74\15\uffff\1\74\1\uffff\1\74"+
			"\13\uffff\1\74\2\uffff\1\74\2\uffff\1\74\5\uffff\1\74\2\uffff\1\74\1"+
			"\uffff\1\74\7\uffff\1\74\15\uffff\2\74\1\uffff\2\74\1\uffff\1\74\17\uffff"+
			"\3\74\26\uffff\1\72\21\uffff\1\74\3\uffff\1\74\3\uffff\1\73",
			"\1\51\52\uffff\1\52",
			"\1\54\52\uffff\1\55",
			"\1\77\1\uffff\1\77\6\uffff\1\77\4\uffff\1\77\2\uffff\1\101\4\uffff\1"+
			"\102\2\77\2\uffff\1\77\22\uffff\1\77\1\uffff\1\77\5\uffff\1\77\15\uffff"+
			"\1\77\1\uffff\1\77\13\uffff\1\77\2\uffff\1\77\2\uffff\1\77\5\uffff\1"+
			"\77\2\uffff\1\77\1\uffff\1\77\7\uffff\1\77\15\uffff\2\77\1\100\2\77\1"+
			"\uffff\1\77\17\uffff\3\77\26\uffff\1\75\21\uffff\1\77\3\uffff\1\77\3"+
			"\uffff\1\76",
			"\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\105\1\uffff\1\105\6\uffff\1\105\4\uffff\1\105\2\uffff\1\107\4\uffff"+
			"\1\110\2\105\2\uffff\1\105\22\uffff\1\105\1\uffff\1\105\5\uffff\1\105"+
			"\15\uffff\1\105\1\uffff\1\105\13\uffff\1\105\2\uffff\1\105\2\uffff\1"+
			"\105\5\uffff\1\105\2\uffff\1\105\1\uffff\1\105\7\uffff\1\105\15\uffff"+
			"\2\105\1\106\2\105\1\uffff\1\105\17\uffff\3\105\26\uffff\1\103\21\uffff"+
			"\1\105\3\uffff\1\105\3\uffff\1\104",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\111",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\112\52\uffff\1\113",
			"\1\114",
			"\1\112\52\uffff\1\113",
			"\1\54\52\uffff\1\55",
			"\1\115",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\116",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\120",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff"+
			"\1\123\22\uffff\1\123\1\uffff\1\123\5\uffff\1\123\15\uffff\1\123\1\uffff"+
			"\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff\1\123\2\uffff"+
			"\1\123\1\uffff\1\123\7\uffff\1\123\15\uffff\2\123\1\uffff\2\123\1\uffff"+
			"\1\123\17\uffff\3\123\26\uffff\1\121\21\uffff\1\123\3\uffff\1\123\3\uffff"+
			"\1\122",
			"\1\51\52\uffff\1\52",
			"\1\112\52\uffff\1\113",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\126\1\uffff\1\126\6\uffff\1\126\4\uffff\1\126\2\uffff\1\130\4\uffff"+
			"\1\131\2\126\2\uffff\1\126\22\uffff\1\126\1\uffff\1\126\5\uffff\1\126"+
			"\15\uffff\1\126\1\uffff\1\126\13\uffff\1\126\2\uffff\1\126\2\uffff\1"+
			"\126\5\uffff\1\126\2\uffff\1\126\1\uffff\1\126\7\uffff\1\126\15\uffff"+
			"\2\126\1\127\2\126\1\uffff\1\126\17\uffff\3\126\26\uffff\1\124\21\uffff"+
			"\1\126\3\uffff\1\126\3\uffff\1\125",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\112\52\uffff\1\113",
			"\1\132",
			"\1\112\52\uffff\1\113",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\133",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\112\52\uffff\1\113",
			"\1\117\52\uffff\1\60\110\uffff\1\21"
	};

	static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
	static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
	static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
	static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
	static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
	static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
	static final short[][] DFA185_transition;

	static {
		int numStates = DFA185_transitionS.length;
		DFA185_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
		}
	}

	protected class DFA185 extends DFA {

		public DFA185(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 185;
			this.eot = DFA185_eot;
			this.eof = DFA185_eof;
			this.min = DFA185_min;
			this.max = DFA185_max;
			this.accept = DFA185_accept;
			this.special = DFA185_special;
			this.transition = DFA185_transition;
		}
		@Override
		public String getDescription() {
			return "422:59: ( '.' ident ( genericDefinition )? )?";
		}
	}

	static final String DFA187_eotS =
		"\146\uffff";
	static final String DFA187_eofS =
		"\1\1\145\uffff";
	static final String DFA187_minS =
		"\1\4\1\uffff\1\0\40\uffff\22\0\61\uffff";
	static final String DFA187_maxS =
		"\1\u00c9\1\uffff\1\0\40\uffff\22\0\61\uffff";
	static final String DFA187_acceptS =
		"\1\uffff\1\2\143\uffff\1\1";
	static final String DFA187_specialS =
		"\2\uffff\1\0\40\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA187_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\45\2\uffff\3\1\1\uffff\3\1\1\46\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\57\2\1\1\uffff\5\1\5\uffff\5\1\1\60\1\53\1\1"+
			"\1\2\1\1\1\54\1\uffff\3\1\1\uffff\3\1\1\uffff\1\1\4\uffff\6\1\1\44\1"+
			"\uffff\3\1\2\uffff\1\1\1\62\1\55\6\1\1\56\12\1\1\43\3\uffff\1\47\1\61"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\50\1\uffff\1\1"+
			"\2\uffff\3\1\1\51\1\uffff\1\1\1\uffff\4\1\1\uffff\1\52\7\1\1\uffff\1"+
			"\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\64\1\1\2\uffff\1\1"+
			"\1\63\1\1\3\uffff\2\1\1\uffff\3\1",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
	static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
	static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
	static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
	static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
	static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
	static final short[][] DFA187_transition;

	static {
		int numStates = DFA187_transitionS.length;
		DFA187_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
		}
	}

	protected class DFA187 extends DFA {

		public DFA187(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 187;
			this.eot = DFA187_eot;
			this.eof = DFA187_eof;
			this.min = DFA187_min;
			this.max = DFA187_max;
			this.accept = DFA187_accept;
			this.special = DFA187_special;
			this.transition = DFA187_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 424:52: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA187_2 = input.LA(1);
						 
						int index187_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA187_35 = input.LA(1);
						 
						int index187_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_35);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA187_36 = input.LA(1);
						 
						int index187_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_36);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA187_37 = input.LA(1);
						 
						int index187_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_37);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA187_38 = input.LA(1);
						 
						int index187_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_38);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA187_39 = input.LA(1);
						 
						int index187_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_39);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA187_40 = input.LA(1);
						 
						int index187_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA187_41 = input.LA(1);
						 
						int index187_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA187_42 = input.LA(1);
						 
						int index187_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_42);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA187_43 = input.LA(1);
						 
						int index187_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_43);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA187_44 = input.LA(1);
						 
						int index187_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_44);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA187_45 = input.LA(1);
						 
						int index187_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_45);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA187_46 = input.LA(1);
						 
						int index187_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_46);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA187_47 = input.LA(1);
						 
						int index187_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_47);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA187_48 = input.LA(1);
						 
						int index187_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_48);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA187_49 = input.LA(1);
						 
						int index187_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_49);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA187_50 = input.LA(1);
						 
						int index187_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_50);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA187_51 = input.LA(1);
						 
						int index187_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_51);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA187_52 = input.LA(1);
						 
						int index187_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index187_52);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 187, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA200_eotS =
		"\145\uffff";
	static final String DFA200_eofS =
		"\1\1\144\uffff";
	static final String DFA200_minS =
		"\1\4\40\uffff\23\0\61\uffff";
	static final String DFA200_maxS =
		"\1\u00c9\40\uffff\23\0\61\uffff";
	static final String DFA200_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA200_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA200_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1"+
			"\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1"+
			"\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
	static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
	static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
	static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
	static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
	static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
	static final short[][] DFA200_transition;

	static {
		int numStates = DFA200_transitionS.length;
		DFA200_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
		}
	}

	protected class DFA200 extends DFA {

		public DFA200(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 200;
			this.eot = DFA200_eot;
			this.eof = DFA200_eof;
			this.min = DFA200_min;
			this.max = DFA200_max;
			this.accept = DFA200_accept;
			this.special = DFA200_special;
			this.transition = DFA200_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 444:46: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA200_33 = input.LA(1);
						 
						int index200_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA200_34 = input.LA(1);
						 
						int index200_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA200_35 = input.LA(1);
						 
						int index200_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA200_36 = input.LA(1);
						 
						int index200_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA200_37 = input.LA(1);
						 
						int index200_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA200_38 = input.LA(1);
						 
						int index200_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA200_39 = input.LA(1);
						 
						int index200_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA200_40 = input.LA(1);
						 
						int index200_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA200_41 = input.LA(1);
						 
						int index200_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA200_42 = input.LA(1);
						 
						int index200_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA200_43 = input.LA(1);
						 
						int index200_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA200_44 = input.LA(1);
						 
						int index200_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA200_45 = input.LA(1);
						 
						int index200_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA200_46 = input.LA(1);
						 
						int index200_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA200_47 = input.LA(1);
						 
						int index200_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA200_48 = input.LA(1);
						 
						int index200_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA200_49 = input.LA(1);
						 
						int index200_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA200_50 = input.LA(1);
						 
						int index200_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA200_51 = input.LA(1);
						 
						int index200_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index200_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 200, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA210_eotS =
		"\145\uffff";
	static final String DFA210_eofS =
		"\1\2\144\uffff";
	static final String DFA210_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA210_maxS =
		"\1\u00c9\1\0\143\uffff";
	static final String DFA210_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA210_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA210_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
	static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
	static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
	static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
	static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
	static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
	static final short[][] DFA210_transition;

	static {
		int numStates = DFA210_transitionS.length;
		DFA210_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
		}
	}

	protected class DFA210 extends DFA {

		public DFA210(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 210;
			this.eot = DFA210_eot;
			this.eof = DFA210_eof;
			this.min = DFA210_min;
			this.max = DFA210_max;
			this.accept = DFA210_accept;
			this.special = DFA210_special;
			this.transition = DFA210_transition;
		}
		@Override
		public String getDescription() {
			return "464:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA210_1 = input.LA(1);
						 
						int index210_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred284_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index210_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 210, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA216_eotS =
		"\164\uffff";
	static final String DFA216_eofS =
		"\1\21\163\uffff";
	static final String DFA216_minS =
		"\1\4\20\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\26\uffff\1\0\16\uffff\1\0\5\uffff"+
		"\1\0\22\uffff";
	static final String DFA216_maxS =
		"\1\u00c9\20\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\26\uffff\1\0\16\uffff\1\0\5\uffff"+
		"\1\0\22\uffff";
	static final String DFA216_acceptS =
		"\21\uffff\1\20\122\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1"+
		"\13\1\14\1\15\1\16\1\17\1\21";
	static final String DFA216_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\uffff\1\20\1\21\1\22\5\uffff\1\23\7\uffff\1\24\1\25\1\26"+
		"\2\uffff\1\27\1\30\1\uffff\1\31\5\uffff\1\32\2\uffff\1\33\1\uffff\1\34"+
		"\26\uffff\1\35\16\uffff\1\36\5\uffff\1\37\22\uffff}>";
	static final String[] DFA216_transitionS = {
			"\1\21\1\uffff\1\141\1\21\1\141\1\uffff\3\21\2\uffff\1\141\1\1\1\21\1"+
			"\uffff\1\21\1\141\5\21\1\uffff\2\21\2\141\1\16\1\uffff\1\47\3\21\1\uffff"+
			"\5\21\5\uffff\4\21\1\141\1\21\1\60\2\21\1\13\1\21\1\uffff\1\141\2\21"+
			"\2\uffff\2\21\1\uffff\1\21\4\uffff\1\21\1\50\1\21\1\65\3\21\1\uffff\2"+
			"\21\1\20\2\uffff\2\21\1\63\1\15\1\21\1\141\1\5\1\21\1\24\1\21\1\14\1"+
			"\21\1\3\1\21\1\141\2\21\1\133\1\21\1\141\1\21\3\uffff\2\21\1\4\1\141"+
			"\1\6\2\21\1\uffff\4\21\1\17\1\uffff\1\21\2\uffff\1\32\1\43\1\uffff\1"+
			"\141\1\52\1\uffff\1\141\2\uffff\4\21\1\uffff\1\21\1\uffff\4\21\1\uffff"+
			"\1\21\1\44\1\114\1\141\3\21\1\12\1\uffff\1\21\2\uffff\1\11\14\uffff\1"+
			"\7\1\22\1\7\3\uffff\1\10\6\uffff\2\21\2\uffff\2\21\1\141\3\uffff\1\42"+
			"\1\21\1\uffff\1\21\1\23\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
	static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
	static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
	static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
	static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
	static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
	static final short[][] DFA216_transition;

	static {
		int numStates = DFA216_transitionS.length;
		DFA216_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
		}
	}

	protected class DFA216 extends DFA {

		public DFA216(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 216;
			this.eot = DFA216_eot;
			this.eof = DFA216_eof;
			this.min = DFA216_min;
			this.max = DFA216_max;
			this.accept = DFA216_accept;
			this.special = DFA216_special;
			this.transition = DFA216_transition;
		}
		@Override
		public String getDescription() {
			return "469:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA216_1 = input.LA(1);
						 
						int index216_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred288_Delphi()) ) {s = 100;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA216_2 = input.LA(1);
						 
						int index216_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred289_Delphi()) ) {s = 101;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA216_3 = input.LA(1);
						 
						int index216_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred290_Delphi()) ) {s = 102;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA216_4 = input.LA(1);
						 
						int index216_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred291_Delphi()) ) {s = 103;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA216_5 = input.LA(1);
						 
						int index216_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred292_Delphi()) ) {s = 104;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA216_6 = input.LA(1);
						 
						int index216_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred293_Delphi()) ) {s = 105;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA216_7 = input.LA(1);
						 
						int index216_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred294_Delphi()) ) {s = 106;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA216_8 = input.LA(1);
						 
						int index216_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred295_Delphi()) ) {s = 107;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA216_9 = input.LA(1);
						 
						int index216_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred296_Delphi()) ) {s = 108;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA216_10 = input.LA(1);
						 
						int index216_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred297_Delphi()) ) {s = 109;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA216_11 = input.LA(1);
						 
						int index216_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred298_Delphi()) ) {s = 110;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA216_12 = input.LA(1);
						 
						int index216_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred299_Delphi()) ) {s = 111;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA216_13 = input.LA(1);
						 
						int index216_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred302_Delphi()) ) {s = 112;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA216_14 = input.LA(1);
						 
						int index216_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 113;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA216_15 = input.LA(1);
						 
						int index216_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 113;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA216_16 = input.LA(1);
						 
						int index216_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 114;}
						else if ( (synpred305_Delphi()) ) {s = 17;}
						 
						input.seek(index216_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA216_18 = input.LA(1);
						 
						int index216_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_18);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA216_19 = input.LA(1);
						 
						int index216_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_19);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA216_20 = input.LA(1);
						 
						int index216_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_20);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA216_26 = input.LA(1);
						 
						int index216_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_26);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA216_34 = input.LA(1);
						 
						int index216_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_34);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA216_35 = input.LA(1);
						 
						int index216_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_35);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA216_36 = input.LA(1);
						 
						int index216_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_36);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA216_39 = input.LA(1);
						 
						int index216_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_39);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA216_40 = input.LA(1);
						 
						int index216_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_40);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA216_42 = input.LA(1);
						 
						int index216_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_42);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA216_48 = input.LA(1);
						 
						int index216_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_48);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA216_51 = input.LA(1);
						 
						int index216_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_51);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA216_53 = input.LA(1);
						 
						int index216_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_53);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA216_76 = input.LA(1);
						 
						int index216_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_76);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA216_91 = input.LA(1);
						 
						int index216_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_91);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA216_97 = input.LA(1);
						 
						int index216_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index216_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 216, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA227_eotS =
		"\151\uffff";
	static final String DFA227_eofS =
		"\1\1\150\uffff";
	static final String DFA227_minS =
		"\1\4\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0\6\uffff"+
		"\1\0\37\uffff";
	static final String DFA227_maxS =
		"\1\u00c9\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0"+
		"\6\uffff\1\0\37\uffff";
	static final String DFA227_acceptS =
		"\1\uffff\1\2\146\uffff\1\1";
	static final String DFA227_specialS =
		"\3\uffff\1\0\55\uffff\1\1\4\uffff\1\2\6\uffff\1\3\4\uffff\1\4\6\uffff"+
		"\1\5\37\uffff}>";
	static final String[] DFA227_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\1\75\1\1\1\uffff\7\1\1\uffff"+
			"\5\1\1\uffff\4\1\1\uffff\2\1\1\66\2\1\5\uffff\13\1\1\uffff\3\1\2\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\7\1\1\uffff\2\1\1\61\2\uffff\3\1\1\111\1\3\20"+
			"\1\3\uffff\4\1\1\102\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\10\1\1\uffff"+
			"\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
	static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
	static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
	static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
	static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
	static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
	static final short[][] DFA227_transition;

	static {
		int numStates = DFA227_transitionS.length;
		DFA227_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
		}
	}

	protected class DFA227 extends DFA {

		public DFA227(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 227;
			this.eot = DFA227_eot;
			this.eof = DFA227_eof;
			this.min = DFA227_min;
			this.max = DFA227_max;
			this.accept = DFA227_accept;
			this.special = DFA227_special;
			this.transition = DFA227_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 493:88: ( designatorItem )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA227_3 = input.LA(1);
						 
						int index227_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA227_49 = input.LA(1);
						 
						int index227_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_49);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA227_54 = input.LA(1);
						 
						int index227_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_54);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA227_61 = input.LA(1);
						 
						int index227_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_61);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA227_66 = input.LA(1);
						 
						int index227_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_66);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA227_73 = input.LA(1);
						 
						int index227_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index227_73);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 227, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA257_eotS =
		"\146\uffff";
	static final String DFA257_eofS =
		"\1\2\145\uffff";
	static final String DFA257_minS =
		"\1\4\1\0\144\uffff";
	static final String DFA257_maxS =
		"\1\u00c9\1\0\144\uffff";
	static final String DFA257_acceptS =
		"\2\uffff\1\3\141\uffff\1\1\1\2";
	static final String DFA257_specialS =
		"\1\uffff\1\0\144\uffff}>";
	static final String[] DFA257_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA257_eot = DFA.unpackEncodedString(DFA257_eotS);
	static final short[] DFA257_eof = DFA.unpackEncodedString(DFA257_eofS);
	static final char[] DFA257_min = DFA.unpackEncodedStringToUnsignedChars(DFA257_minS);
	static final char[] DFA257_max = DFA.unpackEncodedStringToUnsignedChars(DFA257_maxS);
	static final short[] DFA257_accept = DFA.unpackEncodedString(DFA257_acceptS);
	static final short[] DFA257_special = DFA.unpackEncodedString(DFA257_specialS);
	static final short[][] DFA257_transition;

	static {
		int numStates = DFA257_transitionS.length;
		DFA257_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA257_transition[i] = DFA.unpackEncodedString(DFA257_transitionS[i]);
		}
	}

	protected class DFA257 extends DFA {

		public DFA257(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 257;
			this.eot = DFA257_eot;
			this.eof = DFA257_eof;
			this.min = DFA257_min;
			this.max = DFA257_max;
			this.accept = DFA257_accept;
			this.special = DFA257_special;
			this.transition = DFA257_transition;
		}
		@Override
		public String getDescription() {
			return "582:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA257_1 = input.LA(1);
						 
						int index257_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred382_Delphi()) ) {s = 100;}
						else if ( (synpred384_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index257_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 257, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA290_eotS =
		"\u00a5\uffff";
	static final String DFA290_eofS =
		"\1\1\1\uffff\1\1\1\14\1\uffff\1\14\1\uffff\4\1\2\uffff\2\1\1\uffff\1\14"+
		"\3\uffff\2\1\1\uffff\4\1\3\uffff\7\1\1\uffff\1\1\1\105\3\uffff\1\1\2\uffff"+
		"\1\1\1\uffff\1\1\1\uffff\2\1\5\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"+
		"\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff"+
		"\1\1\1\uffff\7\1\5\uffff\1\1\1\uffff\1\1\1\uffff\3\1\2\uffff\1\1\7\uffff"+
		"\1\1\3\uffff\7\1\1\uffff\2\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
		"\5\1\1\uffff\3\1\1\uffff\11\1";
	static final String DFA290_minS =
		"\1\31\1\uffff\1\6\1\4\1\u00ae\1\4\1\0\4\6\1\0\1\uffff\1\6\1\4\1\6\1\4"+
		"\2\0\1\uffff\2\6\1\0\4\6\3\0\1\6\6\7\1\u00ae\1\7\1\4\1\7\1\u00ae\1\7\1"+
		"\4\2\0\1\6\1\0\1\6\1\0\2\6\4\0\2\6\7\0\1\7\1\0\1\6\1\0\1\uffff\1\6\1\7"+
		"\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\7\1\u00ae\2\7\1\0\1\7\1\u00ae\1"+
		"\6\7\7\1\u00ae\1\7\2\0\1\6\1\0\1\6\1\0\1\6\1\7\2\6\1\0\1\7\7\0\1\4\1\7"+
		"\2\0\1\6\6\7\1\u00ae\2\7\1\u00ae\1\6\7\7\1\u00ae\1\7\2\0\1\7\2\6\1\7\1"+
		"\6\2\7\1\u00ae\3\7\1\u00ae\1\6\10\7";
	static final String DFA290_maxS =
		"\1\u008d\1\uffff\1\u00c8\1\u00c9\1\u00ae\1\u00c9\1\0\4\u00c8\1\0\1\uffff"+
		"\4\u00c9\2\0\1\uffff\2\u00c8\1\0\4\u00c8\3\0\1\u00c8\6\u00c7\1\u00ae\1"+
		"\u00c7\1\u00c9\1\u00c7\1\u00ae\1\u00c7\1\u00c9\2\0\1\u00c8\1\0\1\u00c8"+
		"\1\0\2\u00c8\4\0\1\u00c8\1\u00c9\7\0\1\u00c7\1\0\1\u00c9\1\0\1\uffff\1"+
		"\u00c9\1\u00c7\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c7"+
		"\1\u00ae\2\u00c7\1\0\1\u00c7\1\u00ae\1\u00c8\7\u00c7\1\u00ae\1\u00c7\2"+
		"\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c8\1\0\1\u00c7"+
		"\7\0\1\u00c9\1\u00c7\2\0\1\u00c8\6\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c8"+
		"\7\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00c8\1\u00c9\1\u00c7\1\u00c9\2"+
		"\u00c7\1\u00ae\3\u00c7\1\u00ae\1\u00c8\10\u00c7";
	static final String DFA290_acceptS =
		"\1\uffff\1\2\12\uffff\1\1\6\uffff\1\1\61\uffff\1\1\137\uffff";
	static final String DFA290_specialS =
		"\6\uffff\1\0\4\uffff\1\42\5\uffff\1\1\1\43\3\uffff\1\46\4\uffff\1\45\1"+
		"\47\1\50\16\uffff\1\2\1\44\1\uffff\1\51\1\uffff\1\53\2\uffff\1\10\1\7"+
		"\1\11\1\13\2\uffff\1\32\1\33\1\31\1\34\1\36\1\37\1\40\1\uffff\1\41\1\uffff"+
		"\1\5\3\uffff\1\3\1\uffff\1\55\1\uffff\1\56\1\uffff\1\14\1\uffff\1\6\4"+
		"\uffff\1\35\14\uffff\1\52\1\54\1\uffff\1\15\1\uffff\1\17\4\uffff\1\21"+
		"\1\uffff\1\22\1\20\1\23\1\24\1\25\1\26\1\27\2\uffff\1\16\1\12\25\uffff"+
		"\1\30\1\4\25\uffff}>";
	static final String[] DFA290_transitionS = {
			"\1\1\10\uffff\1\1\5\uffff\1\2\14\uffff\1\1\25\uffff\1\1\13\uffff\1\1"+
			"\1\uffff\1\1\25\uffff\1\1\35\uffff\1\1",
			"",
			"\1\5\1\uffff\1\5\6\uffff\1\5\4\uffff\1\5\10\uffff\2\5\2\uffff\1\5\22"+
			"\uffff\1\5\1\uffff\1\5\5\uffff\1\5\15\uffff\1\5\1\uffff\1\5\13\uffff"+
			"\1\5\2\uffff\1\5\2\uffff\1\5\5\uffff\1\5\2\uffff\1\5\1\uffff\1\5\7\uffff"+
			"\1\5\15\uffff\2\5\1\uffff\2\5\1\uffff\1\5\17\uffff\3\5\26\uffff\1\3\21"+
			"\uffff\1\5\3\uffff\1\5\3\uffff\1\4",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\6\2\1\5\uffff\5\1\1\10\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1"+
			"\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\13\1\uffff"+
			"\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6"+
			"\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\20",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\21\2\1\5\uffff\5\1\1\10\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1"+
			"\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\22\1\uffff"+
			"\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6"+
			"\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\24\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\25\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\26\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\33\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\34\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\35\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"",
			"\1\46\1\1\1\41\2\1\4\uffff\1\46\1\1\3\uffff\1\46\2\uffff\3\1\3\uffff"+
			"\2\46\1\1\1\uffff\1\46\3\uffff\5\1\10\uffff\1\1\1\uffff\1\46\1\uffff"+
			"\1\46\2\uffff\1\1\1\uffff\1\1\1\46\4\uffff\2\1\1\uffff\1\1\5\uffff\1"+
			"\46\1\1\1\46\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\46\2\1"+
			"\1\46\2\1\1\46\1\uffff\1\1\1\uffff\2\1\1\36\2\uffff\1\46\1\1\1\46\3\uffff"+
			"\1\1\2\uffff\1\1\1\37\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\2\46\1\1\1\42\1\46\1\uffff\1\46\4\uffff\1\1\3\uffff\5\1\2\uffff\2\46"+
			"\1\40\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\44\1\1\3\uffff"+
			"\1\1\14\uffff\1\43\3\uffff\1\46\2\uffff\1\1\1\45\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\4\1\1\47\1\uffff\1"+
			"\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff"+
			"\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6"+
			"\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\52\1\1\1\52\1\uffff\1\1\4\uffff\1\52\1\1\3\uffff\1\52\3\uffff\2\1"+
			"\3\uffff\2\52\1\1\1\uffff\1\52\4\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1"+
			"\uffff\1\52\1\uffff\1\52\2\uffff\1\1\2\uffff\1\52\4\uffff\2\1\1\uffff"+
			"\1\1\5\uffff\1\52\1\1\1\52\1\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1"+
			"\uffff\1\52\2\1\1\52\2\1\1\52\1\uffff\1\1\1\uffff\2\1\1\52\2\uffff\1"+
			"\52\1\1\1\52\6\uffff\1\1\1\52\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\52"+
			"\1\uffff\2\52\1\uffff\1\52\4\uffff\1\53\4\uffff\4\1\2\uffff\3\52\3\uffff"+
			"\1\1\4\uffff\1\1\14\uffff\1\1\1\50\1\1\3\uffff\1\1\14\uffff\1\52\3\uffff"+
			"\1\52\2\uffff\1\1\1\51\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\54\2\1\5\uffff\5\1\1\10\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1"+
			"\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\55\1\uffff"+
			"\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6"+
			"\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\56\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\57\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\60\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\61\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\62\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\63\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\64\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\65\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\66\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\67\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\15\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\70\1\1\7\uffff\2\1\1\uffff\1"+
			"\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\71\1"+
			"\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\72\1\uffff\4\1\2\uffff\3\1\26"+
			"\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\73\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\74\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\75\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\76\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\77\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\100\1\uffff\4\1\64\uffff\1\1",
			"\1\101",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\102\1\uffff\4\1\64\uffff\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\6\1\1\103\1\uffff\5"+
			"\1\1\uffff\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\104\1"+
			"\uffff\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff"+
			"\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
			"\1\107",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\110\1\uffff\4\1\1"+
			"\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\111\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\112\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\113\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\114\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\115\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\116\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\117\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\120\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff"+
			"\1\123\22\uffff\1\123\1\uffff\1\123\5\uffff\1\123\15\uffff\1\123\1\uffff"+
			"\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff\1\123\2\uffff"+
			"\1\123\1\uffff\1\123\7\uffff\1\123\15\uffff\2\123\1\uffff\2\123\1\uffff"+
			"\1\123\17\uffff\3\123\26\uffff\1\121\21\uffff\1\123\3\uffff\1\123\3\uffff"+
			"\1\122",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\124\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\4"+
			"\uffff\4\1\2\uffff\3\1\3\uffff\1\1\4\uffff\1\1\14\uffff\3\1\3\uffff\1"+
			"\1\14\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\125\1\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\136\1\1\1\133\2\1\4\uffff\1\136\1\1\3\uffff\1\136\2\uffff\3\1\3\uffff"+
			"\2\136\1\1\1\uffff\1\136\3\uffff\2\1\1\uffff\2\1\10\uffff\1\1\1\uffff"+
			"\1\136\1\uffff\1\136\2\uffff\1\1\1\uffff\1\1\1\136\4\uffff\2\1\1\uffff"+
			"\1\1\5\uffff\1\136\1\1\1\136\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1"+
			"\1\uffff\1\136\2\1\1\136\2\1\1\136\1\uffff\1\1\1\uffff\2\1\1\130\2\uffff"+
			"\1\136\1\1\1\136\3\uffff\1\1\2\uffff\1\1\1\131\1\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\136\1\1\1\134\1\136\1\uffff\1\136\4\uffff"+
			"\1\1\3\uffff\5\1\2\uffff\2\136\1\132\3\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\14\uffff\1\1\1\126\1\1\3\uffff\1\1\14\uffff\1\135\3\uffff\1\136"+
			"\2\uffff\1\1\1\127\1\1",
			"\1\uffff",
			"",
			"\1\141\1\1\1\141\1\uffff\1\1\4\uffff\1\141\1\1\3\uffff\1\141\3\uffff"+
			"\2\1\3\uffff\2\141\1\1\1\uffff\1\141\4\uffff\1\1\1\uffff\1\1\11\uffff"+
			"\1\1\1\uffff\1\141\1\uffff\1\141\2\uffff\1\1\2\uffff\1\141\4\uffff\2"+
			"\1\1\uffff\1\1\5\uffff\1\141\1\1\1\141\1\1\3\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\1\1\uffff\1\141\2\1\1\141\2\1\1\141\1\uffff\1\1\1\uffff\2\1"+
			"\1\141\2\uffff\1\141\1\1\1\141\6\uffff\1\1\1\141\1\1\1\uffff\1\1\5\uffff"+
			"\1\1\4\uffff\2\141\1\uffff\2\141\1\uffff\1\141\4\uffff\1\1\4\uffff\4"+
			"\1\2\uffff\3\141\3\uffff\1\1\4\uffff\1\1\14\uffff\1\1\1\137\1\1\3\uffff"+
			"\1\1\14\uffff\1\141\3\uffff\1\141\2\uffff\1\1\1\140\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\56\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\142\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\60\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\143\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\144\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\145\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\146\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\147\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\151",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\152\5\uffff\1\1\6\uffff\1\1\2\uffff"+
			"\1\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1"+
			"\13\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\154\1\uffff\4\1\64\uffff\1\1",
			"\1\155",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\103\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\153\1\1\7\uffff\2\1"+
			"\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\71\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\156\1\uffff\4\1\2"+
			"\uffff\3\1\26\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\157\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\160\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\161\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\162\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\163\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\164\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
			"\1\166",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\115\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\167\7\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\117\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\170\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20"+
			"\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\u0081\1\1\1\174\2\1\4\uffff\1\u0081\1\1\3\uffff\1\u0081\2\uffff\3"+
			"\1\3\uffff\2\u0081\1\1\1\uffff\1\u0081\3\uffff\5\1\10\uffff\1\1\1\uffff"+
			"\1\u0081\1\uffff\1\u0081\2\uffff\1\1\1\uffff\1\1\1\u0081\4\uffff\2\1"+
			"\1\uffff\1\1\5\uffff\1\u0081\1\1\1\u0081\1\1\2\uffff\2\1\1\uffff\1\1"+
			"\2\uffff\1\1\1\uffff\1\u0081\2\1\1\u0081\2\1\1\u0081\1\uffff\1\1\1\uffff"+
			"\2\1\1\171\2\uffff\1\u0081\1\1\1\u0081\3\uffff\1\1\2\uffff\1\1\1\172"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u0081\1\1\1\175\1"+
			"\u0081\1\uffff\1\u0081\4\uffff\1\1\3\uffff\5\1\2\uffff\2\u0081\1\173"+
			"\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\177\1\1\3\uffff\1"+
			"\1\14\uffff\1\176\3\uffff\1\u0081\2\uffff\1\1\1\u0080\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\u008a\1\1\1\u0087\2\1\4\uffff\1\u008a\1\1\3\uffff\1\u008a\2\uffff"+
			"\3\1\3\uffff\2\u008a\1\1\1\uffff\1\u008a\3\uffff\2\1\1\uffff\2\1\10\uffff"+
			"\1\1\1\uffff\1\u008a\1\uffff\1\u008a\2\uffff\1\1\1\uffff\1\1\1\u008a"+
			"\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u008a\1\1\1\u008a\1\1\2\uffff\2\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u008a\2\1\1\u008a\2\1\1\u008a\1\uffff"+
			"\1\1\1\uffff\2\1\1\u0084\2\uffff\1\u008a\1\1\1\u008a\3\uffff\1\1\2\uffff"+
			"\1\1\1\u0085\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u008a"+
			"\1\1\1\u0088\1\u008a\1\uffff\1\u008a\4\uffff\1\1\3\uffff\5\1\2\uffff"+
			"\2\u008a\1\u0086\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\u0082"+
			"\1\1\3\uffff\1\1\14\uffff\1\u0089\3\uffff\1\u008a\2\uffff\1\1\1\u0083"+
			"\1\1",
			"\1\u008d\1\uffff\1\u008d\6\uffff\1\u008d\4\uffff\1\u008d\10\uffff\2"+
			"\u008d\2\uffff\1\u008d\22\uffff\1\u008d\1\uffff\1\u008d\5\uffff\1\u008d"+
			"\15\uffff\1\u008d\1\uffff\1\u008d\13\uffff\1\u008d\2\uffff\1\u008d\2"+
			"\uffff\1\u008d\5\uffff\1\u008d\2\uffff\1\u008d\1\uffff\1\u008d\7\uffff"+
			"\1\u008d\15\uffff\2\u008d\1\uffff\2\u008d\1\uffff\1\u008d\17\uffff\3"+
			"\u008d\26\uffff\1\u008b\21\uffff\1\u008d\3\uffff\1\u008d\3\uffff\1\u008c",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\u008e\1\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\u008f\1\uffff\4\1"+
			"\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff"+
			"\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\150\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\70\1\1\7\uffff\2\1\1\uffff\1"+
			"\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\71\1"+
			"\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26\uffff\1\1\21"+
			"\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\7\uffff\1\1\54\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\u0090",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\u0093",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\152\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0091\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u0092\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26"+
			"\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\u0095",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1"+
			"\64\uffff\1\1",
			"\1\u0098\1\uffff\1\u0098\6\uffff\1\u0098\4\uffff\1\u0098\10\uffff\2"+
			"\u0098\2\uffff\1\u0098\22\uffff\1\u0098\1\uffff\1\u0098\5\uffff\1\u0098"+
			"\15\uffff\1\u0098\1\uffff\1\u0098\13\uffff\1\u0098\2\uffff\1\u0098\2"+
			"\uffff\1\u0098\5\uffff\1\u0098\2\uffff\1\u0098\1\uffff\1\u0098\7\uffff"+
			"\1\u0098\15\uffff\2\u0098\1\uffff\2\u0098\1\uffff\1\u0098\17\uffff\3"+
			"\u0098\26\uffff\1\u0096\21\uffff\1\u0098\3\uffff\1\u0098\3\uffff\1\u0097",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u0099\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\4\uffff\1\1\14\uffff\3\1\3\uffff"+
			"\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\u00a2\1\1\1\u009f\2\1\4\uffff\1\u00a2\1\1\3\uffff\1\u00a2\2\uffff"+
			"\3\1\3\uffff\2\u00a2\1\1\1\uffff\1\u00a2\3\uffff\2\1\1\uffff\2\1\10\uffff"+
			"\1\1\1\uffff\1\u00a2\1\uffff\1\u00a2\2\uffff\1\1\1\uffff\1\1\1\u00a2"+
			"\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00a2\1\1\1\u00a2\1\1\2\uffff\2\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00a2\2\1\1\u00a2\2\1\1\u00a2\1\uffff"+
			"\1\1\1\uffff\2\1\1\u009c\2\uffff\1\u00a2\1\1\1\u00a2\3\uffff\1\1\2\uffff"+
			"\1\1\1\u009d\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u00a2"+
			"\1\1\1\u00a0\1\u00a2\1\uffff\1\u00a2\4\uffff\1\1\3\uffff\5\1\2\uffff"+
			"\2\u00a2\1\u009e\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\u009a"+
			"\1\1\3\uffff\1\1\14\uffff\1\u00a1\3\uffff\1\u00a2\2\uffff\1\1\1\u009b"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\u00a3",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\152\5\uffff\1\1\6\uffff\1\1\2\uffff"+
			"\1\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1"+
			"\13\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\u00a4",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u0094\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\153\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\71\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26"+
			"\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff"+
			"\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\105\1\uffff\4\1\64\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff"+
			"\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105"+
			"\1\uffff\4\1\64\uffff\1\1"
	};

	static final short[] DFA290_eot = DFA.unpackEncodedString(DFA290_eotS);
	static final short[] DFA290_eof = DFA.unpackEncodedString(DFA290_eofS);
	static final char[] DFA290_min = DFA.unpackEncodedStringToUnsignedChars(DFA290_minS);
	static final char[] DFA290_max = DFA.unpackEncodedStringToUnsignedChars(DFA290_maxS);
	static final short[] DFA290_accept = DFA.unpackEncodedString(DFA290_acceptS);
	static final short[] DFA290_special = DFA.unpackEncodedString(DFA290_specialS);
	static final short[][] DFA290_transition;

	static {
		int numStates = DFA290_transitionS.length;
		DFA290_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA290_transition[i] = DFA.unpackEncodedString(DFA290_transitionS[i]);
		}
	}

	protected class DFA290 extends DFA {

		public DFA290(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 290;
			this.eot = DFA290_eot;
			this.eof = DFA290_eof;
			this.min = DFA290_min;
			this.max = DFA290_max;
			this.accept = DFA290_accept;
			this.special = DFA290_special;
			this.transition = DFA290_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 707:38: ( '.' ident )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA290_6 = input.LA(1);
						 
						int index290_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 19;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_6);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA290_17 = input.LA(1);
						 
						int index290_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA290_44 = input.LA(1);
						 
						int index290_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_44);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA290_72 = input.LA(1);
						 
						int index290_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_72);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA290_143 = input.LA(1);
						 
						int index290_143 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_143);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA290_68 = input.LA(1);
						 
						int index290_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_68);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA290_80 = input.LA(1);
						 
						int index290_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_80);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA290_53 = input.LA(1);
						 
						int index290_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_53);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA290_52 = input.LA(1);
						 
						int index290_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_52);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA290_54 = input.LA(1);
						 
						int index290_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_54);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA290_120 = input.LA(1);
						 
						int index290_120 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_120);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA290_55 = input.LA(1);
						 
						int index290_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_55);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA290_78 = input.LA(1);
						 
						int index290_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_78);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA290_101 = input.LA(1);
						 
						int index290_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_101);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA290_119 = input.LA(1);
						 
						int index290_119 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_119);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA290_103 = input.LA(1);
						 
						int index290_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_103);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA290_111 = input.LA(1);
						 
						int index290_111 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_111);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA290_108 = input.LA(1);
						 
						int index290_108 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_108);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA290_110 = input.LA(1);
						 
						int index290_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_110);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA290_112 = input.LA(1);
						 
						int index290_112 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_112);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA290_113 = input.LA(1);
						 
						int index290_113 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_113);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA290_114 = input.LA(1);
						 
						int index290_114 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_114);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA290_115 = input.LA(1);
						 
						int index290_115 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_115);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA290_116 = input.LA(1);
						 
						int index290_116 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_116);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA290_142 = input.LA(1);
						 
						int index290_142 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_142);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA290_60 = input.LA(1);
						 
						int index290_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_60);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA290_58 = input.LA(1);
						 
						int index290_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_58);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA290_59 = input.LA(1);
						 
						int index290_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_59);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA290_61 = input.LA(1);
						 
						int index290_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_61);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA290_85 = input.LA(1);
						 
						int index290_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_85);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA290_62 = input.LA(1);
						 
						int index290_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_62);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA290_63 = input.LA(1);
						 
						int index290_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_63);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA290_64 = input.LA(1);
						 
						int index290_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_64);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA290_66 = input.LA(1);
						 
						int index290_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_66);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA290_11 = input.LA(1);
						 
						int index290_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 19;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_11);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA290_18 = input.LA(1);
						 
						int index290_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_18);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA290_45 = input.LA(1);
						 
						int index290_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_45);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA290_27 = input.LA(1);
						 
						int index290_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_27);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA290_22 = input.LA(1);
						 
						int index290_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_22);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA290_28 = input.LA(1);
						 
						int index290_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_28);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA290_29 = input.LA(1);
						 
						int index290_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_29);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA290_47 = input.LA(1);
						 
						int index290_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_47);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA290_98 = input.LA(1);
						 
						int index290_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_98);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA290_49 = input.LA(1);
						 
						int index290_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_49);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA290_99 = input.LA(1);
						 
						int index290_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_99);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA290_74 = input.LA(1);
						 
						int index290_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_74);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA290_76 = input.LA(1);
						 
						int index290_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred478_Delphi()) ) {s = 69;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index290_76);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 290, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_program_in_file84 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_library_in_file88 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_in_file92 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageE_in_file96 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_programHead_in_program159 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x5000000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_program164 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_block_in_program168 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_program170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROGRAM_in_programHead224 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceName_in_programHead226 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_programParmSeq_in_programHead229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_programHead233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_programParmSeq284 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0042DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_programParmSeq287 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_programParmSeq290 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_programParmSeq292 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_programParmSeq299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_libraryHead_in_library357 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x5000000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_library360 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_block_in_library364 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_library366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_libraryHead420 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceName_in_libraryHead422 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_libraryHead425 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_libraryHead429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageHead_in_packageE494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_requiresClause_in_packageE496 = new BitSet(new long[]{0x0002000020000000L});
	public static final BitSet FOLLOW_containsClause_in_packageE499 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_packageE503 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_packageE505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKAGE_in_packageHead559 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceName_in_packageHead561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_packageHead563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unitHead_in_unit624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_unitInterface_in_unit626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_unitImplementation_in_unit628 = new BitSet(new long[]{0x0002000000080000L,0x0000000000004000L});
	public static final BitSet FOLLOW_unitBlock_in_unit630 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_unit632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNIT_in_unitHead689 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceName_in_unitHead691 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_unitHead694 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_unitHead698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERFACE_in_unitInterface763 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x5000000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitInterface766 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x4000000022000200L});
	public static final BitSet FOLLOW_interfaceDecl_in_unitInterface771 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x4000000022000200L});
	public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation836 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x5000000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitImplementation839 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_declSection_in_unitImplementation844 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_unitInitialization_in_unitBlock918 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_unitBlock920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_unitBlock953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_END_in_unitBlock986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1033 = new BitSet(new long[]{0xB05001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_unitInitialization1035 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1089 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_unitFinalization1091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_containsClause1145 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REQUIRES_in_requiresClause1198 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesClause1255 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceNameList_in_usesClause1257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesFileClause1316 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1370 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1373 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1375 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_namespaceFileName1439 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1502 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceNameList1505 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1507 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_block1584 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_blockBody_in_block1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_blockBody1647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_blockBody1680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labelDeclSection_in_declSection1734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_declSection1767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_declSection1800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_declSection1833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_declSection1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_declSection1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_declSection1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_declSection1965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_interfaceDecl2017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_interfaceDecl2050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_interfaceDecl2083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_interfaceDecl2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_in_labelDeclSection2264 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000E00000E0002DL,0x0000000000000011L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2266 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_labelDeclSection2269 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000E00000E0002DL,0x0000000000000011L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2271 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_labelDeclSection2275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constKey_in_constSection2328 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_constDeclaration_in_constSection2331 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_customAttribute_in_constDeclaration2486 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_constDeclaration2490 = new BitSet(new long[]{0x0004000001000000L});
	public static final BitSet FOLLOW_COLON_in_constDeclaration2493 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_constDeclaration2495 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_constDeclaration2499 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_constDeclaration2501 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2504 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constDeclaration2508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeSection2575 = new BitSet(new long[]{0x1050000260108140L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2577 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2580 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2646 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2650 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2652 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2654 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2657 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_typeDeclaration2661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varKey_in_varSection2738 = new BitSet(new long[]{0x1050000260108140L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2740 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2743 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_customAttribute_in_varDeclaration2903 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_identListFlat_in_varDeclaration2907 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_varDeclaration2909 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_varDeclaration2911 = new BitSet(new long[]{0x0024000400000010L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2914 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2919 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_varDeclaration2923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec2995 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_varValueSpec2997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3030 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_varValueSpec3065 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORTS_in_exportsSection3118 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_exportsSection3120 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3122 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_exportsSection3125 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_exportsSection3127 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3129 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportsSection3133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_exportItem3189 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x4000400000E0042DL,0x0000000000000111L});
	public static final BitSet FOLLOW_formalParameterList_in_exportItem3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_exportItem3196 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INDEX_in_exportItem3201 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_exportItem3203 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NAME_in_exportItem3208 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_exportItem3210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RESIDENT_in_exportItem3215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_typeDecl3277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_typeDecl3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_typeDecl3343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_typeDecl3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_typeDecl3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeDecl3443 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_typeDecl3447 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericPostfix_in_typeDecl3450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleType_in_typeDecl3485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKED_in_strucType3542 = new BitSet(new long[]{0x0800002000800200L,0x0000001000010000L,0x0000000000004002L});
	public static final BitSet FOLLOW_strucTypePart_in_strucType3546 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayType_in_strucTypePart3602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setType_in_strucTypePart3635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fileType_in_strucTypePart3668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classDecl_in_strucTypePart3701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayType3759 = new BitSet(new long[]{0x0000000000000000L,0x0000002000080000L});
	public static final BitSet FOLLOW_LBRACK_in_arrayType3762 = new BitSet(new long[]{0x12500102E2118140L,0x941702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3765 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_arrayType3770 = new BitSet(new long[]{0x12500102E2118140L,0x941702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3773 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_arrayType3779 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_arrayType3783 = new BitSet(new long[]{0x1A500122E8918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_arraySubType_in_arrayType3785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_arrayIndex3911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_arrayIndex3944 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_arrayIndex3946 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_arrayIndex3948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_arraySubType4002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDecl_in_arraySubType4035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setType4093 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_setType4095 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_setType4097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_fileType4171 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_fileType4174 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_fileType4176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_pointerType4232 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_pointerType4234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER_in_pointerType4267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_stringType4322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_stringType4325 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_stringType4327 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_stringType4329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_stringType4369 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_ANSISTRING_in_stringType4373 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_codePageNumber_in_stringType4376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_codePageNumber4429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000A00000000000L});
	public static final BitSet FOLLOW_intNum_in_codePageNumber4431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_codePageNumber4433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_procedureType4485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureReference_in_procedureType4551 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4606 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_methodType4608 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_OBJECT_in_methodType4610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4656 = new BitSet(new long[]{0x0040000000400002L,0x0000400000000000L,0x0000000000102808L});
	public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4661 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_simpleProcedureType4665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFERENCE_in_procedureReference4714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_procedureReference4716 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4763 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4766 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4770 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4773 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4825 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIANT_in_variantType4884 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_simpleType4940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_simpleType4973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enumType_in_simpleType5006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5059 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_subRangeType5062 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_enumType5123 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_enumType5125 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5128 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_enumType5130 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_enumType5135 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_enumType5137 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5140 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_enumType5142 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_enumType5149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_typeId5208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5260 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_genericDefinition5321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_complexGenericDefinition_in_genericDefinition5354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constrainedGenericDefinition_in_genericDefinition5387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_simpleGenericDefinition5429 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5431 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_simpleGenericDefinition5434 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5436 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_simpleGenericDefinition5440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_complexGenericDefinition5481 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_qualifiedIdent_in_complexGenericDefinition5483 = new BitSet(new long[]{0x0000000002000000L,0x0000000004000010L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5486 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_complexGenericDefinition5491 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_qualifiedIdent_in_complexGenericDefinition5493 = new BitSet(new long[]{0x0000000002000000L,0x0000000004000010L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5496 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_complexGenericDefinition5502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_constrainedGenericDefinition5539 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constrainedGenericDefinition5544 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_GT_in_constrainedGenericDefinition5550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_constrainedGeneric5597 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_constrainedGeneric5600 = new BitSet(new long[]{0x1050000270908140L,0x8002029049001400L,0x0000400000E0002FL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5602 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_constrainedGeneric5605 = new BitSet(new long[]{0x1050000270908140L,0x8002029049001400L,0x0000400000E0002FL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5607 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_genericConstraint5659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_genericConstraint5692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_genericConstraint5725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericPostfix5809 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5811 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_genericPostfix5814 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5816 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_genericPostfix5820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_classDecl5912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_classDecl5953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl5994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectDecl_in_classDecl6035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_classDecl6076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordHelperDecl_in_classDecl6117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6173 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6175 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6237 = new BitSet(new long[]{0x1052000A78928160L,0x83DA02904B081402L,0x4000400022E0122DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6240 = new BitSet(new long[]{0x1052000A78928140L,0x83DA02904B081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6245 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classItem_in_classTypeDecl6250 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_END_in_classTypeDecl6254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6305 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_classParent6465 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6467 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_classParent6470 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6472 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_classParent6476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classItem6544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classItem6577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_classItem6610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classItem6643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classItem6685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classItem6727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classItem6761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classItem6765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperDecl6815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_classHelperDecl6817 = new BitSet(new long[]{0x8000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classHelperDecl6820 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_classHelperDecl6824 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_classHelperDecl6826 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x4000000002400000L});
	public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6829 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x4000000002400000L});
	public static final BitSet FOLLOW_END_in_classHelperDecl6833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classHelperItem6898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classHelperItem6931 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classHelperItem6964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperItem6998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classHelperItem7002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7050 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7053 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl7058 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl7063 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_interfaceTypeDecl7067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7158 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7344 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7346 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_interfaceItem7404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_interfaceItem7438 = new BitSet(new long[]{0x0000000000800000L,0x0040000000080000L});
	public static final BitSet FOLLOW_classProperty_in_interfaceItem7442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectDecl7497 = new BitSet(new long[]{0x1052000A70928140L,0x839A02904B081402L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classParent_in_objectDecl7500 = new BitSet(new long[]{0x1052000A70928140L,0x839A029049081402L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_objectItem_in_objectDecl7505 = new BitSet(new long[]{0x1052000A70928140L,0x839A029049081402L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_END_in_objectDecl7509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_objectItem7578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_objectItem7611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_objectItem7644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_recordDecl7699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantRecord_in_recordDecl7732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_simpleRecord7785 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordField_in_simpleRecord7788 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordItem_in_simpleRecord7793 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_END_in_simpleRecord7797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_variantRecord7863 = new BitSet(new long[]{0x1050000260308140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordField_in_variantRecord7866 = new BitSet(new long[]{0x1050000260308140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7870 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_variantRecord7872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordItem7938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordItem7976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordItem8009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordItem8042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_recordItem8075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_recordItem8108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_recordItem8142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000002000000L});
	public static final BitSet FOLLOW_varSection_in_recordItem8146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordField8200 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordField8202 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_recordField8204 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordField8207 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordField8212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordVariantField8302 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantField8304 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantField8306 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordVariantField8309 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantField8314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_recordVariantSection8401 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_ident_in_recordVariantSection8404 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantSection8406 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantSection8410 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_recordVariantSection8412 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0202DL,0x0000000000000311L});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8415 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x0008E00108E0202DL,0x0000000000000311L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8419 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x0008E00108E0202DL,0x0000000000000311L});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8423 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x0008E00108E0202DL,0x0000000000000311L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8427 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x0008E00108E0202DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8481 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_recordVariant8484 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8486 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariant8490 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_recordVariant8492 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0042DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordVariantField_in_recordVariant8495 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0042DL,0x0000000000000111L});
	public static final BitSet FOLLOW_RPAREN_in_recordVariant8499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8553 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_recordHelperDecl8555 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_recordHelperDecl8557 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8560 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_END_in_recordHelperDecl8564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordHelperItem8613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordHelperItem8646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordHelperItem8679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8734 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8739 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_classMethod8743 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_classMethod8745 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8748 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8757 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8760 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8868 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod8877 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_classMethod8879 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8882 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8887 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8891 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8894 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8900 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8903 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9020 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9025 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_classMethod9029 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_classMethod9031 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9034 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod9039 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod9043 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9046 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod9050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classField9181 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_identList_in_classField9185 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classField9187 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_classField9189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classField9191 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_hintingDirective_in_classField9194 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_customAttribute_in_classProperty9301 = new BitSet(new long[]{0x0000000000800000L,0x0040000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classProperty9306 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_PROPERTY_in_classProperty9310 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_classProperty9312 = new BitSet(new long[]{0x0000001201000000L,0x8000000200081400L,0x0000000000202001L,0x0000000000000030L});
	public static final BitSet FOLLOW_classPropertyArray_in_classProperty9315 = new BitSet(new long[]{0x0000001201000000L,0x8000000200001400L,0x0000000000202001L,0x0000000000000030L});
	public static final BitSet FOLLOW_COLON_in_classProperty9320 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9322 = new BitSet(new long[]{0x0000001200000000L,0x8000000200001400L,0x0000000000202001L,0x0000000000000030L});
	public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9327 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x0000000000000030L});
	public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9332 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x0000000000000030L});
	public static final BitSet FOLLOW_SEMI_in_classProperty9336 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9339 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9505 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x4000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9507 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9556 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertyIndex9558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9677 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9712 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier9829 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_classPropertySpecifier9831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier9871 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9912 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_in_classPropertyReadWrite10030 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10035 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10037 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10113 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10118 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10120 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10327 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_PROTECTED_in_visibility10331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10365 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PRIVATE_in_visibility10369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLIC_in_visibility10402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLISHED_in_visibility10435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTOMATED_in_visibility10468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10522 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10524 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10527 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_exportedProcHeading10531 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10534 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10540 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10543 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10578 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10580 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10587 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10590 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDecl10649 = new BitSet(new long[]{0x14E0201C18C81822L,0x0010CC00898C8002L,0x4000000022182A18L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_methodDecl10652 = new BitSet(new long[]{0x14E0201C18C81822L,0x0010CC00898C8002L,0x4000000022182A18L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_methodDecl10657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10717 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10722 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10727 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10729 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10830 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading10839 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10841 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10844 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10849 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10852 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10965 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10969 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading10971 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10973 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10976 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10981 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10984 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_methodName11237 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11240 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_methodName11245 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_methodName11247 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11250 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_methodName11256 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_methodName11258 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDeclHeading_in_procDecl11320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procDecl11322 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0xC400000022102A08L});
	public static final BitSet FOLLOW_functionDirective_in_procDecl11325 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0xC400000022102A08L});
	public static final BitSet FOLLOW_procBody_in_procDecl11330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11396 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11400 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11402 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11509 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11511 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11514 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procDeclHeading11518 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11620 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x4000400000E0042DL,0x0000000000000111L});
	public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_formalParameterList11683 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x4000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_customAttribute_in_formalParameter11747 = new BitSet(new long[]{0x1050000268108140L,0x8002029049001400L,0x4000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_parmType_in_formalParameter11752 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_identListFlat_in_formalParameter11756 = new BitSet(new long[]{0x0004000001000002L});
	public static final BitSet FOLLOW_COLON_in_formalParameter11759 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_formalParameter11761 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_formalParameter11766 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_formalParameter11768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_methodBody11991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodBody11993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORWARD_in_procBody12054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12056 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12059 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_EXTERNAL_in_procBody12097 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x8400000000100808L});
	public static final BitSet FOLLOW_NAME_in_procBody12100 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_procBody12102 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x8400000000100808L});
	public static final BitSet FOLLOW_INDEX_in_procBody12106 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_procBody12108 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x8400000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12113 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x8400000000100808L});
	public static final BitSet FOLLOW_block_in_procBody12149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeList_in_customAttribute12204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12299 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12301 = new BitSet(new long[]{0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12304 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0042DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12311 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_expression12399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12440 = new BitSet(new long[]{0x0004000000000002L,0x0000000804420814L});
	public static final BitSet FOLLOW_relOp_in_expression12443 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12445 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_expression12450 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_expression12452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12503 = new BitSet(new long[]{0x0080000818880800L,0x00100000020C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12506 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12543 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12546 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_anonymousExpression12550 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12552 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x4000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12603 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000080L});
	public static final BitSet FOLLOW_operator_in_simpleExpression12606 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12608 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000080L});
	public static final BitSet FOLLOW_AT2_in_factor12669 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_factor12671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_201_in_factor12704 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_factor12706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_factor12746 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_factor12748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_factor12781 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_factor12783 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_factor12816 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_factor12818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_factor12851 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_factor12853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intNum_in_factor12897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_realNum_in_factor12930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkAsmHexNum_in_factor12963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_factor13006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_factor13039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_factor13072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_factor13105 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_factor13107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13109 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_factor13112 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13117 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_factor13119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_factor13162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_factor13195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_factor13228 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_factor13261 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_factor13263 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_factor13265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13320 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13323 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13325 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13365 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13368 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13370 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_setSection13432 = new BitSet(new long[]{0x12500102E0118140L,0x941702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_setSection13435 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_set_in_setSection13438 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_setSection13446 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_setSection13452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERITED_in_designator13509 = new BitSet(new long[]{0x1050010260118142L,0x800602904F081400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_designator13516 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_typeId_in_designator13520 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_designatorItem_in_designator13527 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_POINTER2_in_designatorItem13580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_designatorItem13613 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_designatorItem13621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_designatorItem13669 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13671 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13674 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13676 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_designatorItem13680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_designatorItem13721 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expressionList_in_designatorItem13723 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_designatorItem13725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_designatorItem13758 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0042DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_designatorItem13761 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13764 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13769 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_designatorItem13771 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13774 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_designatorItem13782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList13859 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_expressionList13862 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_expressionList13864 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13917 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_colonConstruct13919 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13922 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_colonConstruct13924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ifStatement_in_statement14698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseStatement_in_statement14731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repeatStatement_in_statement14764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whileStatement_in_statement14797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forStatement_in_statement14830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withStatement_in_statement14863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tryStatement_in_statement14896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raiseStatement_in_statement14929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_statement14962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_statement14995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_label_in_statement15028 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_statement15030 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_statement15032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleStatement_in_statement15065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_ifStatement15119 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_ifStatement15121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_THEN_in_ifStatement15123 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_ifStatement15125 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_ELSE_in_ifStatement15128 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_ifStatement15130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseStatement15184 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_caseStatement15186 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_caseStatement15188 = new BitSet(new long[]{0x12530102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_caseItem_in_caseStatement15191 = new BitSet(new long[]{0x12530102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_ELSE_in_caseStatement15196 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_caseStatement15198 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseStatement15201 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_caseStatement15207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15264 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_caseItem15267 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15269 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_caseItem15273 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_caseItem15275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseItem15278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_caseLabel15337 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_caseLabel15340 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_caseLabel15342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPEAT_in_repeatStatement15394 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0800E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_repeatStatement15397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_UNTIL_in_repeatStatement15401 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_repeatStatement15403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_whileStatement15454 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_whileStatement15456 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_whileStatement15458 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_whileStatement15460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15513 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_forStatement15515 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15517 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_forStatement15519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_forStatement15521 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_forStatement15523 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15525 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_forStatement15527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15560 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_forStatement15562 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15564 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_forStatement15566 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_forStatement15568 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_forStatement15570 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15572 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_forStatement15574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15607 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083C00L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_forStatement15609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_forStatement15611 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_forStatement15613 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15615 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_forStatement15617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withStatement15669 = new BitSet(new long[]{0x1050010262118540L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_withItem_in_withStatement15671 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_withStatement15673 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_withStatement15675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_withItem15732 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_AS_in_withItem15734 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_withItem15736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_withItem15776 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_withItem15779 = new BitSet(new long[]{0x1050010262118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_withItem15781 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_BEGIN_in_compoundStatement15831 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_compoundStatement15834 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_compoundStatement15838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statementList15904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_statementList15909 = new BitSet(new long[]{0x905001026039C942L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_statementList15912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_designator_in_simpleStatement15966 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_simpleStatement15968 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_simpleStatement15970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GOTO_in_gotoStatement16089 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000E00000E0002DL,0x0000000000000011L});
	public static final BitSet FOLLOW_label_in_gotoStatement16091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_gotoStatement16124 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_gotoStatement16127 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_gotoStatement16129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_gotoStatement16131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_gotoStatement16166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16252 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_constExpression16257 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16297 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16299 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_constExpression16302 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16304 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constExpression16341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_recordConstExpression16385 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordConstExpression16387 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_recordConstExpression16389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16445 = new BitSet(new long[]{0x905801026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16448 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_tryStatement16452 = new BitSet(new long[]{0x905301026039C940L,0x880602D04F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_handlerList_in_tryStatement16454 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16489 = new BitSet(new long[]{0xD05001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16492 = new BitSet(new long[]{0x4000000000000000L});
	public static final BitSet FOLLOW_FINALLY_in_tryStatement16496 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16499 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_handlerList16558 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_handlerList16563 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_handlerList16565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_handlerList16600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_handler16658 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_handlerIdent_in_handler16661 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_handler16665 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_handler16667 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_handlerStatement_in_handler16669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_handlerIdent16724 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_handlerIdent16726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_handlerStatement16775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_in_raiseStatement16864 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16867 = new BitSet(new long[]{0x0000000000008002L});
	public static final BitSet FOLLOW_AT_in_raiseStatement16872 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASM_in_assemblerStatement16927 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
	public static final BitSet FOLLOW_END_in_assemblerStatement16935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reintroduceDirective_in_methodDirective17008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_methodDirective17050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bindingDirective_in_methodDirective17095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abstractDirective_in_methodDirective17141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_methodDirective17186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_methodDirective17233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_methodDirective17281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDirective17283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective17325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_methodDirective17361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_functionDirective17409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_functionDirective17452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_functionDirective17497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective17543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_functionDirective17577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_functionDirective17620 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective17624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSAFE_in_functionDirective17667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REINTRODUCE_in_reintroduceDirective17729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_reintroduceDirective17731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_overloadDirective17779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_overloadDirective17782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MESSAGE_in_bindingDirective17837 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_bindingDirective17839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATIC_in_bindingDirective17874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective17909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective17944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective17979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSTRACT_in_abstractDirective18029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINAL_in_abstractDirective18064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INLINE_in_inlineDirective18116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSEMBLER_in_inlineDirective18151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CDECL_in_callConvention18205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASCAL_in_callConvention18244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REGISTER_in_callConvention18282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SAFECALL_in_callConvention18318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STDCALL_in_callConvention18354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORT_in_callConvention18391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FAR_in_oldCallConventionDirective18659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCAL_in_oldCallConventionDirective18700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NEAR_in_oldCallConventionDirective18739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18741 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective18795 = new BitSet(new long[]{0x0000000080000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_stringFactor_in_hintingDirective18798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective18833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLATFORM_in_hintingDirective18868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_hintingDirective18901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARARGS_in_externalDirective18949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective18951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective18987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective18989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19022 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_externalDirective19024 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_externalSpecifier_in_externalDirective19027 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_externalSpecifier19080 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_externalSpecifier19115 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISPID_in_dispIDDirective19170 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_dispIDDirective19172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_dispIDDirective19174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_200_in_ident19270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident19305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identList19583 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identList19586 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_identList19588 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_identListFlat19653 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identListFlat19656 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_identListFlat19658 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_label19732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIntNum_in_label19765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkHexNum_in_label19798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_label19831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkRealNum_in_realNum19981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespacedQualifiedIdent20023 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_namespacedQualifiedIdent20025 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent20029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namespaceName20081 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_namespaceName20084 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_namespaceName20086 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent20141 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_qualifiedIdent20143 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent20148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred30_Delphi1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_synpred31_Delphi1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred32_Delphi1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred36_Delphi2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred38_Delphi2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constDeclaration_in_synpred40_Delphi2331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred42_Delphi2486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred45_Delphi2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred46_Delphi2646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varDeclaration_in_synpred48_Delphi2743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred50_Delphi2903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred53_Delphi2995 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred53_Delphi2997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred54_Delphi3030 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_synpred54_Delphi3032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_synpred61_Delphi3277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_synpred62_Delphi3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_synpred63_Delphi3343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_synpred64_Delphi3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_synpred65_Delphi3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred67_Delphi3450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred68_Delphi3443 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_typeId_in_synpred68_Delphi3447 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred68_Delphi3450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_synpred78_Delphi4002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OF_in_synpred79_Delphi4174 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_synpred79_Delphi4176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_synpred81_Delphi4325 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred81_Delphi4327 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_synpred81_Delphi4329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_codePageNumber_in_synpred84_Delphi4376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_synpred85_Delphi4485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_synpred86_Delphi4518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred88_Delphi4661 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred88_Delphi4665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred90_Delphi4773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred92_Delphi4828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred93_Delphi4940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_synpred94_Delphi4973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_synpred95_Delphi5062 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_synpred95_Delphi5064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_complexGenericDefinition_in_synpred101_Delphi5354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred113_Delphi5879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_synpred114_Delphi5912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred122_Delphi6237 = new BitSet(new long[]{0x1052000A78928160L,0x83DA02904B081402L,0x4000400022E0122DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classState_in_synpred122_Delphi6240 = new BitSet(new long[]{0x1052000A78928140L,0x83DA02904B081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classParent_in_synpred122_Delphi6245 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_classItem_in_synpred122_Delphi6250 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x4000400022E0022DL,0x0000000000000111L});
	public static final BitSet FOLLOW_END_in_synpred122_Delphi6254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred123_Delphi6308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred126_Delphi6544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred127_Delphi6577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_synpred128_Delphi6610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred129_Delphi6643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_synpred133_Delphi6685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_synpred137_Delphi6727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred142_Delphi6931 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred143_Delphi6964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_synpred148_Delphi7050 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_synpred148_Delphi7053 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_synpred148_Delphi7058 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_synpred148_Delphi7063 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_synpred148_Delphi7067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred149_Delphi7161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred151_Delphi7404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred152_Delphi7438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred155_Delphi7578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred156_Delphi7611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_synpred157_Delphi7699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred158_Delphi7788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred161_Delphi7938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred162_Delphi7976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred163_Delphi8009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred166_Delphi8108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred180_Delphi8646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred181_Delphi8734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred186_Delphi8734 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred186_Delphi8739 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred186_Delphi8743 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred186_Delphi8745 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred186_Delphi8748 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred186_Delphi8753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred186_Delphi8757 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred186_Delphi8760 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred187_Delphi8868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi8894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred193_Delphi8868 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred193_Delphi8873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred193_Delphi8877 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred193_Delphi8879 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred193_Delphi8882 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred193_Delphi8887 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred193_Delphi8891 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_synpred193_Delphi8894 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_synpred193_Delphi8898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred193_Delphi8900 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred193_Delphi8903 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred194_Delphi9020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred198_Delphi9046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred199_Delphi9181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred201_Delphi9301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred208_Delphi9561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred212_Delphi9712 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred212_Delphi9714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred213_Delphi9747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred216_Delphi9912 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred216_Delphi9914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred216_Delphi9916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred217_Delphi9949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred217_Delphi9951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred230_Delphi10534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred231_Delphi10543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred234_Delphi10590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred235_Delphi10652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_synpred236_Delphi10657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred237_Delphi10717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred240_Delphi10717 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred240_Delphi10722 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred240_Delphi10727 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_methodName_in_synpred240_Delphi10729 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred240_Delphi10732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred241_Delphi10830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred244_Delphi10852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred246_Delphi10830 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred246_Delphi10835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred246_Delphi10839 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_methodName_in_synpred246_Delphi10841 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred246_Delphi10844 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_synpred246_Delphi10849 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_customAttribute_in_synpred246_Delphi10852 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x0008E00128E0402FL,0x0000000000000311L});
	public static final BitSet FOLLOW_typeDecl_in_synpred246_Delphi10856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred247_Delphi10965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred249_Delphi10984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred257_Delphi11325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procBody_in_synpred258_Delphi11330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred259_Delphi11396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred261_Delphi11396 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_synpred261_Delphi11400 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred261_Delphi11402 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred261_Delphi11405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred262_Delphi11505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred266_Delphi11747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred272_Delphi12059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_synpred274_Delphi12100 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred274_Delphi12102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_synpred275_Delphi12106 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred275_Delphi12108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred276_Delphi12113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_synpred278_Delphi12251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expressionList_in_synpred279_Delphi12307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_synpred281_Delphi12399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relOp_in_synpred282_Delphi12443 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_simpleExpression_in_synpred282_Delphi12445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_synpred283_Delphi12450 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred283_Delphi12452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred284_Delphi12506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_synpred287_Delphi12606 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred287_Delphi12608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT2_in_synpred288_Delphi12669 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred288_Delphi12671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_201_in_synpred289_Delphi12704 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred289_Delphi12706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_synpred290_Delphi12746 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred290_Delphi12748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_synpred291_Delphi12781 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred291_Delphi12783 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_synpred292_Delphi12816 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_factor_in_synpred292_Delphi12818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred293_Delphi12851 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred293_Delphi12853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intNum_in_synpred294_Delphi12897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_realNum_in_synpred295_Delphi12930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkAsmHexNum_in_synpred296_Delphi12963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_synpred297_Delphi13006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_synpred298_Delphi13039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_synpred299_Delphi13072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred300_Delphi13112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred301_Delphi13117 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred301_Delphi13119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred302_Delphi13105 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred302_Delphi13107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred302_Delphi13109 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_synpred302_Delphi13112 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred302_Delphi13117 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred302_Delphi13119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_synpred303_Delphi13162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_synpred304_Delphi13195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred305_Delphi13228 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred306_Delphi13323 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_synpred306_Delphi13325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred307_Delphi13330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred309_Delphi13368 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_synpred309_Delphi13370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred310_Delphi13375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred313_Delphi13435 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_set_in_synpred313_Delphi13438 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred313_Delphi13446 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_INHERITED_in_synpred314_Delphi13509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred315_Delphi13516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred316_Delphi13516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_synpred316_Delphi13520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designatorItem_in_synpred317_Delphi13527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred327_Delphi13761 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred327_Delphi13764 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred327_Delphi13769 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred327_Delphi13771 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred327_Delphi13774 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_label_in_synpred358_Delphi15028 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred358_Delphi15030 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_synpred358_Delphi15032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_synpred359_Delphi15128 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_synpred359_Delphi15130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred366_Delphi15397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred367_Delphi15513 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_synpred367_Delphi15515 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred367_Delphi15517 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred367_Delphi15519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_synpred367_Delphi15521 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred367_Delphi15523 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred367_Delphi15525 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_synpred367_Delphi15527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred368_Delphi15560 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_synpred368_Delphi15562 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred368_Delphi15564 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred368_Delphi15566 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_synpred368_Delphi15568 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred368_Delphi15570 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred368_Delphi15572 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_synpred368_Delphi15574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred369_Delphi15732 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_AS_in_synpred369_Delphi15734 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_synpred369_Delphi15736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred371_Delphi15834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred372_Delphi15904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred373_Delphi15912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred374_Delphi15909 = new BitSet(new long[]{0x905001026039C942L,0x880602904F083508L,0x0000E00010E0006DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statement_in_synpred374_Delphi15912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred375_Delphi15966 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred375_Delphi15968 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred375_Delphi15970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred376_Delphi16003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred378_Delphi16127 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_expression_in_synpred378_Delphi16129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred378_Delphi16131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred382_Delphi16252 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred382_Delphi16254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_synpred382_Delphi16257 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred382_Delphi16259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred382_Delphi16263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred384_Delphi16297 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_synpred384_Delphi16299 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_synpred384_Delphi16302 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x0008E00108E0002DL,0x0000000000000311L});
	public static final BitSet FOLLOW_constExpression_in_synpred384_Delphi16304 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred384_Delphi16308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred385_Delphi16448 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred386_Delphi16445 = new BitSet(new long[]{0x905801026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_synpred386_Delphi16448 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_synpred386_Delphi16452 = new BitSet(new long[]{0x905301026039C940L,0x880602D04F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_handlerList_in_synpred386_Delphi16454 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_synpred386_Delphi16456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred387_Delphi16492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred388_Delphi16499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_synpred391_Delphi16558 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_synpred391_Delphi16563 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x0000E00010E0206DL,0x000000000000011DL});
	public static final BitSet FOLLOW_statementList_in_synpred391_Delphi16565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred394_Delphi16775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred394_Delphi16778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred395_Delphi16867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_synpred396_Delphi16872 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_designator_in_synpred396_Delphi16874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred414_Delphi17782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_synpred438_Delphi18987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred438_Delphi18989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_synpred477_Delphi20023 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred477_Delphi20025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred478_Delphi20084 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x0000400000E0002DL,0x0000000000000111L});
	public static final BitSet FOLLOW_ident_in_synpred478_Delphi20086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred479_Delphi20141 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred479_Delphi20143 = new BitSet(new long[]{0x0000000000000002L});
}
